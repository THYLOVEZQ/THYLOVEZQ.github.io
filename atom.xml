<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>THYLOVEZJ的博客</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-01-20T06:46:39.687Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>THYLOVEZJ</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>最长递增子数组</title>
    <link href="http://example.com/2022/01/20/%E6%9C%80%E9%95%BF%E9%80%92%E5%A2%9E%E5%AD%90%E6%95%B0%E7%BB%84/"/>
    <id>http://example.com/2022/01/20/%E6%9C%80%E9%95%BF%E9%80%92%E5%A2%9E%E5%AD%90%E6%95%B0%E7%BB%84/</id>
    <published>2022-01-20T06:40:04.000Z</published>
    <updated>2022-01-20T06:46:39.687Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>给你一个整数数组 nums ，找到其中最长严格递增子序列的长度。</p><p>子序列是由数组派生而来的序列，删除（或不删除）数组中的元素而不改变其余元素的顺序。例如，[3,6,2,7] 是数组 [0,3,1,6,2,2,7] 的子序列。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [10,9,2,5,3,7,101,18]</span><br><span class="line">输出：4</span><br><span class="line">解释：最长递增子序列是 [2,3,7,101]，因此长度为 4 。</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">lengthOfLIS</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//定义一个dp数组</span></span><br><span class="line">        <span class="keyword">int</span>[] dp = <span class="keyword">new</span> <span class="keyword">int</span>[nums.length];</span><br><span class="line">        <span class="comment">//该方法可以将数组得元素全部置为1</span></span><br><span class="line">        Arrays.fill(dp,<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;nums.length;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;=i;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(nums[i]&gt;nums[j])</span><br><span class="line">                dp[i]=Math.max(dp[i],dp[j]+<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;dp.length;k++)&#123;</span><br><span class="line">            res = Math.max(dp[k],res);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解题思路:</p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;给你一个整数数组 nums ，找到其中最长严格递增子序列的长度。&lt;/p&gt;
&lt;p&gt;子序列是由数组派生而来的序列，删除（或不删除）数组中的元素而不改变其余元素的顺序。例如，[3,6,2,7] 是数组 [0,3,1,6,2,2,7] 的子序列。&lt;/p&gt;
</summary>
      
    
    
    
    <category term="Leetcode刷题" scheme="http://example.com/categories/Leetcode%E5%88%B7%E9%A2%98/"/>
    
    
  </entry>
  
  <entry>
    <title>动态规划</title>
    <link href="http://example.com/2022/01/19/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    <id>http://example.com/2022/01/19/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/</id>
    <published>2022-01-19T12:36:10.000Z</published>
    <updated>2022-01-19T16:27:50.971Z</updated>
    
    <content type="html"><![CDATA[<h3 id="动态规划基础">动态规划基础</h3><p>状态在动态规划中的作用</p><p>简单来说，动态规划需要开辟一个数组，数组的每个元素f[i]代表什么</p><p>确定状态需要两个意识</p><p>最后一步</p><p>子问题</p><h3 id="零钱兑换">零钱兑换</h3><blockquote><p>给你一个整数数组 coins ，表示不同面额的硬币；以及一个整数 amount ，表示总金额。</p><p>计算并返回可以凑成总金额所需的 最少的硬币个数 。如果没有任何一种硬币组合能组成总金额，返回 -1 。</p><p>你可以认为每种硬币的数量是无限的。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：coins = [1, 2, 5], amount = 11</span><br><span class="line">输出：3 </span><br><span class="line">解释：11 = 5 + 5 + 1</span><br></pre></td></tr></table></figure><p>思路:</p><p>先判断子问题</p><p>声明一个数组用来存放amount需要的最少硬币个数</p><p>写出基本条件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">coinChange</span><span class="params">(<span class="keyword">int</span>[] coins, <span class="keyword">int</span> amount)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//声明一个数组，存储拼出amount所需最小的硬币数</span></span><br><span class="line">        <span class="keyword">int</span>[] res = <span class="keyword">new</span> <span class="keyword">int</span>[amount+<span class="number">1</span>];</span><br><span class="line">        res[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=amount;i++)&#123;</span><br><span class="line">            res[i] = Integer.MAX_VALUE;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> coin:coins)&#123;</span><br><span class="line">                <span class="keyword">if</span>(i-coin&gt;=<span class="number">0</span> &amp;&amp; res[i-coin]!=Integer.MAX_VALUE)</span><br><span class="line">                <span class="comment">//要让f[i]的硬币最少，既让f[i-coin]最少dp[i]=dp[i-coin]+1</span></span><br><span class="line">                res[i]=Math.min(res[i-coin]+<span class="number">1</span>,res[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(res[amount]==Integer.MAX_VALUE)&#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res[amount];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;动态规划基础&quot;&gt;动态规划基础&lt;/h3&gt;
&lt;p&gt;状态在动态规划中的作用&lt;/p&gt;
&lt;p&gt;简单来说，动态规划需要开辟一个数组，数组的每个元素f[i]代表什么&lt;/p&gt;
&lt;p&gt;确定状态需要两个意识&lt;/p&gt;
&lt;p&gt;最后一步&lt;/p&gt;
&lt;p&gt;子问题&lt;/p&gt;
&lt;h3 id=&quot;零钱兑</summary>
      
    
    
    
    <category term="Leetcode刷题" scheme="http://example.com/categories/Leetcode%E5%88%B7%E9%A2%98/"/>
    
    
  </entry>
  
  <entry>
    <title>二叉树的最近公共祖先</title>
    <link href="http://example.com/2022/01/18/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E6%9C%80%E8%BF%91%E5%85%AC%E5%85%B1%E7%A5%96%E5%85%88/"/>
    <id>http://example.com/2022/01/18/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E6%9C%80%E8%BF%91%E5%85%AC%E5%85%B1%E7%A5%96%E5%85%88/</id>
    <published>2022-01-18T08:02:49.000Z</published>
    <updated>2022-01-18T08:13:57.797Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>给定一个二叉树, 找到该树中两个指定节点的最近公共祖先。</p><p>百度百科中最近公共祖先的定义为：“对于有根树 T 的两个节点 p、q，最近公共祖先表示为一个节点 x，满足 x 是 p、q 的祖先且 x 的深度尽可能大（一个节点也可以是它自己的祖先）。”</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 1</span><br><span class="line">输出：3</span><br><span class="line">解释：节点 5 和节点 1 的最近公共祖先是节点 3 。</span><br></pre></td></tr></table></figure><p>思路</p><p>函数签名如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> TreeNode <span class="title">lowestCommonAncestor</span><span class="params">(TreeNode root, TreeNode p, TreeNode q)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果根节点为空，根节点为p或者根节点为q，那么直接返回根节点</p><p>如果根节点不为空，则递归寻找根节点的左子树和根节点的右子树</p><p>后序遍历有以下几种情况。如果根节点的左子树不为空且根节点的右子树不为空，那么直接返回root即可</p><p>如果根节点的左子树和右子树都为空，则返回null</p><p>如果根节点的左右子树有一个为空，则返回不为空的节点，因为另一个节点肯定是其子节点</p><p>详细代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> TreeNode <span class="title">lowestCommonAncestor</span><span class="params">(TreeNode root, TreeNode p, TreeNode q)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//如果根节点为空，或者p节点或者q节点为root，那么直接返回根节点即可</span></span><br><span class="line">        <span class="keyword">if</span>(root==<span class="keyword">null</span> || p==root || q==root)<span class="keyword">return</span> root;</span><br><span class="line">        TreeNode left = lowestCommonAncestor(root.left,p,q);</span><br><span class="line">        TreeNode right = lowestCommonAncestor(root.right,p,q);</span><br><span class="line">        <span class="comment">//此时返回以后,代表此时左子树和右子树都找到了那么返回根节点即可</span></span><br><span class="line">        <span class="keyword">if</span>(left!=<span class="keyword">null</span>&amp;&amp;right!=<span class="keyword">null</span>)<span class="keyword">return</span> root;</span><br><span class="line">        <span class="comment">//如果此时以root为根的左右子树都没有找到，那么返回null</span></span><br><span class="line">        <span class="keyword">if</span>(left==<span class="keyword">null</span>&amp;&amp;right==<span class="keyword">null</span>)<span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">//如果此时以root为根的左子树或者右子树一个为null，则返回该节点，该节点即是另一节点的最近公共祖先</span></span><br><span class="line">        <span class="keyword">return</span> left == <span class="keyword">null</span> ? right:left;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;给定一个二叉树, 找到该树中两个指定节点的最近公共祖先。&lt;/p&gt;
&lt;p&gt;百度百科中最近公共祖先的定义为：“对于有根树 T 的两个节点 p、q，最近公共祖先表示为一个节点 x，满足 x 是 p、q 的祖先且 x 的深度尽可能大（一个节点也可以是它自己</summary>
      
    
    
    
    <category term="Leetcode刷题" scheme="http://example.com/categories/Leetcode%E5%88%B7%E9%A2%98/"/>
    
    
  </entry>
  
  <entry>
    <title>过滤器</title>
    <link href="http://example.com/2022/01/17/%E8%BF%87%E6%BB%A4%E5%99%A8/"/>
    <id>http://example.com/2022/01/17/%E8%BF%87%E6%BB%A4%E5%99%A8/</id>
    <published>2022-01-17T14:23:09.000Z</published>
    <updated>2022-01-23T13:49:43.820Z</updated>
    
    <content type="html"><![CDATA[<h3 id="什么是过滤器">什么是过滤器</h3><p>过滤器(Filter)是J2EE Servlet下的组件</p><p>Filter的作用是对URL进行统一的拦截处理</p><p>Filter通常用于应用程序层面进行全局处理</p><p>开发过滤器三要素</p><blockquote><p>任何过滤器都要实现javax.servlet.Filter接口</p><p>在Filter接口中的doFilter()方法中编写过滤器的功能代码</p><p>在web.xml中对过滤器进行配置，说明拦截URL的范围</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.thylovezj.filter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyFirstFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;过滤器已生效&quot;</span>);</span><br><span class="line">        filterChain.doFilter(servletRequest,servletResponse);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://java.sun.com/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">           <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">           <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://java.sun.com/xml/ns/javaee</span></span></span><br><span class="line"><span class="string"><span class="tag">  http://java.sun.com/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">           <span class="attr">version</span>=<span class="string">&quot;4.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        filter标签用于说明哪个类是过滤器，并在应用启动时自动加载</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>MyFirstFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>com.thylovezj.filter.MyFirstFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    filter-mapping标签用于说明过滤器对URL应用的范围，要点有二</span></span><br><span class="line"><span class="comment">    1.filter-name 过滤器名称与filter.filter-name保持一致</span></span><br><span class="line"><span class="comment">    2.url-pattern说明过滤器作用范围./* 代表对所有URL进行过滤</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>MyFirstFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="过滤器的生命周期">过滤器的生命周期</h3><p>过滤器的声明周期</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">初始化-Filter.init()-&gt;提供服务-Filter.doFilter()-&gt;销毁-Filter.destroy()</span><br></pre></td></tr></table></figure><p>过滤器的特性</p><p><strong>过滤器对象在Web应用启动时被创建且全局唯一</strong></p><p><strong>唯一的过滤器对象在并发环境中采用“多线程”提供服务(单例多线程)</strong></p><h3 id="过滤器的注解形式">过滤器的注解形式</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@WebFilter(FilterName=&quot;MyAnnotationFilter&quot;,urlPatterns=&quot;/*&quot;)</span><br></pre></td></tr></table></figure><h4 id="配置与注解如何选择">配置与注解如何选择</h4><p>配置形式维护性更好，适合应用全局过滤</p><p>‘注解形式开发体验更好，适合小型项目敏捷开发</p><h3 id="用参数配置过滤器">用参数配置过滤器</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.thylovezj.filter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.naming.Name;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebFilter;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebInitParam;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="meta">@WebFilter(filterName = &quot;CharacterEncodingFilter&quot;,urlPatterns = &quot;/*&quot;,</span></span><br><span class="line"><span class="meta">        initParams = &#123;</span></span><br><span class="line"><span class="meta">        @WebInitParam(name = &quot;encoding&quot;,value = &quot;UTF-8&quot;)</span></span><br><span class="line"><span class="meta">        &#125;</span></span><br><span class="line"><span class="meta">)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CharacterEncodingFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String encoding;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">         encoding = filterConfig.getInitParameter(<span class="string">&quot;encoding&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">        HttpServletRequest servletRequest1 = (HttpServletRequest) servletRequest;</span><br><span class="line">        servletRequest1.setCharacterEncoding(encoding);</span><br><span class="line">        HttpServletResponse res = (HttpServletResponse) servletResponse;</span><br><span class="line">        res.setContentType(<span class="string">&quot;text/html;charset=&quot;</span>+encoding);</span><br><span class="line">        filterChain.doFilter(servletRequest,servletResponse);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="URL匹配常用写法">URL匹配常用写法</h3><p>/index.jsp-执行资源精确匹配</p><p>/servlet/*-以前缀进行模糊匹配</p><p>*.jsp-以后缀进行模糊匹配</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;什么是过滤器&quot;&gt;什么是过滤器&lt;/h3&gt;
&lt;p&gt;过滤器(Filter)是J2EE Servlet下的组件&lt;/p&gt;
&lt;p&gt;Filter的作用是对URL进行统一的拦截处理&lt;/p&gt;
&lt;p&gt;Filter通常用于应用程序层面进行全局处理&lt;/p&gt;
&lt;p&gt;开发过滤器三要素&lt;/p&gt;</summary>
      
    
    
    
    <category term="JavaEE" scheme="http://example.com/categories/JavaEE/"/>
    
    
  </entry>
  
  <entry>
    <title>扁平化嵌套列表迭代器</title>
    <link href="http://example.com/2022/01/17/%E6%89%81%E5%B9%B3%E5%8C%96%E5%B5%8C%E5%A5%97%E5%88%97%E8%A1%A8%E8%BF%AD%E4%BB%A3%E5%99%A8/"/>
    <id>http://example.com/2022/01/17/%E6%89%81%E5%B9%B3%E5%8C%96%E5%B5%8C%E5%A5%97%E5%88%97%E8%A1%A8%E8%BF%AD%E4%BB%A3%E5%99%A8/</id>
    <published>2022-01-17T04:01:21.000Z</published>
    <updated>2022-01-17T04:22:15.165Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>给你一个嵌套的整数列表 nestedList 。每个元素要么是一个整数，要么是一个列表；该列表的元素也可能是整数或者是其他列表。请你实现一个迭代器将其扁平化，使之能够遍历这个列表中的所有整数。</p><p>实现扁平迭代器类 NestedIterator ：</p><p>NestedIterator(List<NestedInteger> nestedList) 用嵌套列表 nestedList 初始化迭代器。<br>int next() 返回嵌套列表的下一个整数。<br>boolean hasNext() 如果仍然存在待迭代的整数，返回 true ；否则，返回 false 。</p></blockquote><p>本题的函数签名如下，首先思考，本题应该是一个N叉树问题</p><p>我们应该去遍历这个N叉树的叶子节点</p><p>比如说，该题输入为**[[1,1],2,[1,1]]**，那么二叉树的结构如下</p><p><img src="D:%5Cthy123%5Csource%5Cimg%5C9.jpg" alt=""></p><p>源代码如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NestedIterator</span> <span class="keyword">implements</span> <span class="title">Iterator</span>&lt;<span class="title">Integer</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Iterator&lt;Integer&gt; it;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">NestedIterator</span><span class="params">(List&lt;NestedInteger&gt; nestedList)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//声明一个ArrayList用来存放压平的数组</span></span><br><span class="line">        List&lt;Integer&gt; result = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">        <span class="comment">//以每个根节点为root</span></span><br><span class="line">        <span class="keyword">for</span>(NestedInteger root:nestedList)&#123;</span><br><span class="line">            traverse(root,result);</span><br><span class="line">        &#125;</span><br><span class="line">        it = result.iterator();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> it.next();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> it.hasNext();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">traverse</span><span class="params">(NestedInteger root,List&lt;Integer&gt; result)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root.isInteger())&#123;</span><br><span class="line">            result.add(root.getInteger());</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(NestedInteger r:root.getList())&#123;</span><br><span class="line">            traverse(r,result);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;给你一个嵌套的整数列表 nestedList 。每个元素要么是一个整数，要么是一个列表；该列表的元素也可能是整数或者是其他列表。请你实现一个迭代器将其扁平化，使之能够遍历这个列表中的所有整数。&lt;/p&gt;
&lt;p&gt;实现扁平迭代器类 NestedItera</summary>
      
    
    
    
    <category term="Leetcode刷题" scheme="http://example.com/categories/Leetcode%E5%88%B7%E9%A2%98/"/>
    
    
  </entry>
  
  <entry>
    <title>JQuery与Ajax</title>
    <link href="http://example.com/2022/01/17/JQuery%E4%B8%8EAjax/"/>
    <id>http://example.com/2022/01/17/JQuery%E4%B8%8EAjax/</id>
    <published>2022-01-16T16:21:15.000Z</published>
    <updated>2022-01-17T14:22:02.834Z</updated>
    
    <content type="html"><![CDATA[<h3 id="JavaScipt库">JavaScipt库</h3><p>为了简化JavaScript开发，第三方厂商开发了JavaScript库</p><table><thead><tr><th>主流JavaScript库</th><th></th></tr></thead><tbody><tr><td>jQuery</td><td></td></tr><tr><td>Vue.js</td><td></td></tr><tr><td>AngularJS</td><td></td></tr><tr><td>React</td><td></td></tr><tr><td>…</td><td></td></tr></tbody></table><p>jQuery是一个轻量级JS库，使用十分简单</p><p>jQuery的核心是选择器，用于获取页面元素</p><p>jQuery提供了大量高效方法，开发速度大幅提升</p><h3 id="jQuery选择器">jQuery选择器</h3><h4 id="引入jQuery">引入jQuery</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;js/jquery-3.3.1.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="对超链接增加CSS类">对超链接增加CSS类</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$(&quot;a&quot;).addclass(&quot;highlight&quot;)</span><br><span class="line">a为选择器表达式</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var selector = document.getElementById(&quot;txtSelector&quot;).value;</span><br><span class="line">$(&quot;*&quot;).removeClass(&quot;highlight&quot;);</span><br><span class="line">$&#123;selector&#125;.addClass(&quot;highlight&quot;);</span><br></pre></td></tr></table></figure><h3 id="层叠选择器">层叠选择器</h3><p>层叠选择器是根据元素的位置关系来获取元素的选择器表达式</p><table><thead><tr><th>语法</th><th>说明</th></tr></thead><tbody><tr><td>$(“ancestor descendant”)</td><td>后代选择器</td></tr><tr><td>$(“ancestor&gt;descendant”)</td><td>子选择器</td></tr><tr><td>$(“prev~siblings”)</td><td>兄弟选择器(选择节点之后的所有节点)</td></tr></tbody></table><h3 id="属性选择器">属性选择器</h3><p>属性选择器是根据元素的属性值来选择元素的选择器表达式</p><table><thead><tr><th>语法</th><th>说明</th></tr></thead><tbody><tr><td>$(“selector[attribute=value]”)</td><td>选择属性值等于具体值的组件</td></tr><tr><td>$(“selector[attribute^=value]”)</td><td>选中属性值以某值开头的组件</td></tr><tr><td>$(“selector[attribute dollar符=value]”)</td><td>选中属性值以某值结尾的组件</td></tr><tr><td>$(“selector[attribute*=value]”)</td><td>选中属性值包含某值的组件</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a[href=<span class="string">&quot;http://www.baidu.com&quot;</span>]</span><br><span class="line">a[href*=<span class="string">&quot;edu.cn&quot;</span>]</span><br></pre></td></tr></table></figure><h3 id="位置选择器">位置选择器</h3><p>位置选择器是通过位置获取指定的元素，例如&quot;获取第3个元素&quot;</p><table><thead><tr><th>语法</th><th>说明</th></tr></thead><tbody><tr><td>$(“selector:first”)</td><td>获取第一个元素</td></tr><tr><td>$(“selector:last”)</td><td>获取最后一个元素</td></tr><tr><td>$(“selector:even”)</td><td>获取偶位置的元素(从0开始)</td></tr><tr><td>$(“selector:odd”)</td><td>获取奇数位置的元素(从0开始)</td></tr><tr><td>$(“selector:eq(n)”)</td><td>获取指定位置的元素(从0开始)</td></tr></tbody></table><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//获取第一次出现myclass类的元素</span><br><span class="line">$(&quot;myclass:first&quot;)</span><br></pre></td></tr></table></figure><h3 id="表单选择器">表单选择器</h3><p>表单选择器是获取表单元素的简化形式，例如，获取所有文本框</p><table><thead><tr><th>语法</th><th>说明</th></tr></thead><tbody><tr><td>$(“selector:input”)</td><td>所有输入元素</td></tr><tr><td>$(“selector:text”)</td><td>获取文本框</td></tr><tr><td>$(“selector:password”)</td><td>获取密码框</td></tr><tr><td>$(“selector:submit”)</td><td>获取提交按钮</td></tr><tr><td>$(“selector:reset”)</td><td>获取重置按钮</td></tr></tbody></table><h3 id="Web页面开发的两个要素">Web页面开发的两个要素</h3><p>在使用HTML开发页面时，有两个基本点</p><p>选择HTML页面上存在哪些元素</p><p>在这些元素上做哪些动作</p><h3 id="操作元素属性">操作元素属性</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">attr(name|properties|key)获取或者设置元素属性</span><br><span class="line">removeAttr(name)移除元素属性</span><br></pre></td></tr></table></figure><h3 id="操作元素的CSS样式">操作元素的CSS样式</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">css()-获取或设置匹配元素的样式属性</span><br><span class="line">addClass()-为每个匹配元素添加指定的类名</span><br><span class="line">removeClass()-从所有匹配的元素中删除全部或者指定的类</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">//将所有a标签的元素设置为红色</span><br><span class="line">$(&quot;a&quot;).css(&quot;color&quot;,&quot;red&quot;);</span><br><span class="line">//用json设置a标签</span><br><span class="line">$(&quot;a&quot;).css(&#123;&quot;color&quot;:&quot;red&quot;&#125;);</span><br><span class="line">//输出a的color</span><br><span class="line">var color = $(&quot;a&quot;).css(&quot;color&quot;);</span><br><span class="line">alert(color);</span><br></pre></td></tr></table></figure><h3 id="设置元素的内容">设置元素的内容</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">val()-获取输入项的值</span><br><span class="line">text()-获取或者设置元素的纯文本</span><br><span class="line">html()-获取或设置元素内部的HTML</span><br></pre></td></tr></table></figure><h3 id="jQuery事件处理方法">jQuery事件处理方法</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">on(&quot;click&quot;,function)-为选中的页面元素绑定单击时间</span><br><span class="line">click(function)-是绑定事件的简写形式</span><br><span class="line">处理方法中提供了event参数包含了事件的相关信息</span><br></pre></td></tr></table></figure><h3 id="jQuery常用事件">jQuery常用事件</h3><table><thead><tr><th>鼠标事件</th><th>键盘事件</th><th>表单事件</th><th>文档/窗口事件</th></tr></thead><tbody><tr><td>click</td><td>keypress</td><td>submit</td><td>load</td></tr><tr><td>dblclick</td><td>keydown</td><td>change</td><td>resize</td></tr><tr><td>mouseenter</td><td>keyup</td><td>focus</td><td>scroll</td></tr><tr><td>mouseleave</td><td></td><td>blur</td><td>unload</td></tr><tr><td>mouseover</td><td></td><td></td><td></td></tr></tbody></table><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$(&quot;p.myclass&quot;).on(&quot;click&quot;,function&#123;</span><br><span class="line">//$(this)是指当前事件产生的对象</span><br><span class="line">$(this).css(&quot;background-color&quot;,&quot;yellow&quot;);</span><br><span class="line">&#125;);</span><br><span class="line">//也可以写成</span><br><span class="line">$(&quot;span.myclass&quot;).click(function()&#123;</span><br><span class="line">$(this).css(&quot;background-color&quot;:&quot;lightgreen&quot;);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="Ajax介绍">Ajax介绍</h3><p>Asynchronous Javascript And XML(异步的Javascript和XML)</p><p>Ajax可以在不刷新页面的情况下，进行页面局部更新</p><p>Ajax不是新的技术，Ajax并不是W3C标准</p><h3 id="Ajax的使用流程">Ajax的使用流程</h3><p>创建一个XmlHttpRequest对象</p><p>发送Ajax请求</p><p>处理服务器响应</p><h3 id="创建XMLHttpRequest对象">创建XMLHttpRequest对象</h3><p>XMLHttpRequest用于在后台与服务器交换数据，是AJAX的核心</p><p>XMLHttpRequest并不是W3C标准，不同的服务器的创建方法不同</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">var xmlhttp;</span><br><span class="line">if(window.XMLHttpRequest)</span><br><span class="line">&#123;</span><br><span class="line">//IE7+,Firefox,Chrome,Opera,Safari浏览器执行代码</span><br><span class="line">xmlhttp=new XMLHttpRequest();</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">//IE6,IE5浏览器执行代码</span><br><span class="line">xmlhttp=new ActiveXObject(&quot;Microsoft.XMLHTTP&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="发送Ajax请求">发送Ajax请求</h3><p>xmlhttp.open()用于创建请求</p><p>xmlhttp.send()用于发送请求</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//创建请求</span><br><span class="line">xmlhttp.open(&quot;GET&quot;,&quot;http://localhost/test?name=admin&quot;,true);</span><br><span class="line">//发送到服务器</span><br><span class="line">xmlhttp.send();</span><br></pre></td></tr></table></figure><h3 id="处理服务器响应">处理服务器响应</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">xmlhttp.onreadystatechange()事件用于监听AJAX的执行过程</span><br><span class="line"></span><br><span class="line">xmlhttp.readyState属性说明XMLHttpRequest当前状态</span><br><span class="line"></span><br><span class="line">xmlhttp.status属性服务器响应码，200成功，404未找到...</span><br></pre></td></tr></table></figure><table><thead><tr><th>readyState</th><th>说明</th></tr></thead><tbody><tr><td>readyState=0</td><td>请求未初始化</td></tr><tr><td>readyState=1</td><td>服务器连接已建立</td></tr><tr><td>readyState=2</td><td>请求已被接收</td></tr><tr><td>readyState=3</td><td>请求正在处理</td></tr><tr><td>readyState=4</td><td>响应文本已被接收</td></tr></tbody></table><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">xmlhttp.onreadystatechange=function()</span><br><span class="line">&#123;</span><br><span class="line">//响应已被接收且服务器处理成功时才执行</span><br><span class="line">if(xmlhttp.readyState==4&amp;&amp;xmlhttp.status==200)</span><br><span class="line">&#123;</span><br><span class="line">//获取响应体的文本</span><br><span class="line">var responseText = xmlhttp.responseText;</span><br><span class="line">//对服务器结果进行处理</span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="利用Ajax实现新闻列表">利用Ajax实现新闻列表</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.thylovezj.ajax;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">News</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String title;</span><br><span class="line">    <span class="keyword">private</span> String data;</span><br><span class="line">    <span class="keyword">private</span> String source;</span><br><span class="line">    <span class="keyword">private</span> String content;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">News</span><span class="params">(String title, String data, String source, String content)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.title = title;</span><br><span class="line">        <span class="keyword">this</span>.data = data;</span><br><span class="line">        <span class="keyword">this</span>.source = source;</span><br><span class="line">        <span class="keyword">this</span>.content = content;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">News</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getTitle</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> title;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTitle</span><span class="params">(String title)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.title = title;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getData</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setData</span><span class="params">(String data)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.data = data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getSource</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> source;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSource</span><span class="params">(String source)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.source = source;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getContent</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> content;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setContent</span><span class="params">(String content)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.content = content;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.thylovezj.ajax;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet(&quot;/newslist&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">newslist</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        List list = <span class="keyword">new</span> ArrayList();</span><br><span class="line">        list.add(<span class="keyword">new</span> News(<span class="string">&quot;TIOBE:2018年5月份全球编程语言排行榜&quot;</span>,<span class="string">&quot;2018-5-1&quot;</span>,<span class="string">&quot;TIOBE&quot;</span>,<span class="string">&quot;...&quot;</span>));</span><br><span class="line">        list.add(<span class="keyword">new</span> News(<span class="string">&quot;TIOBE:2018年6月份全球编程语言排行榜&quot;</span>,<span class="string">&quot;2018-6-1&quot;</span>,<span class="string">&quot;TIOBE&quot;</span>,<span class="string">&quot;...&quot;</span>));</span><br><span class="line">        list.add(<span class="keyword">new</span> News(<span class="string">&quot;TIOBE:2018年7月份全球编程语言排行榜&quot;</span>,<span class="string">&quot;2018-7-1&quot;</span>,<span class="string">&quot;TIOBE&quot;</span>,<span class="string">&quot;...&quot;</span>));</span><br><span class="line">        list.add(<span class="keyword">new</span> News(<span class="string">&quot;TIOBE:2018年8月份全球编程语言排行榜&quot;</span>,<span class="string">&quot;2018-8-1&quot;</span>,<span class="string">&quot;TIOBE&quot;</span>,<span class="string">&quot;...&quot;</span>));</span><br><span class="line">        String json = JSON.toJSONString(list);</span><br><span class="line">        System.out.println(json);</span><br><span class="line">        response.setContentType(<span class="string">&quot;text/html;charset=utf-8&quot;</span>);</span><br><span class="line">        response.getWriter().println(json);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="comment">//1.创建XmlHttpRequest</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> xmlhttp;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span>(<span class="built_in">window</span>.XMLHttpRequest)</span></span><br><span class="line"><span class="javascript">        &#123;</span></span><br><span class="line"><span class="javascript">    <span class="comment">//IE7+,Firefox,Chrome,Opera,Safari浏览器执行代码</span></span></span><br><span class="line"><span class="javascript">            xmlhttp=<span class="keyword">new</span> XMLHttpRequest();</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">else</span></span></span><br><span class="line"><span class="javascript">        &#123;</span></span><br><span class="line"><span class="javascript">            <span class="comment">//IE6,IE5浏览器执行代码</span></span></span><br><span class="line"><span class="javascript">            xmlhttp=<span class="keyword">new</span> ActiveXObject(<span class="string">&quot;Microsoft.XMLHTTP&quot;</span>);</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">        <span class="comment">//2.发送Ajax请求，true表示异步</span></span></span><br><span class="line"><span class="javascript">        xmlhttp.open(<span class="string">&quot;GET&quot;</span>,<span class="string">&quot;/web_war_exploded/newslist&quot;</span>,<span class="literal">true</span>);</span></span><br><span class="line"><span class="javascript">        xmlhttp.send();</span></span><br><span class="line"><span class="javascript">        <span class="comment">//3.显示json，异步通过onreadystatechange获取发送好的请求</span></span></span><br><span class="line"><span class="javascript">        xmlhttp.onreadystatechange=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span></span></span><br><span class="line"><span class="function"><span class="javascript">        </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="comment">//响应已被接收且服务器处理成功时才执行</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">if</span>(xmlhttp.readyState==<span class="number">4</span>&amp;&amp;xmlhttp.status==<span class="number">200</span>)</span></span><br><span class="line"><span class="javascript">            &#123;</span></span><br><span class="line"><span class="javascript">                <span class="comment">//获取响应体的文本</span></span></span><br><span class="line"><span class="javascript">                <span class="keyword">var</span> responseText = xmlhttp.responseText;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(responseText);</span></span><br><span class="line"><span class="javascript">                <span class="comment">//对服务器结果进行处理</span></span></span><br><span class="line"><span class="javascript">                <span class="keyword">var</span> json = <span class="built_in">JSON</span>.parse(responseText);</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(json);</span></span><br><span class="line"><span class="javascript">                <span class="keyword">var</span> html = <span class="string">&quot;&quot;</span>;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;json.length;i++)&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">var</span> news = json[i];</span></span><br><span class="line"><span class="javascript">                    html =html + <span class="string">&quot;&lt;h1&gt;&quot;</span>+news.title+<span class="string">&quot;&lt;/h1&gt;&quot;</span>;</span></span><br><span class="line"><span class="javascript">                    html = html + <span class="string">&quot;&lt;h2&gt;&quot;</span>+news.data+<span class="string">&quot;&amp;nbsp&quot;</span>+news.source+<span class="string">&quot;&lt;/h2&gt;&quot;</span>;</span></span><br><span class="line"><span class="javascript">                    html = html +<span class="string">&quot;&lt;hr/&gt;&quot;</span></span></span><br><span class="line"><span class="javascript">                &#125;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">document</span>.getElementById(<span class="string">&quot;container&quot;</span>).innerHTML=html;</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="同步和异步的区别">同步和异步的区别</h3><p>同步是指在发送过程中处于阻塞，只有当返回后才进行下一步</p><h3 id="jQuery对Ajax的支持">jQuery对Ajax的支持</h3><p>jQuery对Ajax进行了封装，提供了$.ajax()方法</p><p>语法:<strong>$.ajax(option)</strong></p><table><thead><tr><th>常用设置项</th><th>说明</th></tr></thead><tbody><tr><td>url</td><td>发送说明地址</td></tr><tr><td>type</td><td>请求类型get|post</td></tr><tr><td>data</td><td>向服务器传递的参数</td></tr><tr><td>dataType</td><td>服务器响应的数据类型json|jsonp</td></tr><tr><td>success</td><td>接收响应的处理函数</td></tr><tr><td>error</td><td>请求失败时的处理函数</td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;JavaScipt库&quot;&gt;JavaScipt库&lt;/h3&gt;
&lt;p&gt;为了简化JavaScript开发，第三方厂商开发了JavaScript库&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;主流JavaScript库&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
</summary>
      
    
    
    
    <category term="JavaEE" scheme="http://example.com/categories/JavaEE/"/>
    
    
  </entry>
  
  <entry>
    <title>JSON入门</title>
    <link href="http://example.com/2022/01/16/JSON%E5%85%A5%E9%97%A8/"/>
    <id>http://example.com/2022/01/16/JSON%E5%85%A5%E9%97%A8/</id>
    <published>2022-01-16T08:22:54.000Z</published>
    <updated>2022-01-16T16:20:13.166Z</updated>
    
    <content type="html"><![CDATA[<h3 id="JSON-介绍">JSON 介绍</h3><p>JavaScript Object Notation(JavaScript对象表示法)</p><p>JSON是轻量级的文本数据交换格式</p><p>JSON独立于语言，具有自我描述性，更易理解</p><h3 id="JSON语法规则">JSON语法规则</h3><p>数据由键(key)/值(value)描述，由逗号分隔</p><p>大括号代表一个完整的对象，拥有多个键值对</p><p>中括号表示数组，多个对象之间使用逗号分隔</p><p><strong>JSON中键和值都要拿&quot;&quot;分隔</strong></p><h3 id="利用JSON存储员工信息表">利用JSON存储员工信息表</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">&quot;empno&quot;</span>: <span class="number">7369</span>,</span><br><span class="line">    <span class="attr">&quot;ename&quot;</span>: <span class="string">&quot;张三&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;job&quot;</span>: <span class="string">&quot;软件工程师&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;salary&quot;</span>: <span class="number">13000</span>,</span><br><span class="line">    <span class="attr">&quot;hiredate&quot;</span>: <span class="string">&quot;2017-05-12&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;dname&quot;</span>: <span class="string">&quot;研发部&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">&quot;empno&quot;</span>: <span class="number">7499</span>,</span><br><span class="line">    <span class="attr">&quot;ename&quot;</span>: <span class="string">&quot;李斯&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;job&quot;</span>: <span class="string">&quot;客户经理&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;salary&quot;</span>: <span class="number">10000</span>,</span><br><span class="line">    <span class="attr">&quot;hiredate&quot;</span>: <span class="string">&quot;2016-05-12&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;dname&quot;</span>: <span class="string">&quot;市场部&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="利用Javascript输出JSON">利用Javascript输出JSON</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(json);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;json.length;i++)&#123;</span><br><span class="line">            <span class="keyword">var</span> emp = json[i];</span><br><span class="line">            <span class="built_in">document</span>.write(<span class="string">&quot;&lt;h1&gt;&quot;</span>);</span><br><span class="line">            <span class="built_in">document</span>.write(emp.empno);</span><br><span class="line">            <span class="built_in">document</span>.write(<span class="string">&quot;,&quot;</span>+emp.ename);</span><br><span class="line">            <span class="built_in">document</span>.write(<span class="string">&quot;,&quot;</span>+emp.job);</span><br><span class="line">            <span class="built_in">document</span>.write(<span class="string">&quot;,&quot;</span>+emp.dname);</span><br><span class="line">            <span class="built_in">document</span>.write(<span class="string">&quot;&lt;/h1&gt;&quot;</span>);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><h3 id="JSON与字符串互相转换">JSON与字符串互相转换</h3><p>JSON.parse()方法将字符串转换为JSON对象</p><p>JSON.stringify()方法将JSON对象转换为字符串</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">        var str = &quot;&#123;\&quot;class_name\&quot;:\&quot;五年级三班\&quot;&#125;&quot;;</span><br><span class="line">        var json = JSON.parse(str);</span><br><span class="line">        console.log(str);</span><br><span class="line">        console.log(json);</span><br><span class="line">        document.write(&quot;班级:&quot;+json.class_name)</span><br><span class="line">    &lt;/script&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">        var json =</span><br><span class="line">            &#123;&quot;class_name&quot;:&quot;五年级四班&quot;&#125;</span><br><span class="line">        var str1 = JSON.stringify(json);</span><br><span class="line">        console.info(json)</span><br><span class="line">        console.info(str1)</span><br><span class="line">        var json2=&#123;&#125;;</span><br><span class="line">        json2.className = &quot;五年级五班&quot;;</span><br><span class="line">        json2.floor = &quot;逸夫楼四层&quot;;</span><br><span class="line">        console.log(json2);</span><br><span class="line">    &lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="JSON与Java之间的交互">JSON与Java之间的交互</h3><p>Java的JSON工具包还有FastJson，Jackson，Gson，Json-lib…</p><p>FastJson是阿里巴巴著名的JSON序列化与反序列化工具包</p><p>FastJson国内拥有大量使用者</p><h3 id="JSON序列化和反序列化">JSON序列化和反序列化</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FastJsonSample1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Employee employee = <span class="keyword">new</span> Employee();</span><br><span class="line">        employee.setEmpno(<span class="number">4488</span>);</span><br><span class="line">        employee.setEname(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">        employee.setJob(<span class="string">&quot;软件工程师&quot;</span>);</span><br><span class="line">        employee.setSalary(<span class="number">10000f</span>);</span><br><span class="line">        employee.setDname(<span class="string">&quot;技术部&quot;</span>);</span><br><span class="line">        Calendar c = Calendar.getInstance();</span><br><span class="line">        c.set(<span class="number">2017</span>,<span class="number">0</span>,<span class="number">30</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">        employee.setHdate(c.getTime());</span><br><span class="line">        <span class="comment">//FastJSON提供了JSON对象，完成对象与JSON字符串的相互转换</span></span><br><span class="line">        String json = JSON.toJSONString(employee);</span><br><span class="line">        System.out.println(json);</span><br><span class="line">        <span class="comment">//将JSON转换为对象</span></span><br><span class="line">        Employee emp = JSON.parseObject(json, Employee.class);</span><br><span class="line">        System.out.println(emp.getEname());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="FastJSON对象数组序列化与反序列化">FastJSON对象数组序列化与反序列化</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">String json = JSON.toJSONString(list);</span><br><span class="line">        System.out.println(json);</span><br><span class="line">        List&lt;Employee&gt; employees = JSON.parseArray(json, Employee.class);</span><br><span class="line">        <span class="keyword">for</span> (Employee e:employees)&#123;</span><br><span class="line">            System.out.print(e.getEname()+<span class="string">&quot; &quot;</span>+e.getEmpno());</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;JSON-介绍&quot;&gt;JSON 介绍&lt;/h3&gt;
&lt;p&gt;JavaScript Object Notation(JavaScript对象表示法)&lt;/p&gt;
&lt;p&gt;JSON是轻量级的文本数据交换格式&lt;/p&gt;
&lt;p&gt;JSON独立于语言，具有自我描述性，更易理解&lt;/p&gt;
&lt;h3 </summary>
      
    
    
    
    <category term="JavaEE" scheme="http://example.com/categories/JavaEE/"/>
    
    
  </entry>
  
  <entry>
    <title>二叉树的序列化和反序列化</title>
    <link href="http://example.com/2022/01/16/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%BA%8F%E5%88%97%E5%8C%96%E5%92%8C%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    <id>http://example.com/2022/01/16/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%BA%8F%E5%88%97%E5%8C%96%E5%92%8C%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</id>
    <published>2022-01-16T06:21:21.000Z</published>
    <updated>2022-01-16T06:49:23.041Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>序列化是将一个数据结构或者对象转换为连续的比特位的操作，进而可以将转换后的数据存储在一个文件或者内存中，同时也可以通过网络传输到另一个计算机环境，采取相反方式重构得到原数据。</p><p>请设计一个算法来实现二叉树的序列化与反序列化。这里不限定你的序列 / 反序列化算法执行逻辑，你只需要保证一个二叉树可以被序列化为一个字符串并且将这个字符串反序列化为原始的树结构。</p><p>提示: 输入输出格式与 LeetCode 目前使用的方式一致，详情请参阅 LeetCode 序列化二叉树的格式。你并非必须采取这种方式，你也可以采用其他的方法解决这个问题。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：root = [1,2,3,null,null,4,5]</span><br><span class="line">输出：[1,2,3,null,null,4,5]</span><br></pre></td></tr></table></figure><p>序列化一个二叉树的代码十分简单</p><p>我们只需要遍历整个二叉树，然后在前序遍历的地方写上逻辑就好了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">serialize</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        traverse(root);</span><br><span class="line">        <span class="keyword">return</span> ans.toString();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">traverse</span><span class="params">(TreeNode root)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="keyword">null</span>)&#123;</span><br><span class="line">            ans.append(<span class="string">&quot;#&quot;</span>).append(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ans.append(root.val).append(sep);</span><br><span class="line">        traverse(root.left);</span><br><span class="line">        traverse(root.right);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>接下来就是反序列化的代码，我们首先需要去掉序列化的分隔符</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> TreeNode <span class="title">deserialize</span><span class="params">(String data)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//将字符串转换为列表</span></span><br><span class="line">    LinkedList&lt;String&gt; list = <span class="keyword">new</span> LinkedList&lt;String&gt;();</span><br><span class="line">    <span class="keyword">for</span>(String c:data)&#123;</span><br><span class="line">            list.append(c);</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">return</span> deserialize(list);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> TreeNode <span class="title">deserialize</span><span class="params">(LinkedList&lt;String&gt; list)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(list==<span class="keyword">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    String s = list.removeFirst();</span><br><span class="line">    <span class="keyword">if</span>(s.equals(NULL))<span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    <span class="comment">//将字符型变量转换为Int型</span></span><br><span class="line">    TreeNode root = <span class="keyword">new</span> TreeNode(Interger.parseInt(s));</span><br><span class="line">    root.left = deserialize(list);</span><br><span class="line">    root.right = deserialize(list);</span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Codec</span> </span>&#123;</span><br><span class="line">String sep = <span class="string">&quot;,&quot;</span>;</span><br><span class="line">String NULL = <span class="string">&quot;#&quot;</span>;</span><br><span class="line">StringBuilder ans = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">    <span class="comment">// Encodes a tree to a single string.</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">serialize</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        traverse(root);</span><br><span class="line">        <span class="keyword">return</span> ans.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Decodes your encoded data to tree.</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> TreeNode <span class="title">deserialize</span><span class="params">(String data)</span> </span>&#123;</span><br><span class="line">        LinkedList&lt;String&gt; treeNodes = <span class="keyword">new</span> LinkedList&lt;String&gt;();</span><br><span class="line">        <span class="keyword">for</span> (String s : data.split(sep)) &#123;</span><br><span class="line">            treeNodes.addLast(s);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> deserialize(treeNodes);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">traverse</span><span class="params">(TreeNode root)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="keyword">null</span>)&#123;</span><br><span class="line">            ans.append(NULL).append(sep);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ans.append(root.val).append(sep);</span><br><span class="line">        traverse(root.left);</span><br><span class="line">        traverse(root.right);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> TreeNode <span class="title">deserialize</span><span class="params">(LinkedList&lt;String&gt; treeNodes)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (treeNodes.isEmpty())&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        String s = treeNodes.removeFirst();</span><br><span class="line">        <span class="keyword">if</span> (s.equals(NULL))<span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        TreeNode root = <span class="keyword">new</span> TreeNode(Integer.parseInt(s));</span><br><span class="line">        root.left = deserialize(treeNodes);</span><br><span class="line">        root.right = deserialize(treeNodes);</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Your Codec object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment">// Codec ser = new Codec();</span></span><br><span class="line"><span class="comment">// Codec deser = new Codec();</span></span><br><span class="line"><span class="comment">// TreeNode ans = deser.deserialize(ser.serialize(root));</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;序列化是将一个数据结构或者对象转换为连续的比特位的操作，进而可以将转换后的数据存储在一个文件或者内存中，同时也可以通过网络传输到另一个计算机环境，采取相反方式重构得到原数据。&lt;/p&gt;
&lt;p&gt;请设计一个算法来实现二叉树的序列化与反序列化。这里不限定你</summary>
      
    
    
    
    <category term="Leetcode刷题" scheme="http://example.com/categories/Leetcode%E5%88%B7%E9%A2%98/"/>
    
    
  </entry>
  
  <entry>
    <title>JSTL与EL表达式</title>
    <link href="http://example.com/2022/01/15/JSTL%E4%B8%8EEL%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <id>http://example.com/2022/01/15/JSTL%E4%B8%8EEL%E8%A1%A8%E8%BE%BE%E5%BC%8F/</id>
    <published>2022-01-15T08:34:23.000Z</published>
    <updated>2022-01-16T08:22:35.148Z</updated>
    
    <content type="html"><![CDATA[<h3 id="什么是EL表达式">什么是EL表达式</h3><p>EL(Expression Language)表达式语言，用于简化JSP的输出</p><p>EL表达式的基本语法:${表达式}</p><p>示例:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;h1&gt;学生姓名:$&#123;student.name&#125;&lt;/h1&gt;</span><br></pre></td></tr></table></figure><p>传统的JSP</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span>  <span class="keyword">import</span>=<span class="string">&quot;com.thylovezj.el.student&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;%</span><br><span class="line">    student student = (student) request.getAttribute(<span class="string">&quot;student&quot;</span>);</span><br><span class="line">    String grade = (String)request.getAttribute(<span class="string">&quot;grade&quot;</span>);</span><br><span class="line">    out.println(<span class="string">&quot;&lt;h1&gt;名字:&quot;</span>+student.getName()+<span class="string">&quot;&lt;/h1&gt;&quot;</span>);</span><br><span class="line">    out.println(<span class="string">&quot;&lt;h2&gt;手机号:&quot;</span>+student.getMobile()+<span class="string">&quot;&lt;/h2&gt;&quot;</span>);</span><br><span class="line">    out.println(<span class="string">&quot;&lt;h2&gt;教师评级:&quot;</span>+grade+<span class="string">&quot;&lt;/h2&gt;&quot;</span>);</span><br><span class="line">%&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>使用el表达式后</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h1&gt;姓名:$&#123;requestScope.student.name&#125;&lt;/h1&gt;</span><br><span class="line">&lt;h2&gt;手机:$&#123;requestScope.student.mobile&#125;&lt;/h2&gt;</span><br><span class="line">&lt;h2&gt;评级:$&#123;requestScope.student.grade&#125;&lt;/h2&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h3 id="作用域对象">作用域对象</h3><p>EL表达式内置了四种作用域对象</p><table><thead><tr><th>作用域对象</th><th>描述</th></tr></thead><tbody><tr><td>pageScope</td><td>从当前页面取值</td></tr><tr><td>requestScope</td><td>从当前请求中取值</td></tr><tr><td>sessionScope</td><td>从当前会话中取值</td></tr><tr><td>applicationScope</td><td>从当前应用获取全局属性值</td></tr></tbody></table><p>当未书写作用域对象时，el则会从小到大依次尝试寻找</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.thylovezj.el;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpSession;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet(&quot;/info&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">studentServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        student stu = <span class="keyword">new</span> student();</span><br><span class="line">        stu.setName(<span class="string">&quot;子墨&quot;</span>);</span><br><span class="line">        stu.setMobile(<span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">        String grade = <span class="string">&quot;A&quot;</span>;</span><br><span class="line"></span><br><span class="line">        HttpSession session = request.getSession();</span><br><span class="line"></span><br><span class="line">        session.setAttribute(<span class="string">&quot;student&quot;</span>,stu);</span><br><span class="line">        session.setAttribute(<span class="string">&quot;grade&quot;</span>,grade);</span><br><span class="line">        request.setAttribute(<span class="string">&quot;grade&quot;</span>,<span class="string">&quot;B&quot;</span>);</span><br><span class="line"><span class="comment">//        request.setAttribute(&quot;student&quot;,stu);</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//        request.setAttribute(&quot;grade&quot;,grade);</span></span><br><span class="line"></span><br><span class="line">        request.getRequestDispatcher(<span class="string">&quot;/el_info.jsp&quot;</span>).forward(request,response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h1&gt;姓名:$&#123;sessionScope.student.name&#125;&lt;/h1&gt;</span><br><span class="line">&lt;h2&gt;手机:$&#123;sessionScope.student.mobile&#125;&lt;/h2&gt;</span><br><span class="line">&lt;h2&gt;评级:$&#123;grade&#125;&lt;/h2&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h3 id="EL表达式的输出">EL表达式的输出</h3><p>语法:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$&#123;[作用域.]属性名[.子属性]&#125;</span><br></pre></td></tr></table></figure><p>EL表达式支持将运算结果进行输出</p><p>EL支持绝大数对象输出，本质是执行toString()方法</p><h3 id="EL输出参数值">EL输出参数值</h3><p>EL表达式内置param对象来简化参数的输出</p><p>语法:${param.参数名}</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;h2&gt;指导老师:$&#123;param.teacher&#125;&lt;/h2&gt;</span><br></pre></td></tr></table></figure><h3 id="JSTL标签库">JSTL标签库</h3><p>JSTL(JSP Standard Tag Library),JSP标准标签库</p><p>JSTL用于简化JSP开发，提高代码的可读性和可维护性</p><p>JSTL由SUN(Oracle)定义规范，由Apache Tomcat团队实现</p><h3 id="安装JSTL标签库">安装JSTL标签库</h3><p>JSTL有两种安装方式</p><p>将Jar文件复制到工程的/WEB-INF/lib目录(推荐)</p><p>将Jar文件复制到Tomcat安装目录的lib目录</p><h3 id="JSTL的标签库种类">JSTL的标签库种类</h3><p>JSTL按功能划分可分为五类标签库</p><table><thead><tr><th>类别</th></tr></thead><tbody><tr><td><strong>核心标签库-core</strong></td></tr><tr><td><strong>格式化输出标签库-fmt</strong></td></tr><tr><td>SQL操作标签库-sql</td></tr><tr><td>XML操作标签库-xml</td></tr><tr><td>函数标签库-functions</td></tr></tbody></table><h3 id="引用JSTL核心库">引用JSTL核心库</h3><p>核心标签库(Core)是JSTL最重要的标签库，提供了JSTL的基础功能</p><p>&lt;%@ taglib prefix=“c” uri=“<a href="http://java.sun.com/jsp/jstl/core">http://java.sun.com/jsp/jstl/core</a>”%&gt;</p><p>JSTL核心标签库在taglibs-standard-impl.jar由META-INF/c.tld定义</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@taglib uri=&quot;http://java.sun.com/jsp/jstl/core&quot; prefix=&quot;c&quot;%&gt;</span><br></pre></td></tr></table></figure><h3 id="判断标签">判断标签</h3><p>JSTL核心库提供了两组判断的标签</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;c:if&gt;-单分支判断</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;c:choose&gt;,&lt;c:when&gt;,&lt;c:otherwise&gt;多分支判断</span><br></pre></td></tr></table></figure><h3 id="JSTL遍历集合">JSTL遍历集合</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;c:forEach&gt;标签用于遍历(collection)中的每一个对象</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--</span><br><span class="line">forEach用于遍历集合</span><br><span class="line">List companies = (List)request.getAttribute(&quot;companies&quot;);</span><br><span class="line">for(Company c:companies)&#123;</span><br><span class="line">    out.println(&quot;...&quot;)</span><br><span class="line">&#125;</span><br><span class="line">--&gt;</span><br><span class="line">&lt;c:forEach items=&quot;$&#123;requestScope.companies&#125;&quot; var=&quot;c&quot; varStatus=&quot;idx&quot;&gt;</span><br><span class="line">    &lt;h2 style=&quot;color: aqua&quot;&gt;$&#123;idx.index+1&#125;:$&#123;c.cname&#125;-$&#123;c.url&#125;&lt;/h2&gt;</span><br><span class="line">&lt;/c:forEach&gt;</span><br></pre></td></tr></table></figure><h3 id="fmt格式化标签库">fmt格式化标签库</h3><p>fmt格式化标签库URI</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://java.sun.com/jsp/jstl/fmt</span><br></pre></td></tr></table></figure><p>其中</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;fmt:formatDate value=&quot;&quot; pattern=&quot;&quot;&gt;格式化日期标签</span><br><span class="line">&lt;fmt:formatNumber value=&quot;&quot; pattern=&quot;&quot;&gt;格式化数字标签</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;fmt:formatDate value=&quot;$&#123;requestScope.now&#125;&quot; pattern=&quot;yyyy年MM月dd日HH时mm分ss秒&quot;/&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;h2&gt;&lt;fmt:formatNumber value=&quot;$&#123;amt&#125;&quot; pattern=&quot;0.00&quot;&gt;&lt;/fmt:formatNumber&gt;&lt;/h2&gt;</span><br></pre></td></tr></table></figure><p>数字格式化切割</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;h2&gt;￥&lt;fmt:formatNumber value=&quot;$&#123;amt&#125;&quot; pattern=&quot;0,000.00&quot;&gt;&lt;/fmt:formatNumber&gt;元&lt;/h2&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;什么是EL表达式&quot;&gt;什么是EL表达式&lt;/h3&gt;
&lt;p&gt;EL(Expression Language)表达式语言，用于简化JSP的输出&lt;/p&gt;
&lt;p&gt;EL表达式的基本语法:${表达式}&lt;/p&gt;
&lt;p&gt;示例:&lt;/p&gt;
&lt;figure class=&quot;highlight </summary>
      
    
    
    
    <category term="JavaEE" scheme="http://example.com/categories/JavaEE/"/>
    
    
  </entry>
  
  <entry>
    <title>二叉搜索子树的最大键值和</title>
    <link href="http://example.com/2022/01/15/%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E5%AD%90%E6%A0%91%E7%9A%84%E6%9C%80%E5%A4%A7%E9%94%AE%E5%80%BC%E5%92%8C/"/>
    <id>http://example.com/2022/01/15/%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E5%AD%90%E6%A0%91%E7%9A%84%E6%9C%80%E5%A4%A7%E9%94%AE%E5%80%BC%E5%92%8C/</id>
    <published>2022-01-15T06:02:19.000Z</published>
    <updated>2022-01-15T06:19:08.948Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>给你一棵以 root 为根的 二叉树 ，请你返回 任意 二叉搜索子树的最大键值和。</p><p>二叉搜索树的定义如下：</p><p>任意节点的左子树中的键值都 小于 此节点的键值。<br>任意节点的右子树中的键值都 大于 此节点的键值。<br>任意节点的左子树和右子树都是二叉搜索树。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：root = [1,4,3,2,4,2,5,null,null,null,null,null,null,4,6]</span><br><span class="line">输出：20</span><br><span class="line">解释：键值为 3 的子树是和最大的二叉搜索树。</span><br></pre></td></tr></table></figure><p>思路:</p><p>本题首先想到，我们应该判断一棵子树，看其是否为二叉搜索树。如果是二叉搜索树，则记录二叉搜索树的最大键值和。可以想到如果使用前序遍历，该题将不易求解</p><p>如果使用前序遍历</p><p>第一步我们需要判断其左右子树是否为二叉搜索树，如果不是，那么以root为节点的树肯定不为二叉搜索树。</p><p>第二步如果左右子树都为二叉搜索树，那么我们需要判断加上根节点是否仍为二叉搜索树</p><p>第三步要判断加上根节点是否为二叉搜索树，我们需要知道左子树的最大值和右子树的最小值</p><p>第四步判断左子树的最大值是否小于根节点，右子树的最小值是否大于根节点</p><p>最后计算二叉搜索树的最大键值和</p><p>而后续遍历，则可以直接计算以上函数。</p><p>下面是改为后序遍历的代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int val) &#123; this.val = val; &#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int val, TreeNode left, TreeNode right) &#123;</span></span><br><span class="line"><span class="comment"> *         this.val = val;</span></span><br><span class="line"><span class="comment"> *         this.left = left;</span></span><br><span class="line"><span class="comment"> *         this.right = right;</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxSumBST</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        traverse(root);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] traverse(TreeNode root)&#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="comment">//这里存储了4个参数。第一个是该二叉树是否为BST，第二个是二叉树的最小值，第三个是二叉树的最大值，第四个是BST的所有节点之和。</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>,Integer.MAX_VALUE,Integer.MIN_VALUE,<span class="number">0</span>&#125;;    </span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span>[] leftTree = traverse(root.left);</span><br><span class="line">        <span class="keyword">int</span>[] rightTree = traverse(root.right);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//声明一个res</span></span><br><span class="line">        <span class="keyword">int</span>[] res = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">4</span>];</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//判断根节点的二叉树是否为二叉搜索树</span></span><br><span class="line">        <span class="keyword">if</span>(leftTree[<span class="number">0</span>]==<span class="number">1</span>&amp;&amp;rightTree[<span class="number">0</span>]==<span class="number">1</span>&amp;&amp;rightTree[<span class="number">1</span>]&gt;root.val&amp;&amp;leftTree[<span class="number">2</span>]&lt;root.val)&#123;</span><br><span class="line">            res[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">            res[<span class="number">1</span>]=Math.min(root.val,leftTree[<span class="number">1</span>]);</span><br><span class="line">            res[<span class="number">2</span>]=Math.max(root.val,rightTree[<span class="number">2</span>]);</span><br><span class="line">            res[<span class="number">3</span>]+=root.val+leftTree[<span class="number">3</span>]+rightTree[<span class="number">3</span>];</span><br><span class="line">            ans = Math.max(res[<span class="number">3</span>],ans);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            res[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;给你一棵以 root 为根的 二叉树 ，请你返回 任意 二叉搜索子树的最大键值和。&lt;/p&gt;
&lt;p&gt;二叉搜索树的定义如下：&lt;/p&gt;
&lt;p&gt;任意节点的左子树中的键值都 小于 此节点的键值。&lt;br&gt;
任意节点的右子树中的键值都 大于 此节点的键值。&lt;br</summary>
      
    
    
    
    <category term="Leetcode刷题" scheme="http://example.com/categories/Leetcode%E5%88%B7%E9%A2%98/"/>
    
    
  </entry>
  
  <entry>
    <title>不同的二叉搜索树</title>
    <link href="http://example.com/2022/01/14/%E4%B8%8D%E5%90%8C%E7%9A%84%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91/"/>
    <id>http://example.com/2022/01/14/%E4%B8%8D%E5%90%8C%E7%9A%84%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91/</id>
    <published>2022-01-14T04:51:55.000Z</published>
    <updated>2022-01-14T07:39:44.845Z</updated>
    
    <content type="html"><![CDATA[<h3 id="不同的二叉搜索树II">不同的二叉搜索树II</h3><blockquote><p>给你一个整数 <code>n</code> ，请你生成并返回所有由 <code>n</code> 个节点组成且节点值从 <code>1</code> 到 <code>n</code> 互不相同的不同 <strong>二叉搜索树</strong> 。可以按 <strong>任意顺序</strong> 返回答案。</p></blockquote><p><img src="D:%5Cthy123%5Csource%5Cimg%5C8.jpg" alt=""></p><blockquote><p>输入：n = 3<br>输出：[[1,null,2,null,3],[1,null,3,2],[2,1,3],[3,1,null,null,2],[3,2,null,1]]</p></blockquote><p>解题思路:</p><p>我们可以让<strong>i</strong>作为根节点，那么i可以从1到n。当i作为根节点时，[1,i-1]既是二叉树的左子树，[i+1,n]是二叉树的右子树</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;TreeNode&gt; <span class="title">generateTrees</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(n==<span class="keyword">null</span>)<span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">return</span> build(<span class="number">1</span>,n);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//该函数用来构建一个范围在[l0,h0]的二叉搜索树</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;TreeNode&gt; <span class="title">build</span><span class="params">(<span class="keyword">int</span> l0,<span class="keyword">int</span> h0)</span></span>&#123;</span><br><span class="line">    <span class="comment">//声明一个List用来存储所有可能的结果</span></span><br><span class="line">    List&lt;TreeNode&gt; list = <span class="keyword">new</span> ArrayList&lt;TreeNode&gt;();</span><br><span class="line">    <span class="comment">//这里的base case需要注意，如果左边界大于右边界时，给list添加null返回，为什么不直接返回null？</span></span><br><span class="line">        <span class="keyword">if</span>(l0&gt;h0)&#123;</span><br><span class="line">            list.add(<span class="keyword">null</span>);</span><br><span class="line">            <span class="keyword">return</span> list;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(i=l0,i&lt;=h0;i++)&#123;</span><br><span class="line">            TreeNode leftTrees = build(l0,i-<span class="number">1</span>);</span><br><span class="line">            TreeNode rightTrees = build(i+<span class="number">1</span>,h0);</span><br><span class="line">            <span class="keyword">for</span>(TreeNode leftTree:leftTrees)&#123;</span><br><span class="line">                <span class="keyword">for</span>(TreeNode rightTree:rightTrees)&#123;</span><br><span class="line">                    TreeNode root = <span class="keyword">new</span> TreeNode(i);</span><br><span class="line">                    root.left = leftTree;</span><br><span class="line">                    root.right = rightTree;</span><br><span class="line">                    list.add(root);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> root; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;不同的二叉搜索树II&quot;&gt;不同的二叉搜索树II&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;给你一个整数 &lt;code&gt;n&lt;/code&gt; ，请你生成并返回所有由 &lt;code&gt;n&lt;/code&gt; 个节点组成且节点值从 &lt;code&gt;1&lt;/code&gt; 到 &lt;code&gt;n&lt;/co</summary>
      
    
    
    
    <category term="Leetcode刷题" scheme="http://example.com/categories/Leetcode%E5%88%B7%E9%A2%98/"/>
    
    
  </entry>
  
  <entry>
    <title>二叉树的插入</title>
    <link href="http://example.com/2022/01/13/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E6%8F%92%E5%85%A5/"/>
    <id>http://example.com/2022/01/13/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E6%8F%92%E5%85%A5/</id>
    <published>2022-01-13T02:29:44.000Z</published>
    <updated>2022-01-13T03:46:41.908Z</updated>
    
    <content type="html"><![CDATA[<h3 id="二叉树的插入">二叉树的插入</h3><blockquote><p>给定二叉搜索树（BST）的根节点和要插入树中的值，将值插入二叉搜索树。 返回插入后二叉搜索树的根节点。 输入数据 保证 ，新值和原始二叉搜索树中的任意节点值都不同。</p><p>注意，可能存在多种有效的插入方式，只要树在插入后仍保持为二叉搜索树即可。 你可以返回 任意有效的结果 。</p></blockquote><p><img src="D:%5Cthy123%5Csource%5Cimg%5C7.jpg" alt=""></p><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：root = [4,2,7,1,3], val = 5</span><br><span class="line">输出：[4,2,7,1,3,5]</span><br></pre></td></tr></table></figure></blockquote><p>首先，我们应该知道，二叉树的构建肯定不止一种，而我们这种算法只能模拟一种二叉树的插入</p><p>我们可以利用一个pos指针指向root，base case为当pos指针为空时返回</p><p>当val值小于pos.val时，去寻找pos节点的左子树，当val值大于pos.val时，去寻找pos节点的右子树</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int val) &#123; this.val = val; &#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int val, TreeNode left, TreeNode right) &#123;</span></span><br><span class="line"><span class="comment"> *         this.val = val;</span></span><br><span class="line"><span class="comment"> *         this.left = left;</span></span><br><span class="line"><span class="comment"> *         this.right = right;</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> TreeNode <span class="title">insertIntoBST</span><span class="params">(TreeNode root, <span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">        TreeNode pos = root;</span><br><span class="line">        <span class="keyword">if</span>(pos==<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> TreeNode(val);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span>(root!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(val&lt;pos.val)&#123;</span><br><span class="line">                <span class="keyword">if</span>(pos.left==<span class="keyword">null</span>)&#123;</span><br><span class="line">                    pos.left = <span class="keyword">new</span> TreeNode(val);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;    </span><br><span class="line">                <span class="keyword">else</span>&#123;</span><br><span class="line">                    pos=pos.left;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(val&gt;pos.val)&#123;</span><br><span class="line">                <span class="keyword">if</span>(pos.right==<span class="keyword">null</span>)&#123;</span><br><span class="line">                    pos.right = <span class="keyword">new</span> TreeNode(val);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span>&#123;</span><br><span class="line">                pos=pos.right;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="删除二叉搜索树中的节点">删除二叉搜索树中的节点</h3><blockquote><p>给定一个二叉搜索树的根节点 root 和一个值 key，删除二叉搜索树中的 key 对应的节点，并保证二叉搜索树的性质不变。返回二叉搜索树（有可能被更新）的根节点的引用。</p><p>一般来说，删除节点可分为两个步骤：</p><p>首先找到需要删除的节点；<br>如果找到了，删除它。</p></blockquote><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：root = [5,3,6,2,4,null,7], key = 3</span><br><span class="line">输出：[5,4,6,2,null,null,7]</span><br></pre></td></tr></table></figure></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * Definition for a binary tree node.</span><br><span class="line"> * public class TreeNode &#123;</span><br><span class="line"> *     int val;</span><br><span class="line"> *     TreeNode left;</span><br><span class="line"> *     TreeNode right;</span><br><span class="line"> *     TreeNode() &#123;&#125;</span><br><span class="line"> *     TreeNode(int val) &#123; this.val = val; &#125;</span><br><span class="line"> *     TreeNode(int val, TreeNode left, TreeNode right) &#123;</span><br><span class="line"> *         this.val = val;</span><br><span class="line"> *         this.left = left;</span><br><span class="line"> *         this.right = right;</span><br><span class="line"> *     &#125;</span><br><span class="line"> * &#125;</span><br><span class="line"> */</span><br><span class="line">class Solution &#123;</span><br><span class="line">    public TreeNode deleteNode(TreeNode root, int key) &#123;</span><br><span class="line">        if(root == null)return null;</span><br><span class="line">        //如果root.val==key值，则说明找到了root节点 </span><br><span class="line">        if(root.val == key)&#123;</span><br><span class="line">            //如果根节点的左子树为空，那么直接将右子树返回即可</span><br><span class="line">            if(root.left==null)return root.right;</span><br><span class="line">            //如果根节点的右子树为空，那么直接将二叉树的左子树返回即可</span><br><span class="line">            if(root.right==null)return root.left;</span><br><span class="line">            //如果root的左右子树都不为空，则需要将左子树最大的元素返回，或者右子树最小的元素返回,我们这里去寻找右子树最小的元素进行返回</span><br><span class="line">            TreeNode minVal = getMinVal(root.right);</span><br><span class="line">            root.val = minVal.val;</span><br><span class="line">            root.right = deleteNode(root.right,minVal.val);              </span><br><span class="line">        &#125;</span><br><span class="line">        //在这里时，root的值并不等于key,那么我们需要去寻找节点值等于key的元素</span><br><span class="line">        else if(root.val&lt;key)&#123;</span><br><span class="line">            root.right = deleteNode(root.right,key);</span><br><span class="line">        &#125;</span><br><span class="line">        else if(root.val&gt;key)&#123;</span><br><span class="line">            root.left = deleteNode(root.left,key);</span><br><span class="line">        &#125;</span><br><span class="line">        return root;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //寻找二叉树中最小的值,二叉树中最小的值就是最左边的节点</span><br><span class="line">    public TreeNode getMinVal(TreeNode root)&#123;</span><br><span class="line">        while(root.left!=null)&#123;</span><br><span class="line">            root=root.left;</span><br><span class="line">        &#125;</span><br><span class="line">        return root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;二叉树的插入&quot;&gt;二叉树的插入&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;给定二叉搜索树（BST）的根节点和要插入树中的值，将值插入二叉搜索树。 返回插入后二叉搜索树的根节点。 输入数据 保证 ，新值和原始二叉搜索树中的任意节点值都不同。&lt;/p&gt;
&lt;p&gt;注意，可能存</summary>
      
    
    
    
    <category term="Leetcode刷题" scheme="http://example.com/categories/Leetcode%E5%88%B7%E9%A2%98/"/>
    
    
  </entry>
  
  <entry>
    <title>JSP与Servlet进阶</title>
    <link href="http://example.com/2022/01/11/JSP%E4%B8%8EServlet%E8%BF%9B%E9%98%B6/"/>
    <id>http://example.com/2022/01/11/JSP%E4%B8%8EServlet%E8%BF%9B%E9%98%B6/</id>
    <published>2022-01-11T09:30:12.000Z</published>
    <updated>2022-01-15T12:31:43.398Z</updated>
    
    <content type="html"><![CDATA[<h3 id="利用请求头开发多端应用">利用请求头开发多端应用</h3><p>下面的代码模拟了利用请求头的不同识别不同的主机</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.thylovezj.www;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet(&quot;/au&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserAgentServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        String userAgent = request.getHeader(<span class="string">&quot;User-Agent&quot;</span>);</span><br><span class="line">        <span class="comment">//设置中文显示</span></span><br><span class="line">        response.setContentType(<span class="string">&quot;text/html;charset=utf-8&quot;</span>);</span><br><span class="line">        String output = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">if</span>(userAgent.indexOf(<span class="string">&quot;Windows&quot;</span>) != -<span class="number">1</span>)&#123;</span><br><span class="line">            output = <span class="string">&quot;&lt;h1&gt;这是PC端首页&lt;/h1&gt;&quot;</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (userAgent.indexOf(<span class="string">&quot;iPhone&quot;</span>)!=-<span class="number">1</span>||userAgent.indexOf(<span class="string">&quot;Android&quot;</span>)!=-<span class="number">1</span>)&#123;</span><br><span class="line">            output = <span class="string">&quot;&lt;h1&gt;这是移动端首页&lt;/h1&gt;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        response.getWriter().println(output);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="响应的结构">响应的结构</h3><p>HTTP响应包含三个部分:响应行，响应头，响应体</p><table><thead><tr><th>状态码</th><th>错误描述</th></tr></thead><tbody><tr><td>200</td><td>服务器处理成功</td></tr><tr><td>404</td><td>无法找到文件</td></tr><tr><td>500</td><td>内部服务器错误</td></tr><tr><td>403</td><td>服务器拒绝访问</td></tr><tr><td>301，302</td><td>请求重定向</td></tr><tr><td>400</td><td>无效的请求</td></tr><tr><td>401</td><td>未经过授权</td></tr><tr><td>503</td><td>服务器超负载或正停机维护，无法处理请求</td></tr></tbody></table><h3 id="ContentType的作用">ContentType的作用</h3><table><thead><tr><th>MIME类型</th><th>描述</th></tr></thead><tbody><tr><td>text/plain</td><td>纯文本</td></tr><tr><td>text/html</td><td>HTML文档</td></tr><tr><td>text/xml</td><td>XML文档</td></tr><tr><td>application/x-msdownload</td><td>需要下载的资源</td></tr><tr><td>image/jpeg    image/gif   …</td><td>图片资源</td></tr></tbody></table><h3 id="请求的转发与响应重定向">请求的转发与响应重定向</h3><p>多个Servlet(JSP)之间跳转有两种方式:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">request.getRequestDispatcher().forward()-请求转发</span><br><span class="line"></span><br><span class="line">response.sendRediret()-响应重定向</span><br></pre></td></tr></table></figure><p>其中请求转发是服务器的跳转，只产生一次请求</p><p>浏览器-&gt;Tomcat(Tomcat在内部执行完Servlet1然后把请求发给Servlet2)-&gt;响应</p><p>而响应重定向则是浏览器跳转，会产生两次请求</p><p>浏览器-&gt;Servlet1-&gt;响应-&gt;请求2-&gt;Servlet2-&gt;响应2</p><h3 id="设置请求自定义属性">设置请求自定义属性</h3><p>请求允许创建自定义属性</p><p>设置请求属性：request.setAttribute(属性名,属性值)</p><p>获取请求属性：Object attr = request.getAttribute(属性名)</p><h3 id="浏览器Cookie">浏览器Cookie</h3><p>Cookie(小甜饼)是浏览器保存在本地的文本内容</p><p>Cookie常用于保存登录状态，用户资料等小文本</p><p>Cookie具有时效性，Cookie内容会伴随着请求发给Tomcat</p><p>在下面我们定义了两个servlet用来模拟用户的登录</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.thylovezj.cookie;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.Cookie;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet(&quot;/cookies/login&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">thyLoginServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;用户登录成功&quot;</span>);</span><br><span class="line">        Cookie cookie = <span class="keyword">new</span> Cookie(<span class="string">&quot;user&quot;</span>,<span class="string">&quot;admin&quot;</span>);</span><br><span class="line">        response.addCookie(cookie);</span><br><span class="line">        response.getWriter().print(<span class="string">&quot;login success&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.thylovezj.cookie;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.Cookie;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet(&quot;/cookies/index&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">thyIndexServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"><span class="comment">//        response.setContentType(&quot;text/html;charset=utf-8&quot;);</span></span><br><span class="line">        Cookie[] cookies = request.getCookies();</span><br><span class="line">        String user = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (cookies == <span class="keyword">null</span>)&#123;</span><br><span class="line">            response.getWriter().print(<span class="string">&quot;user not login&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(Cookie cookie:cookies)&#123;</span><br><span class="line">            System.out.println(cookie.getName()+<span class="string">&quot;  &quot;</span>+cookie.getValue());</span><br><span class="line">            <span class="keyword">if</span> (cookie.getName().equals(<span class="string">&quot;user&quot;</span>))&#123;</span><br><span class="line">                user = cookie.getValue();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (user == <span class="keyword">null</span>)&#123;</span><br><span class="line">            response.getWriter().print(<span class="string">&quot;user not login&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            response.getWriter().print(<span class="string">&quot;user:  &quot;</span> +user);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>值得注意的是，如果我们不设置cookie的存在时间，我们默认有效期是当前的浏览器窗口</p><p>因此，我们需要给cookie设置有效时间。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//设置Cookie有效时间</span></span><br><span class="line">cookie.setMaxAge(<span class="number">60</span>*<span class="number">60</span>*<span class="number">24</span>*<span class="number">7</span>);</span><br></pre></td></tr></table></figure><h3 id="Session-用户会话">Session-用户会话</h3><p>Session(用户会话)用于保存与&quot;浏览器窗口&quot;对应的数据</p><p>Session的数据存储在Tomcat服务器的内存中，具有时效性</p><p>Session通过浏览器Cookie的SessionId值提取用户数据</p><h3 id="ServletContext对象">ServletContext对象</h3><p>ServletContext(Servlet上下文对象)，是Web应用全局对象</p><p>一个Web应用只会创建一个ServletContext对象</p><p>ServletContext随着Web应用启动而自动创建</p><h3 id="Java-Web三大作用域对象">Java Web三大作用域对象</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">HttpServletRequest-请求对象</span><br><span class="line">生命周期最短</span><br><span class="line">HttpSession-用户会话对象</span><br><span class="line">30分钟没有访问就会销毁</span><br><span class="line">ServletContext-web应用全局对象</span><br><span class="line">web应用程序关闭或者重启销毁</span><br></pre></td></tr></table></figure><p>用小不用大</p><h3 id="Web应用程序的中文乱码由来">Web应用程序的中文乱码由来</h3><p>Tomcat默认使用字符集ISO-8859-1，属于西欧字符集</p><p>解决乱码核心就是将ISO-8859-1转换为UTF-8</p><p>Servlet的请求与响应都需要设置UTF-8字符集</p><p>请求处理方式:</p><p>处理<strong>POST</strong>请求中中文乱码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">request.setCharacterEncoding(&quot;UTF-8&quot;);</span><br></pre></td></tr></table></figure><p>处理<strong>GET</strong>请求中中文乱码</p><p><strong>对于Tomcat8.X以上版本无需处理</strong></p><h3 id="web-xml常用配置">web.xml常用配置</h3><p>修改web应用默认首页</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://java.sun.com/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">           <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">           <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://java.sun.com/xml/ns/javaee</span></span></span><br><span class="line"><span class="string"><span class="tag">  http://java.sun.com/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">           <span class="attr">version</span>=<span class="string">&quot;4.0&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--设置web应用首页--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>index.html<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Servlet通配符映射及初始化参数</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>pattern<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.thylovezj.servlet.pattern.Pattern<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>pattern<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--*可以匹配到任何数--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/pattern/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><p>设置404，500等状态码默认页面</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">error-page</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">error-code</span>&gt;</span>404<span class="tag">&lt;/<span class="name">error-code</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">location</span>&gt;</span>/error/404.html<span class="tag">&lt;/<span class="name">location</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">error-page</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="JSP的九大内置对象">JSP的九大内置对象</h3><table><thead><tr><th>内置对象</th><th>描述</th></tr></thead><tbody><tr><td>request</td><td>请求对象-HttpServletRequest</td></tr><tr><td>response</td><td>响应对象-HttpServletResponse</td></tr><tr><td>session</td><td>用户会话-HttpSession</td></tr><tr><td>application</td><td>应用全局对象-ServletContext</td></tr><tr><td>out</td><td>输出对象-PrintWriter</td></tr><tr><td>page</td><td>当前页面对象-this</td></tr><tr><td>pageContext</td><td>页面上下文对象-PageContext</td></tr><tr><td>config</td><td>应用配置对象-ServletConfig</td></tr><tr><td>exception</td><td>应用异常对象-Throwable</td></tr></tbody></table><h3 id="Java-Web打包与发布">Java Web打包与发布</h3><p>Java Web应用采用war包进行发布</p><p>发布路径为:{TOMCAT_HOME}/webapps</p><p>Eclipse支持war包导出</p><h3 id="startup-bat一闪而过问题">startup.bat一闪而过问题</h3><p><a href="https://blog.csdn.net/qq_30507287/article/details/53981851">startup一闪而过</a></p><p>idea打war包发布</p><p><a href="https://blog.csdn.net/qq_34872748/article/details/100390922">idea打war包</a></p><h3 id="tomcat更改文件根路径">tomcat更改文件根路径</h3><p><a href="https://blog.csdn.net/dujianxiong/article/details/82350094">tomcat更改发布路径</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;利用请求头开发多端应用&quot;&gt;利用请求头开发多端应用&lt;/h3&gt;
&lt;p&gt;下面的代码模拟了利用请求头的不同识别不同的主机&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span</summary>
      
    
    
    
    <category term="JavaEE" scheme="http://example.com/categories/JavaEE/"/>
    
    
  </entry>
  
  <entry>
    <title>JSP入门</title>
    <link href="http://example.com/2022/01/11/JSP%E5%85%A5%E9%97%A8/"/>
    <id>http://example.com/2022/01/11/JSP%E5%85%A5%E9%97%A8/</id>
    <published>2022-01-11T07:41:58.000Z</published>
    <updated>2022-01-11T09:28:35.455Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Servlet开发的痛点">Servlet开发的痛点</h3><p>静态的HTML与动态Java代码混合在一起，难以维护</p><p>Servlet利用out.println()语句输出，开发效率低下</p><p>Eclipse很难在开发过程中发现错误，调试困难</p><h3 id="JSP介绍">JSP介绍</h3><p>JSP全称是(Java Server Pages),Java服务器页面</p><p>JSP是J2EE的功能模块，由Web服务器执行</p><p>JSP的作用就是降低动态网页开发难度</p><h3 id="JSP的特点">JSP的特点</h3><p>JSP使用简单，短时间学习便可上手使用</p><p>JSP可将Java代码与HTML分离，降低开发难度</p><p>JSP的本质就是Servlet</p><h3 id="JSP的运行要求">JSP的运行要求</h3><p>可正常的Tomcat</p><p>所有JSP页面扩展名必须是.jsp</p><p>JSP页面应该放在Web应用程序目录下</p><h3 id="第一段JSP代码">第一段JSP代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">&lt;%--</span><br><span class="line">  Created by IntelliJ IDEA.</span><br><span class="line">  User: THY</span><br><span class="line">  Date: <span class="number">2022</span>/<span class="number">1</span>/<span class="number">11</span></span><br><span class="line">  Time: <span class="number">16</span>:<span class="number">00</span></span><br><span class="line">  To change <span class="keyword">this</span> template use File | Settings | File Templates.</span><br><span class="line">--%&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">&quot;en&quot;</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;table&gt;</span><br><span class="line">    &lt;tr&gt;</span><br><span class="line">        &lt;th&gt;year&lt;/th&gt;</span><br><span class="line">        &lt;th&gt;salary&lt;/th&gt;</span><br><span class="line">    &lt;/tr&gt;</span><br><span class="line">    &lt;%</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=<span class="number">50</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> salary = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">if</span> (i&lt;=<span class="number">5</span>)&#123;</span><br><span class="line">                salary = <span class="number">1500</span>+i*<span class="number">150</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(i&gt;<span class="number">5</span> &amp;&amp; i&lt;=<span class="number">10</span>)&#123;</span><br><span class="line">                salary = <span class="number">1500</span>+<span class="number">150</span>*<span class="number">5</span>+<span class="number">300</span>*(i-<span class="number">5</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(i&gt;<span class="number">10</span>)&#123;</span><br><span class="line">                salary = <span class="number">1500</span>+<span class="number">150</span>*<span class="number">5</span>+<span class="number">300</span>*<span class="number">5</span>+<span class="number">375</span>*(i-<span class="number">10</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            out.println(<span class="string">&quot;&lt;tr&gt;&quot;</span>);</span><br><span class="line">            out.println(<span class="string">&quot;&lt;td&gt;&quot;</span>+ i +<span class="string">&quot;&lt;/td&gt;&quot;</span>);</span><br><span class="line">            out.println(<span class="string">&quot;&lt;td&gt;&quot;</span>+ salary +<span class="string">&quot;&lt;/td&gt;&quot;</span>);</span><br><span class="line">            out.println(<span class="string">&quot;&lt;tr&gt;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    %&gt;</span><br><span class="line">&lt;/table&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="JSP执行过程">JSP执行过程</h3><p>浏览器给Tomcat发请求-&gt;Tomcat将JSP转译为Servlet源代码-&gt;Java对其进行编译生成Servlet字节码</p><h3 id="JSP基本语法">JSP基本语法</h3><p>JSP语法十分简单，按功能可分为以下几种</p><p>1.JSP代码块</p><p>2.JSP声明构造块</p><p>3.JSP输出指令</p><p>4.JSP处理指令</p><p>JSP代码块用于在JSP中嵌入Java代码</p><p>JSP代码语法块:&lt;% java代码 %&gt;</p><p>JSP声明构造块用于声明变量或者方法</p><p>JSP声明构造块语法:&lt;%!声明语句%&gt;</p><p>例如:&lt;%!public int add(int a,int b){return a+b;}%&gt;</p><p>JSP输出指令</p><p>JSP输出指令用于在JSP页面中显示java代码执行结果</p><p>JSP输出指令语法:&lt;%=java代码%&gt;</p><p>例如:&lt;%=“&lt; b &gt;”+name+“&lt; /b &gt;”%&gt;</p><p>JSP处理指令</p><p>JSP处理指令用于提供JSP执行过程中的辅助信息</p><p>JSP处理指令语法:&lt; %@jsp指令% &gt;</p><p>例如:&lt;%@ page import=“java.util.*” %&gt;</p><h3 id="JSP常用处理指令">JSP常用处理指令</h3><p>&lt;%@ page %&gt;定义当前JSP页面全局设置</p><p>&lt;%@ include %&gt;将其他JSP页面与当前JSP页面合并</p><p>&lt;%@ taglib %&gt;引入JSP标签库</p><h3 id="JSP中注释的区别">JSP中注释的区别</h3><p>&lt;%-- 注释 --%&gt;JSP注释，被注释语句不做任何处理</p><p>// , /* … */用于注释&lt;%%&gt;java代码，被注释代码不执行</p><!-- html -->HTML注释，被注释的语句不会被浏览器解释<h3 id="JSP页面重用">JSP页面重用</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@include file=&quot;include/header.jsp&quot;%&gt;&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;Servlet开发的痛点&quot;&gt;Servlet开发的痛点&lt;/h3&gt;
&lt;p&gt;静态的HTML与动态Java代码混合在一起，难以维护&lt;/p&gt;
&lt;p&gt;Servlet利用out.println()语句输出，开发效率低下&lt;/p&gt;
&lt;p&gt;Eclipse很难在开发过程中发现错误，调试</summary>
      
    
    
    
    <category term="JavaEE" scheme="http://example.com/categories/JavaEE/"/>
    
    
  </entry>
  
  <entry>
    <title>验证二叉搜索树</title>
    <link href="http://example.com/2022/01/11/%E9%AA%8C%E8%AF%81%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91/"/>
    <id>http://example.com/2022/01/11/%E9%AA%8C%E8%AF%81%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91/</id>
    <published>2022-01-11T04:56:33.000Z</published>
    <updated>2022-01-11T06:47:55.616Z</updated>
    
    <content type="html"><![CDATA[<h3 id="验证二叉搜索树">验证二叉搜索树</h3><blockquote><p>给你一个二叉树的根节点 root ，判断其是否是一个有效的二叉搜索树。</p><p>有效 二叉搜索树定义如下：</p><p>节点的左子树只包含 小于 当前节点的数。<br>节点的右子树只包含 大于 当前节点的数。<br>所有左子树和右子树自身必须也是二叉搜索树。</p></blockquote><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：root = [2,1,3]</span><br><span class="line">输出：true</span><br></pre></td></tr></table></figure></blockquote><p>思路:</p><p>​验证一个二叉树是BST，即要求二叉树的左子树比二叉树的根节点值小，二叉树的右子树比根节点值大。那么我们可以写出如下代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isValidBST</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line"><span class="comment">//注意，当只有一个节点时，肯定为二叉搜索树，所以直接返回true</span></span><br><span class="line">        <span class="keyword">if</span>(root==<span class="keyword">null</span>)<span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">if</span>(root.left!=<span class="keyword">null</span>&amp;&amp;root.val&lt;=root.left.val)<span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">if</span>(root.right!=<span class="keyword">null</span>&amp;&amp;root.val&gt;=root.right.val)<span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        isValidBST(root.left);</span><br><span class="line">        isValidBST(root.right);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是，这样的代码是存在漏洞的，比如当此时，该二叉树少了根节点的约束。</p><p><img src="D:%5Cthy123%5Csource%5Cimg%5C5.png" alt=""></p><p>因此，我们需要添加根节点的约束，代码如下。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isValidBST</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> isValidBST(root,<span class="keyword">null</span>,<span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isValidBST</span><span class="params">(TreeNode root,TreeNode min,TreeNode max)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root==<span class="keyword">null</span>)<span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">if</span>(min!=<span class="keyword">null</span>&amp;&amp;root.val&lt;=min.val)<span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">if</span>(max!=<span class="keyword">null</span>&amp;&amp;root.val&gt;=max.val)<span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">return</span> isValidBST(root.left,min,root)&amp;&amp;isValidBST(root.right,root,max);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="在BST中搜索一个数">在BST中搜索一个数</h3><blockquote><p>给定二叉搜索树（BST）的根节点和一个值。 你需要在BST中找到节点值等于给定值的节点。 返回以该节点为根的子树。 如果节点不存在，则返回 NULL。</p></blockquote><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">给定二叉搜索树:</span><br><span class="line"></span><br><span class="line">        4</span><br><span class="line">       / \</span><br><span class="line">      2   7</span><br><span class="line">     / \</span><br><span class="line">    1   3</span><br><span class="line"></span><br><span class="line">和值: 2</span><br></pre></td></tr></table></figure></blockquote><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">  2     </span><br><span class="line"> / \   </span><br><span class="line">1   3</span><br></pre></td></tr></table></figure></blockquote><p>本题虽然不难，但是需要注意一些细节</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> TreeNode <span class="title">searchBST</span><span class="params">(TreeNode root, <span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line"><span class="comment">//base case</span></span><br><span class="line">        <span class="keyword">if</span>(root==<span class="keyword">null</span>)<span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span>(root.val==val)<span class="keyword">return</span> root;</span><br><span class="line">        <span class="comment">//由于是BST我们可以加上一些判断条件，使其寻找正确的子树</span></span><br><span class="line">        <span class="comment">//当val小于根节点的值时，我们应该遍历左子树去寻找val，当val大于根节点的值时，我们应该遍历右子树去寻找val</span></span><br><span class="line">        <span class="keyword">if</span>(val&lt;root.val)<span class="keyword">return</span> searchBST(root.left,val);</span><br><span class="line">        <span class="comment">//这里需要注意，不能写为两个if，否则编译器会报错。</span></span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> searchBST(root.right,val);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>还有本题需要注意，我们如何返回一个子树，即给递归加上return。</p><h3 id=""></h3>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;验证二叉搜索树&quot;&gt;验证二叉搜索树&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;给你一个二叉树的根节点 root ，判断其是否是一个有效的二叉搜索树。&lt;/p&gt;
&lt;p&gt;有效 二叉搜索树定义如下：&lt;/p&gt;
&lt;p&gt;节点的左子树只包含 小于 当前节点的数。&lt;br&gt;
节点的右子</summary>
      
    
    
    
    <category term="Leetcode刷题" scheme="http://example.com/categories/Leetcode%E5%88%B7%E9%A2%98/"/>
    
    
  </entry>
  
  <entry>
    <title>二叉搜索树中第K小的元素</title>
    <link href="http://example.com/2022/01/10/%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E4%B8%AD%E7%AC%ACK%E5%B0%8F%E7%9A%84%E5%85%83%E7%B4%A0/"/>
    <id>http://example.com/2022/01/10/%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E4%B8%AD%E7%AC%ACK%E5%B0%8F%E7%9A%84%E5%85%83%E7%B4%A0/</id>
    <published>2022-01-10T03:43:14.000Z</published>
    <updated>2022-01-10T03:54:03.722Z</updated>
    
    <content type="html"><![CDATA[<h3 id="二叉搜索树中第K小的元素">二叉搜索树中第K小的元素</h3><blockquote><p>给定一个二叉搜索树的根节点 <code>root</code> ，和一个整数 <code>k</code> ，请你设计一个算法查找其中第 <code>k</code> 个最小元素（从 1 开始计数）。</p></blockquote><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：root = [3,1,4,null,2], k = 1</span><br><span class="line">输出：1</span><br></pre></td></tr></table></figure></blockquote><p><strong>二叉搜索树的中序遍历是有顺序的二叉树</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int val) &#123; this.val = val; &#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int val, TreeNode left, TreeNode right) &#123;</span></span><br><span class="line"><span class="comment"> *         this.val = val;</span></span><br><span class="line"><span class="comment"> *         this.left = left;</span></span><br><span class="line"><span class="comment"> *         this.right = right;</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line"> <span class="keyword">int</span> key=<span class="number">0</span>;</span><br><span class="line"> <span class="keyword">int</span> ans=<span class="number">0</span>;   </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">kthSmallest</span><span class="params">(TreeNode root, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        traverse(root,k);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">traverse</span><span class="params">(TreeNode root,<span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">        <span class="comment">//base case</span></span><br><span class="line">        <span class="keyword">if</span>(root==<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        traverse(root.left,k);</span><br><span class="line">        key++;</span><br><span class="line">        <span class="keyword">if</span>(key == k)&#123;</span><br><span class="line">            ans = root.val;</span><br><span class="line">        &#125;</span><br><span class="line">        traverse(root.right,k);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;二叉搜索树中第K小的元素&quot;&gt;二叉搜索树中第K小的元素&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;给定一个二叉搜索树的根节点 &lt;code&gt;root&lt;/code&gt; ，和一个整数 &lt;code&gt;k&lt;/code&gt; ，请你设计一个算法查找其中第 &lt;code&gt;k&lt;/code&gt; </summary>
      
    
    
    
    <category term="Leetcode刷题" scheme="http://example.com/categories/Leetcode%E5%88%B7%E9%A2%98/"/>
    
    
  </entry>
  
  <entry>
    <title>Servlet入门</title>
    <link href="http://example.com/2022/01/09/Servlet%E5%85%A5%E9%97%A8/"/>
    <id>http://example.com/2022/01/09/Servlet%E5%85%A5%E9%97%A8/</id>
    <published>2022-01-09T13:41:51.000Z</published>
    <updated>2022-01-11T10:17:19.233Z</updated>
    
    <content type="html"><![CDATA[<h3 id="什么是CS架构-Client-server">什么是CS架构(Client-server)</h3><p>Client/Sever结构(C/S结构)是指客户端和服务器结构</p><p>优点:数据方便共享，安全性高</p><p>缺点:必须安装客户端，升级与维护困难</p><h3 id="互联网时代-Browser-Server模式">互联网时代(Browser-Server模式)</h3><p>Browser-Server(B/S)模式即浏览器和服务器架构模式</p><p>优点:开发简单，无需安装客户端，数据易于共享</p><p>缺点:相较于C/S模式，执行速度与用户体验相对较弱。</p><h3 id="B-S模式执行流程">B/S模式执行流程</h3><p>用户输入baidu.com-&gt;浏览器根据输入的域名解析成IP地址(DNS协议)-&gt;WEB服务器&lt;-&gt;服务器程序</p><h3 id="请求与响应">请求与响应</h3><p>从浏览器发送给服务器的数据包称为请求Request</p><p>从服务器返回给浏览器的结果称为响应response</p><h3 id="J2EE是什么">J2EE是什么</h3><p>J2EE是指Java2企业版</p><p>开发BS(Web)应用程序就是J2EE最核心的功能</p><p>J2EE由13个功能模块组成</p><table><thead><tr><th>模块</th><th>功能</th></tr></thead><tbody><tr><td>Servlet</td><td>Web服务器小程序</td></tr><tr><td>JSP</td><td>服务器页面</td></tr><tr><td>JDBC</td><td>数据库交互模块</td></tr><tr><td>XML</td><td>XML交互模块</td></tr><tr><td>EJB</td><td>企业级Java Bean</td></tr><tr><td>RMI</td><td>远程调用</td></tr><tr><td>JNDI</td><td>目录服务</td></tr><tr><td>JMS</td><td>消息服务</td></tr><tr><td>JTA</td><td>事务管理</td></tr><tr><td>JavaMail</td><td>发送/接收Email</td></tr><tr><td>JAF</td><td>安全框架</td></tr><tr><td>CORBA</td><td>CORBA集成</td></tr><tr><td>JTS</td><td>CORBA事务监控</td></tr></tbody></table><h3 id="Apache-Tomcat">Apache Tomcat</h3><p>Tomcat是Apache软件基金会下一款免费的开放源代码的Web应用服务器程序</p><h3 id="J2EE和Tomcat的关系">J2EE和Tomcat的关系</h3><p>J2EE是一组技术规范与指南，具体实现由软件厂商决定</p><p>Tomcat是J2EE Web(servlet与JSP)标准的实现者</p><p>J2SE是J2EE运行的基石，运行Tomcat离不开J2SE</p><h3 id="Servlet">Servlet</h3><p>Servlet(Servlet Applet)服务器小程序，主要用于生成Web内容</p><p>Servlet是J2EE最重要的组成部分，也是我们学习的重点</p><h3 id="Tomcat的安装与运行">Tomcat的安装与运行</h3><p>Tomcat下载去Tomcat官网下载，版本要根据JDK版本确定，如果JDK为8，那么就需要采用Tomcat8的版本</p><p>安装下来以后，需要配置JDK的环境变量JAVA_HOME</p><p>然后在命令行进入Tomcat的bin目录下输入startup.bat，然后访问localhost:8080，如果能出现Tomcat的官网，则说明配置完成</p><h3 id="Tomcat日志乱码">Tomcat日志乱码</h3><p>参考博客</p><p><a href="https://blog.csdn.net/peanut_trees/article/details/106716045">解决乱码</a></p><h3 id="发现8080端口被占怎么办">发现8080端口被占怎么办</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//查询8080端口进程pid</span><br><span class="line">netstat -ano|findstr 8080</span><br></pre></td></tr></table></figure><h3 id="第一个Servlet程序">第一个Servlet程序</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.thylovexj;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"></span><br><span class="line"><span class="comment">//HttpServlet是所有小程序的父类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FirstServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="comment">//该方法里由两个参数，第一个参数是Http请求，第二个是Http响应</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">//接收请求发来的参数</span></span><br><span class="line">        String name = req.getParameter(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">        String html = <span class="string">&quot;&lt;h1&gt;&quot;</span>+name+<span class="string">&quot;&lt;/h1&gt;&quot;</span>;</span><br><span class="line">        PrintWriter out = resp.getWriter();</span><br><span class="line">        out.println(html);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>XML需要进行配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>first<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.thylovexj.FirstServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--这里视频上有误，新版的不用加文件名，直接使用url-pattern就OK了，同时记得每次修改完了要重新上传--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>first<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/hi<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><p>配置完后，启动Tomcat服务器即可在<a href="">localhost:8080/hi</a>访问第一个servlet程序</p><h3 id="标准的Java-Web工程结构">标准的Java Web工程结构</h3><table><thead><tr><th>组织结构</th><th>描述</th></tr></thead><tbody><tr><td>tomcat安装目录/webapps</td><td>Tomcat应用根目录</td></tr><tr><td>/web应用目录/</td><td>Java Web应用目录</td></tr><tr><td>/web应用目录/index.html|.jsp</td><td>默认首页</td></tr><tr><td>/WEB-INF</td><td>WEB应用的安全目录，用来存放配置文件</td></tr><tr><td>/WEB-INF/web.xml</td><td>web.xml是&quot;部署描述符文件&quot;，是该Web项目的核心文件</td></tr><tr><td>/WEB-INF/classes</td><td>存放编译后的classes文件</td></tr><tr><td>/WEB-INF/lib</td><td>用于存放WEB应用依赖的jar文件</td></tr><tr><td>/META-INF/MANIFEST.MF</td><td>包含Web应用的版本信息</td></tr></tbody></table><h3 id="Servlet开发步骤">Servlet开发步骤</h3><blockquote><p>创建Servlet类，集成HttpServlet</p><p>重写service方法，编写程序代码</p><p>配置web.xml，绑定URL</p></blockquote><h3 id="请求参数">请求参数</h3><blockquote><p>请求参数是指浏览器通过请求向Tomcat提交的数据</p><p>请求参数通常是用户输入的数据，待Servlet进行处理</p><p>参数名1=值1&amp;参数名2=值2&amp;参数名3=值3</p></blockquote><h3 id="Servlet接收请求参数">Servlet接收请求参数</h3><p>前端通过form标签里的属性里的action=“URL”将数据提交给后端</p><p>URL是servlet绑定的地址</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//接收单个参数</span></span><br><span class="line">request.getParameter();</span><br><span class="line"><span class="comment">//接收多个同名参数</span></span><br><span class="line">request.getParameterValues();</span><br></pre></td></tr></table></figure><p>下面的代码展示了html提交的数据，在浏览器上显示</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>学员信息登记表<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;http://localhost:8080/servletTest_war_exploded/sample&quot;</span>&gt;</span></span><br><span class="line">    姓名:<span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    电话<span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;mobile&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    特长</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;spec&quot;</span> <span class="attr">value</span>=<span class="string">&quot;English&quot;</span>&gt;</span>英语</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;spec&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Math&quot;</span>&gt;</span>数学</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;spec&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Chinese&quot;</span>&gt;</span>语文</span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.thylovexj;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SampleServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        PrintWriter writer = resp.getWriter();</span><br><span class="line">        String name = req.getParameter(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">        String mobile = req.getParameter(<span class="string">&quot;mobile&quot;</span>);</span><br><span class="line">        String[] specs = req.getParameterValues(<span class="string">&quot;spec&quot;</span>);</span><br><span class="line">        writer.println(<span class="string">&quot;&lt;h1&gt;name:&quot;</span>+name+<span class="string">&quot;&lt;/h1&gt;&quot;</span>);</span><br><span class="line">        writer.println(<span class="string">&quot;&lt;h1&gt;mobile:&quot;</span>+mobile+<span class="string">&quot;&lt;/h1&gt;&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (String spe:specs)&#123;</span><br><span class="line">            writer.println(spe);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Get与Post请求方法">Get与Post请求方法</h3><p>Get方式是将数据通过在URL附加数据显性向服务器发送数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost:8080/FirServlet/sample?name=zhangsan</span><br></pre></td></tr></table></figure><p>Post方式会将数据存放在“请求体”中隐性向服务器发送数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost:8080/FirstServlet/sample</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">请求体:name=zhangsan</span><br></pre></td></tr></table></figure><p>默认我们提交表单是使用<strong>Get</strong>方法提交，而如果我们要改变方法，可以利用html表单里<strong>method()方法</strong>的<strong>Post</strong>属性提交表单</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">doPost()方法只处理Post请求</span><br><span class="line">doGet()方法只处理Get请求</span><br></pre></td></tr></table></figure><h3 id="Get方法和Post方法应用场景">Get方法和Post方法应用场景</h3><blockquote><p>Get常用于不包含敏感信息的查询功能</p></blockquote><blockquote><p>Post用于安全性要求较高的功能或者服务器的写操作</p></blockquote><p>用户登录</p><p>用户注册</p><p>更新公司账目</p><h3 id="Servlet生命周期">Servlet生命周期</h3><p>装载-web.xml</p><p>创建-构造函数第一次访问servlet</p><p>初始化-init()</p><p>提供服务-service()</p><p>销毁-destroy()</p><p><strong>如果刷新页面，只会提供服务，并不会再次创建Servlet对象。</strong></p><h3 id="使用注解简化配置">使用注解简化配置</h3><p>Servlet3.x之后引入了&quot;注解Annotation&quot;特性</p><p>注解用于简化Web应用程序的配置过程</p><p>Servlet核心注解:@WebServlet</p><h3 id="启动时加载Servlet">启动时加载Servlet</h3><p>web.xml使用&lt; load-on-startup &gt;设置启动时加载</p><p>&lt; load-on-startup &gt;0-9999&lt;/ load-on-startup &gt;</p><p>启动时加载在工作中常用于系统的预处理</p><h3 id="在注解设置启动加载">在注解设置启动加载</h3><p>@WebServlet(urlPattern,loadOnStartup=2)</p><p>必须要设置urlPattern,否则不会加载。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;什么是CS架构-Client-server&quot;&gt;什么是CS架构(Client-server)&lt;/h3&gt;
&lt;p&gt;Client/Sever结构(C/S结构)是指客户端和服务器结构&lt;/p&gt;
&lt;p&gt;优点:数据方便共享，安全性高&lt;/p&gt;
&lt;p&gt;缺点:必须安装客户端，升级与维护</summary>
      
    
    
    
    <category term="JavaEE" scheme="http://example.com/categories/JavaEE/"/>
    
    
  </entry>
  
  <entry>
    <title>寻找重复的子树</title>
    <link href="http://example.com/2022/01/09/%E5%AF%BB%E6%89%BE%E9%87%8D%E5%A4%8D%E7%9A%84%E5%AD%90%E6%A0%91/"/>
    <id>http://example.com/2022/01/09/%E5%AF%BB%E6%89%BE%E9%87%8D%E5%A4%8D%E7%9A%84%E5%AD%90%E6%A0%91/</id>
    <published>2022-01-09T04:50:56.000Z</published>
    <updated>2022-01-09T05:15:04.372Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>给定一棵二叉树，返回所有重复的子树。对于同一类的重复子树，你只需要返回其中任意<strong>一棵</strong>的根结点即可。</p><p>两棵树重复是指它们具有相同的结构以及相同的结点值。</p></blockquote><p>这道题的思路是:</p><p>首先可以想到我们需要声明一个List用来返回根节点</p><p>其次我们应该想到，我们需要一个函数用来收集不同根节点时的左右子树,即下面所示代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">List&lt;TreeNode&gt; list = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">collect(root);</span><br></pre></td></tr></table></figure><p>那么，这些子树应该使用一个Set集合来收集。当遇到新的子树时，往里添加子树。而子树可以将其序列化为字符串。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Set&lt;String&gt; set = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br></pre></td></tr></table></figure><p>接下来，我们将对collect函数进行实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">Collect</span><span class="params">(Tree root)</span></span>&#123;</span><br><span class="line">    <span class="comment">//如果根节点为空，则返回&quot;#&quot;</span></span><br><span class="line">    <span class="keyword">if</span>(root==<span class="keyword">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;#&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    String left = Collect(root.left);</span><br><span class="line">    String right = Collect(root.right);</span><br><span class="line">    <span class="comment">//将二叉树序列化为字符串</span></span><br><span class="line">    String subtree = left+<span class="string">&quot;,&quot;</span>+right+<span class="string">&quot;,&quot;</span>+root.val;</span><br><span class="line">    <span class="comment">//查看Set中是否含有subtree，如果没有则添加subtree，如果有则将其根节点添加到list中。</span></span><br><span class="line">    <span class="keyword">if</span>(set.contains(subtree))&#123;</span><br><span class="line">        list.add(root);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        set.add(subtree);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//该函数返回的是root作为根节点时，二叉树的后序遍历。</span></span><br><span class="line">    <span class="keyword">return</span> suntree;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是这里有个问题，如果有多个子树的根节点的val一样，则会重复添加，我们需要避免这种情况，因此，我们将HashSet改为HashMap记录subtree出现的次数。代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int val) &#123; this.val = val; &#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int val, TreeNode left, TreeNode right) &#123;</span></span><br><span class="line"><span class="comment"> *         this.val = val;</span></span><br><span class="line"><span class="comment"> *         this.left = left;</span></span><br><span class="line"><span class="comment"> *         this.right = right;</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">List&lt;TreeNode&gt; list = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">HashMap&lt;String,Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;TreeNode&gt; <span class="title">findDuplicateSubtrees</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        traverse(root);</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">traverse</span><span class="params">(TreeNode root)</span></span>&#123;</span><br><span class="line">        <span class="comment">//base case</span></span><br><span class="line">        <span class="keyword">if</span>(root==<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;#&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        String left = traverse(root.left);</span><br><span class="line">        String right = traverse(root.right);</span><br><span class="line">        <span class="comment">//后序遍历</span></span><br><span class="line">        String subtree = left+<span class="string">&#x27;,&#x27;</span>+right+<span class="string">&#x27;,&#x27;</span>+root.val;</span><br><span class="line">        <span class="keyword">int</span> fre = map.getOrDefault(subtree,<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span>(fre == <span class="number">1</span>)&#123;</span><br><span class="line">            list.add(root);</span><br><span class="line">        &#125;</span><br><span class="line">        map.put(subtree,fre+<span class="number">1</span>);</span><br><span class="line">        <span class="comment">//这里的返回，返回的是后序遍历的序列化的二叉树    </span></span><br><span class="line">        <span class="keyword">return</span> subtree;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;给定一棵二叉树，返回所有重复的子树。对于同一类的重复子树，你只需要返回其中任意&lt;strong&gt;一棵&lt;/strong&gt;的根结点即可。&lt;/p&gt;
&lt;p&gt;两棵树重复是指它们具有相同的结构以及相同的结点值。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这道题的</summary>
      
    
    
    
    <category term="Leetcode刷题" scheme="http://example.com/categories/Leetcode%E5%88%B7%E9%A2%98/"/>
    
    
  </entry>
  
  <entry>
    <title>判断回文单链表</title>
    <link href="http://example.com/2022/01/08/%E5%88%A4%E6%96%AD%E5%9B%9E%E6%96%87%E5%8D%95%E9%93%BE%E8%A1%A8/"/>
    <id>http://example.com/2022/01/08/%E5%88%A4%E6%96%AD%E5%9B%9E%E6%96%87%E5%8D%95%E9%93%BE%E8%A1%A8/</id>
    <published>2022-01-08T12:42:47.000Z</published>
    <updated>2022-01-08T12:55:46.395Z</updated>
    
    <content type="html"><![CDATA[<h3 id="判断回文单链表">判断回文单链表</h3><blockquote><p>给定一个链表的 <strong>头节点</strong> <code>head</code> **，**请判断其是否为回文链表。</p><p>如果一个链表是回文，那么链表节点序列从前往后看和从后往前看是相同的。</p></blockquote><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: head = [1,2,3,3,2,1]</span><br><span class="line">输出: true</span><br></pre></td></tr></table></figure></blockquote><p>思路:刚开始的思路是新建一个链表，然后反转该链表，然后两个指针从前往后遍历，比较每个节点的值。如果相等则返回true，不相等则false。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">ListNode left;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isPalindrome</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">        left = head;</span><br><span class="line">        <span class="keyword">return</span> Palindrome(head);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">Palindrome</span><span class="params">(ListNode right)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(right == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Boolean res = Palindrome(right.next);</span><br><span class="line">        <span class="comment">//后续遍历</span></span><br><span class="line">        res = res&amp;&amp;(right.val==left.val);</span><br><span class="line">        left = left.next;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;判断回文单链表&quot;&gt;判断回文单链表&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;给定一个链表的 &lt;strong&gt;头节点&lt;/strong&gt; &lt;code&gt;head&lt;/code&gt; **，**请判断其是否为回文链表。&lt;/p&gt;
&lt;p&gt;如果一个链表是回文，那么链表节点序列从前往后</summary>
      
    
    
    
    <category term="Leetcode刷题" scheme="http://example.com/categories/Leetcode%E5%88%B7%E9%A2%98/"/>
    
    
  </entry>
  
  <entry>
    <title>最长回文子串</title>
    <link href="http://example.com/2022/01/08/%E6%9C%80%E9%95%BF%E5%9B%9E%E6%96%87%E4%B8%B2/"/>
    <id>http://example.com/2022/01/08/%E6%9C%80%E9%95%BF%E5%9B%9E%E6%96%87%E4%B8%B2/</id>
    <published>2022-01-08T11:19:39.000Z</published>
    <updated>2022-01-08T11:27:11.481Z</updated>
    
    <content type="html"><![CDATA[<h3 id="最长回文子串">最长回文子串</h3><blockquote><p>给你一个字符串 <code>s</code>，找到 <code>s</code> 中最长的回文子串。</p></blockquote><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：s = &quot;babad&quot;</span><br><span class="line">输出：&quot;bab&quot;</span><br><span class="line">解释：&quot;aba&quot; 同样是符合题意的答案。</span><br></pre></td></tr></table></figure></blockquote><p>思路:</p><p>1.中心扩散法：定义两个指针，每次向外扩散一个字符，判断两个字符是否相等，直到遍历到最后一个节点或者最前面的节点。这里需要注意，如果该回文串是奇数。那么中间子符为一个，如果为偶数，则中间子符为两个。下面是代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">longestPalindrome</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        String res = s.substring(<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;s.length();i++)&#123;</span><br><span class="line">            <span class="comment">//找到以i为中心的回文子串</span></span><br><span class="line">            String len1 = Palindrome(s,i,i);</span><br><span class="line">            <span class="comment">//找到以i+1为中心的回文子串</span></span><br><span class="line">            String len2 = Palindrome(s,i,i+<span class="number">1</span>);</span><br><span class="line">            res = res.length()&gt;=len1.length()?res:len1;</span><br><span class="line">            res = res.length()&gt;=len2.length()?res:len2;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">Palindrome</span><span class="params">(String s,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(l&gt;=<span class="number">0</span>&amp;&amp;r&lt;s.length()&amp;&amp;s.charAt(l)==s.charAt(r))&#123;</span><br><span class="line">            l--;r++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> s.substring(l+<span class="number">1</span>,r);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;最长回文子串&quot;&gt;最长回文子串&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;给你一个字符串 &lt;code&gt;s&lt;/code&gt;，找到 &lt;code&gt;s&lt;/code&gt; 中最长的回文子串。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;figure class=</summary>
      
    
    
    
    <category term="Leetcode刷题" scheme="http://example.com/categories/Leetcode%E5%88%B7%E9%A2%98/"/>
    
    
  </entry>
  
</feed>
