<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>THYLOVEZJ的博客</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-01-07T07:26:46.251Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>THYLOVEZJ</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>DML-数据库定义语言</title>
    <link href="http://example.com/2022/01/07/DML-%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%9A%E4%B9%89%E8%AF%AD%E8%A8%80/"/>
    <id>http://example.com/2022/01/07/DML-%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%9A%E4%B9%89%E8%AF%AD%E8%A8%80/</id>
    <published>2022-01-07T07:10:10.000Z</published>
    <updated>2022-01-07T07:26:46.251Z</updated>
    
    <content type="html"><![CDATA[<h3 id="数据库操作语言">数据库操作语言</h3><p>添加操作:insert into…</p><h4 id="添加一条记录">添加一条记录</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> 表名(字段名，字段名，....) <span class="keyword">values</span> (数据<span class="number">1</span>，数据<span class="number">2</span>，...)</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> student (name，age) <span class="keyword">values</span> (‘TOM’，<span class="number">18</span>)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">insert into student (name) values (&#x27;Jerry&#x27;);</span><br></pre></td></tr></table></figure><h4 id="添加多条记录">添加多条记录</h4><p>修改操作</p><p>删除操作</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;数据库操作语言&quot;&gt;数据库操作语言&lt;/h3&gt;
&lt;p&gt;添加操作:	insert into…&lt;/p&gt;
&lt;h4 id=&quot;添加一条记录&quot;&gt;添加一条记录&lt;/h4&gt;
&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutt</summary>
      
    
    
    
    <category term="MySQL" scheme="http://example.com/categories/MySQL/"/>
    
    
  </entry>
  
  <entry>
    <title>K个一组反转链表</title>
    <link href="http://example.com/2022/01/07/K%E4%B8%AA%E4%B8%80%E7%BB%84%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8/"/>
    <id>http://example.com/2022/01/07/K%E4%B8%AA%E4%B8%80%E7%BB%84%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8/</id>
    <published>2022-01-07T04:24:03.000Z</published>
    <updated>2022-01-07T04:28:54.946Z</updated>
    
    <content type="html"><![CDATA[<h3 id="K个一组反转链表">K个一组反转链表</h3><blockquote><p>给你一个链表，每 k 个节点一组进行翻转，请你返回翻转后的链表。</p><p>k 是一个正整数，它的值小于或等于链表的长度。</p><p>如果节点总数不是 k 的整数倍，那么请将最后剩余的节点保持原有顺序。</p></blockquote><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：head = [1,2,3,4,5], k = 2</span><br><span class="line">输出：[2,1,4,3,5]</span><br></pre></td></tr></table></figure></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode() &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int val) &#123; this.val = val; &#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int val, ListNode next) &#123; this.val = val; this.next = next; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">reverseKGroup</span><span class="params">(ListNode head, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//如果链表为空，直接返回</span></span><br><span class="line">        <span class="keyword">if</span>(head == <span class="keyword">null</span>)<span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        ListNode a = head;ListNode b = head;</span><br><span class="line">        <span class="comment">//搜寻节点b的位置</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;k;i++)&#123;</span><br><span class="line">            <span class="comment">//base case</span></span><br><span class="line">            <span class="keyword">if</span>(b==<span class="keyword">null</span>)<span class="keyword">return</span> head;</span><br><span class="line">            b=b.next;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//反转了a到b的节点</span></span><br><span class="line">        ListNode HeadNode = reverse(a,b);</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        a.next = reverseKGroup(b,k);</span><br><span class="line">        <span class="keyword">return</span> HeadNode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//反转链表从a到b的节点</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">reverse</span><span class="params">(ListNode a,ListNode b)</span></span>&#123;</span><br><span class="line">        ListNode pre = a;ListNode cur = a;</span><br><span class="line">        ListNode sub = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">while</span>(cur!=b)&#123;</span><br><span class="line">            pre = pre.next;</span><br><span class="line">            cur.next = sub;</span><br><span class="line">            sub = cur;</span><br><span class="line">            cur = pre;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(sub.val);</span><br><span class="line">        <span class="keyword">return</span> sub;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;K个一组反转链表&quot;&gt;K个一组反转链表&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;给你一个链表，每 k 个节点一组进行翻转，请你返回翻转后的链表。&lt;/p&gt;
&lt;p&gt;k 是一个正整数，它的值小于或等于链表的长度。&lt;/p&gt;
&lt;p&gt;如果节点总数不是 k 的整数倍，那么请将最</summary>
      
    
    
    
    <category term="Leetcode刷题" scheme="http://example.com/categories/Leetcode%E5%88%B7%E9%A2%98/"/>
    
    
  </entry>
  
  <entry>
    <title>GET请求和POST请求</title>
    <link href="http://example.com/2022/01/06/GET%E8%AF%B7%E6%B1%82%E5%92%8CPOST%E8%AF%B7%E6%B1%82/"/>
    <id>http://example.com/2022/01/06/GET%E8%AF%B7%E6%B1%82%E5%92%8CPOST%E8%AF%B7%E6%B1%82/</id>
    <published>2022-01-06T14:26:24.000Z</published>
    <updated>2022-01-06T15:19:21.164Z</updated>
    
    <content type="html"><![CDATA[<h3 id="定义">定义</h3><p>无论是<strong>GET</strong>还是<strong>POST</strong>，统一由视图函数接收请求，通过判断<strong>request.method</strong>区分具体的请求动作</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">if request.method == &#x27;GET&#x27;:</span><br><span class="line">处理GET请求时的业务逻辑</span><br><span class="line">elif request.method == &#x27;POST&#x27;:</span><br><span class="line">处理POST请求时的业务逻辑</span><br><span class="line">else:</span><br><span class="line">其他请求业务逻辑</span><br></pre></td></tr></table></figure><h3 id="GET请求">GET请求</h3><p><strong>GET</strong>请求动作，一般用于向服务器获取数据</p><p>能够产生<strong>GET</strong>请求的场景</p><p>​-浏览器地址栏输入URL，回车后</p><p>​-<a href="地址?参数=值&参数=值"></p><p>​-form表单中的method为GET</p><p><strong>GET</strong>请求方式中，如果有数据需要传给服务器，通常会用查询字符串(Query String)传递[不要传递敏感数据]</p><p>URL格式:xxx?参数1:值1&amp;参数2:值2</p><p>​-如:<a href="http://127.0.0.1/page1?a=100&amp;b=200">http://127.0.0.1/page1?a=100&amp;b=200</a></p><p>服务器端接收数据</p><p>​获取客户端请求GET请求提交的数据</p><h4 id="方法实例">方法实例</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">request.GET[<span class="string">&#x27;参数名&#x27;</span>]</span><br><span class="line">request.GET(<span class="string">&#x27;参数名&#x27;</span>,<span class="string">&#x27;默认值&#x27;</span>)</span><br><span class="line">request.GET.getlist(<span class="string">&#x27;参数名&#x27;</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;定义&quot;&gt;定义&lt;/h3&gt;
&lt;p&gt;无论是&lt;strong&gt;GET&lt;/strong&gt;还是&lt;strong&gt;POST&lt;/strong&gt;，统一由视图函数接收请求，通过判断&lt;strong&gt;request.method&lt;/strong&gt;区分具体的请求动作&lt;/p&gt;
&lt;figure c</summary>
      
    
    
    
    <category term="django学习" scheme="http://example.com/categories/django%E5%AD%A6%E4%B9%A0/"/>
    
    
  </entry>
  
  <entry>
    <title>DDL-数据库定义语言</title>
    <link href="http://example.com/2022/01/06/DDL-%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%9A%E4%B9%89%E8%AF%AD%E8%A8%80/"/>
    <id>http://example.com/2022/01/06/DDL-%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%9A%E4%B9%89%E8%AF%AD%E8%A8%80/</id>
    <published>2022-01-06T10:08:05.000Z</published>
    <updated>2022-01-07T07:07:29.738Z</updated>
    
    <content type="html"><![CDATA[<h3 id="查看有哪些数据库">查看有哪些数据库</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> databases;</span><br></pre></td></tr></table></figure><h3 id="创建一个新的数据库">创建一个新的数据库</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> database 数据库名字;</span><br></pre></td></tr></table></figure><h3 id="查看数据库创建细节">查看数据库创建细节</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">create</span> database 数据库名字;</span><br></pre></td></tr></table></figure><h3 id="删除数据库">删除数据库</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span> database 数据库名字;</span><br></pre></td></tr></table></figure><h3 id="使用数据库名字">使用数据库名字</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">use 数据库名字;</span><br></pre></td></tr></table></figure><h3 id="查看数据库的表">查看数据库的表</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show tables;</span><br></pre></td></tr></table></figure><h3 id="创建一张新的表">创建一张新的表</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> 表名(</span><br><span class="line">字段名变量类型,</span><br><span class="line">字段名变量类型,</span><br><span class="line">);</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> person(</span><br><span class="line">name <span class="type">varchar</span>(<span class="number">20</span>),</span><br><span class="line">age <span class="type">int</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="常见数据类型">常见数据类型</h3><p>int</p><p>decimal(5,2)-5是精度，小数点后面2位</p><p>date</p><p>datatime</p><p>timestamp</p><p>varchar(20)</p><h3 id="查看表的结构">查看表的结构</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">desc</span> 表名</span><br></pre></td></tr></table></figure><h3 id="在原有的基础之上增加一个新的字段">在原有的基础之上增加一个新的字段</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 <span class="keyword">add</span> 字段名 数据类型;</span><br></pre></td></tr></table></figure><h3 id="在原有的基础之上修改字段的名字">在原有的基础之上修改字段的名字</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 change 原字段名 新字段名数据类型;</span><br></pre></td></tr></table></figure><h3 id="在原表基础之上，修改字段的数据类型">在原表基础之上，修改字段的数据类型</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 change 原字段名 原字段名新的数据类型;</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 modify 原字段名 新的数据类型;</span><br></pre></td></tr></table></figure><h3 id="删除某一个字段">删除某一个字段</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">alter table 表名 drop 字段名;</span><br><span class="line">alter table person drop gender;</span><br></pre></td></tr></table></figure><h3 id="修改表的名字">修改表的名字</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rename <span class="keyword">table</span> 原表名 <span class="keyword">to</span> 新表名;</span><br></pre></td></tr></table></figure><h3 id="删除指定的表">删除指定的表</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">drop table 表名;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;查看有哪些数据库&quot;&gt;查看有哪些数据库&lt;/h3&gt;
&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;</summary>
      
    
    
    
    <category term="MySQL" scheme="http://example.com/categories/MySQL/"/>
    
    
  </entry>
  
  <entry>
    <title>SQL语句介绍</title>
    <link href="http://example.com/2022/01/06/SQL%E8%AF%AD%E5%8F%A5%E4%BB%8B%E7%BB%8D/"/>
    <id>http://example.com/2022/01/06/SQL%E8%AF%AD%E5%8F%A5%E4%BB%8B%E7%BB%8D/</id>
    <published>2022-01-06T09:59:34.000Z</published>
    <updated>2022-01-06T10:07:46.968Z</updated>
    
    <content type="html"><![CDATA[<h3 id="SQL介绍">SQL介绍</h3><table><thead><tr><th>DDL</th><th>数据库定义语言，这里边的SQL语言，主要用于操作数据库和表的结构</th></tr></thead><tbody><tr><td>DML</td><td>数据库定义语言，这里边的SQL语言，主要用于操作数据库的表的数据的增删改查</td></tr><tr><td>DQL</td><td>数据库定义语言，这里边的SQL语言，主要用于操作数据库的表的数据的查询</td></tr><tr><td>DCL</td><td>数据库定义语言，这里边的SQL语言，主要用于操作数据库的用户的账号密码，权限和访问级别的</td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;SQL介绍&quot;&gt;SQL介绍&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;DDL&lt;/th&gt;
&lt;th&gt;数据库定义语言，这里边的SQL语言，主要用于操作数据库和表的结构&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;DML&lt;/t</summary>
      
    
    
    
    <category term="MySQL" scheme="http://example.com/categories/MySQL/"/>
    
    
  </entry>
  
  <entry>
    <title>MySQL服务启动</title>
    <link href="http://example.com/2022/01/06/MySQL%E6%9C%8D%E5%8A%A1%E5%90%AF%E5%8A%A8/"/>
    <id>http://example.com/2022/01/06/MySQL%E6%9C%8D%E5%8A%A1%E5%90%AF%E5%8A%A8/</id>
    <published>2022-01-06T09:46:34.000Z</published>
    <updated>2022-01-06T10:00:17.344Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/qqwangfan/article/details/90905642">MySQL服务的启动</a></p><p>在DOS下输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">开启MySQL</span><br><span class="line">$net start MySQL80(服务名)</span><br><span class="line">关闭MySQL</span><br><span class="line">$net stop MySQL80(服务名)</span><br></pre></td></tr></table></figure><h3 id="MySQL的登录与退出">MySQL的登录与退出</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$mysql -u root -p</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">exit</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/qqwangfan/article/details/90905642&quot;&gt;MySQL服务的启动&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;在DOS下输入&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;</summary>
      
    
    
    
    <category term="MySQL" scheme="http://example.com/categories/MySQL/"/>
    
    
  </entry>
  
  <entry>
    <title>==和equals</title>
    <link href="http://example.com/2022/01/06/%E5%92%8Cequals/"/>
    <id>http://example.com/2022/01/06/%E5%92%8Cequals/</id>
    <published>2022-01-06T08:13:13.000Z</published>
    <updated>2022-01-06T08:56:37.262Z</updated>
    
    <content type="html"><![CDATA[<h3 id="">==</h3><blockquote><p>==对于基本数据类型来说，比较的是数据的值</p><p>==对于引用数据类型来说，比较的是对象的内存地址</p></blockquote><h3 id="equals">equals()</h3><blockquote><p>不能用于判断基本数据类型的变量，只能用来判断两个对象是否相等。<code>equals()</code>方法存在于<code>Object</code>类中，而<code>Object</code>类是所有类的直接或间接父类。</p></blockquote><p>equals()方法存在两种使用情况:</p><p><strong>类没有覆盖equals()方法</strong>:通过equals()方法比较该类的两个对象时，等价于通过&quot;==&quot;比较这两个对象。使用的默认是<strong>Object</strong>类的**equals()**方法</p><p><strong>类覆盖了equals()方法</strong>:一般我们都覆盖 <code>equals()</code>方法来比较两个对象中的属性是否相等；若它们的属性相等，则返回 true(即，认为这两个对象相等)。</p><p><code>String</code> 中的 <code>equals</code> 方法是被重写过的，因为 <code>Object</code> 的 <code>equals</code> 方法是比较的对象的内存地址，而 <code>String</code> 的 <code>equals</code> 方法比较的是对象的值。</p><p>当创建 <code>String</code> 类型的对象时，虚拟机会在常量池中查找有没有已经存在的值和要创建的值相同的对象，如果有就把它赋给当前引用。如果没有就在常量池中重新创建一个 <code>String</code> 对象。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;&quot;&gt;==&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;==对于基本数据类型来说，比较的是数据的值&lt;/p&gt;
&lt;p&gt;==对于引用数据类型来说，比较的是对象的内存地址&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;equals&quot;&gt;equals()&lt;/h3&gt;
&lt;blo</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>请求及响应</title>
    <link href="http://example.com/2022/01/06/%E8%AF%B7%E6%B1%82%E5%8F%8A%E5%93%8D%E5%BA%94/"/>
    <id>http://example.com/2022/01/06/%E8%AF%B7%E6%B1%82%E5%8F%8A%E5%93%8D%E5%BA%94/</id>
    <published>2022-01-06T06:55:04.000Z</published>
    <updated>2022-01-06T14:25:11.804Z</updated>
    
    <content type="html"><![CDATA[<h3 id="HTTP协议的请求和响应">HTTP协议的请求和响应</h3><blockquote><p>请求是指浏览器端通过HTTP协议发送给服务器端的数据</p><p>响应是指服务器端接收到请求后做相应的处理后再返回给浏览器端的数据</p></blockquote><h3 id="请求中的方法">请求中的方法</h3><p>根据HTTP协议，HTTP协议可使用多种方法</p><p>HTTP1.0定义了三种请求方法:<strong>GET</strong>,<strong>POST</strong>和<strong>HEAD</strong>方法</p><p>HTTP1.1新增了五种请求方法:<strong>OPTIONS</strong>,<strong>PUT</strong>,<strong>DELETE</strong>,<strong>TRACE</strong>和<strong>CONNECT</strong>方法</p><table><thead><tr><th>序号</th><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>1</td><td>GET</td><td>请求指定的页面信息，并返回实体主题</td></tr><tr><td>2</td><td>HEAD</td><td>类似于POST请求，只不过访问的请求中没有具体的内容，用于获取表头</td></tr><tr><td>3</td><td>POST</td><td>向指定资源提交数据进行处理请求(例如提交表单或者上传文件)。数据被包含在请求体中。POST请求可能会导致新的资源的建立或者旧资源的修改。(所以Post用来增资源)</td></tr><tr><td>4</td><td>PUT</td><td>从客户端向服务器传送的数据取代指定的文档的内容</td></tr><tr><td>5</td><td>DELETE</td><td>请求服务器删除指定的页面</td></tr><tr><td>6</td><td>CONNECT</td><td>允许将连接方式改为管道方式的代理服务器</td></tr><tr><td>7</td><td>OPTIONS</td><td>允许客户端查看服务器的性能</td></tr><tr><td>8</td><td>TRACE</td><td>回显服务器收到的请求，主要用于测试或者诊断</td></tr></tbody></table><h3 id="Django中的请求">Django中的请求</h3><p>请求在Django中实则就是<strong>视图函数中的第一个参数</strong>，即<strong>HttpRequest</strong>对象</p><p>Django接收到HTTP协议的对象后，会根据请求数据报文创建<strong>HttpRequest</strong>对象</p><p><strong>HttpRequest</strong>对象通过属性描述了<strong>请求的所有相关信息</strong></p><h3 id="Django中请求的属性和方法">Django中请求的属性和方法</h3><p><strong>path_info</strong>:URL字符串</p><p><strong>method</strong>:字符串，表示HTTP请求方法，常用值:‘<strong>GET</strong>’,‘<strong>POST</strong>’</p><h3 id="HTTP响应状态码">HTTP响应状态码</h3><p><strong>HTTP</strong>状态码的英文为:HTTP Status Code</p><p>下面是常见的HTTP状态码</p><p>-200-请求成功</p><p>-301-永久重定向-资源或者网页被转移到其他URL</p><p>-302-临时重定向</p><p>-404-访问的资源(网页)不存在</p><p>-500-内部服务器错误</p><p>HTTP状态码有<strong>三个十进制数字</strong>组成，第一个十进制定义了<strong>状态码的类型</strong>，后两个数字没有分类的作用。HTTP状态码共分为5种类型</p><table><thead><tr><th>分类</th><th>分类描述</th></tr></thead><tbody><tr><td>1XX</td><td>信息，服务器收到请求，需要请求者继续执行操作</td></tr><tr><td>2XX</td><td>成功，操作被成功接收并处理</td></tr><tr><td>3XX</td><td>重定向，需要进一步的操作以完成请求</td></tr><tr><td>4XX</td><td>客户端错误，请求包含语法错误或无法完成请求</td></tr><tr><td>5XX</td><td>服务器错误，服务器在处理请求的过程中发生了错误</td></tr></tbody></table><h3 id="Django中的请求的属性与方法">Django中的请求的属性与方法</h3><table><thead><tr><th>path_info</th><th>URL字符串</th></tr></thead><tbody><tr><td>mathod</td><td>字符串，表示HTTP请求方法，常用值:‘GET’，‘POST’</td></tr><tr><td>GET</td><td>QueryDict查询字典的对象，包含get请求方式的所有数据</td></tr><tr><td>POST</td><td>QueryDict查询字典的对象，包含post请求方式的所有数据</td></tr><tr><td>FILES</td><td>类似于字典的对象，包含所有的上传文件信息</td></tr><tr><td>COOKIES</td><td>Python字典，包含所有的cookie，键和值都为字符串</td></tr><tr><td>session</td><td>似于字典的对象，表示当前的会话</td></tr><tr><td>body</td><td>字符串，请求体的内容(POST或者PUT)</td></tr><tr><td>scheme</td><td>请求协议(‘HTTP’/‘HTTPS’)</td></tr><tr><td>request.get_full_path()</td><td>请求的完整路径</td></tr><tr><td>request.META</td><td>请求中的元数据(消息头)</td></tr><tr><td>request.META[‘REMOTE_ADDR’]</td><td>客户端地址</td></tr></tbody></table><h3 id="Django中的响应对象">Django中的响应对象</h3><p>构造函数格式:</p><p>​HttpResponse(content=响应体，content_type=响应体数据类型(默认值HTML)，status=状态码(默认值200))</p><p>作用:</p><p>​向客户端浏览器返回响应，同时携带响应体内容</p><h3 id="常用的Content-Type如下">常用的Content-Type如下</h3><table><thead><tr><th>Content-Type</th><th>含义</th></tr></thead><tbody><tr><td>text/HTML</td><td>默认的，HTML文件</td></tr><tr><td>text/plain</td><td>纯文本</td></tr><tr><td>text/css</td><td>css文件</td></tr><tr><td>text/javascript</td><td>javascript文件</td></tr><tr><td>multipart/form-data</td><td>文件提交</td></tr><tr><td>application/json</td><td>json传输</td></tr><tr><td>application/xml</td><td>xml文件</td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;HTTP协议的请求和响应&quot;&gt;HTTP协议的请求和响应&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;请求是指浏览器端通过HTTP协议发送给服务器端的数据&lt;/p&gt;
&lt;p&gt;响应是指服务器端接收到请求后做相应的处理后再返回给浏览器端的数据&lt;/p&gt;
&lt;/blockquote&gt;</summary>
      
    
    
    
    <category term="django学习" scheme="http://example.com/categories/django%E5%AD%A6%E4%B9%A0/"/>
    
    
  </entry>
  
  <entry>
    <title>递归反转一个链表</title>
    <link href="http://example.com/2022/01/06/%E9%80%92%E5%BD%92%E5%8F%8D%E8%BD%AC%E4%B8%80%E4%B8%AA%E9%93%BE%E8%A1%A8/"/>
    <id>http://example.com/2022/01/06/%E9%80%92%E5%BD%92%E5%8F%8D%E8%BD%AC%E4%B8%80%E4%B8%AA%E9%93%BE%E8%A1%A8/</id>
    <published>2022-01-06T03:47:41.000Z</published>
    <updated>2022-01-06T05:33:38.430Z</updated>
    
    <content type="html"><![CDATA[<h3 id="反转链表I">反转链表I</h3><blockquote><p>给定单链表的头节点 <code>head</code> ，请反转链表，并返回反转后的链表的头节点。</p></blockquote><p><img src="D:%5Cthy123%5Csource%5Cimg%5C3.jpg" alt=""></p><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：head = [1,2,3,4,5]</span><br><span class="line">输出：[5,4,3,2,1]</span><br></pre></td></tr></table></figure></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode() &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int val) &#123; this.val = val; &#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int val, ListNode next) &#123; this.val = val; this.next = next; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">reverseList</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//base case:</span></span><br><span class="line">        <span class="keyword">if</span>  (head == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (head.next == <span class="keyword">null</span>) <span class="keyword">return</span> head;</span><br><span class="line">        ListNode last = reverseList(head.next);</span><br><span class="line">        head.next.next = head;</span><br><span class="line">        head.next = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">return</span> last;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里需要注意几点：</p><p>首先是递归函数的定义，我们定义的递归函数是反转一个链表并返回链表的头节点。那么执行完下面语句，上述链表可以化为</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ListNode last = reverseList(head.next);</span><br></pre></td></tr></table></figure><p><img src="D:%5Cthy123%5Csource%5Cimg%5C5.jpg" alt=""></p><p>那么，接下来我们只需要将链表的第二个元素的<strong>next</strong>指向第一个元素，第一个元素的<strong>next</strong>指向<strong>null</strong>即完成了链表的反转。</p><h3 id="反转链表II">反转链表II</h3><blockquote><p>给你单链表的头指针 head 和两个整数 left 和 right ，其中 left &lt;= right 。请你反转从位置 left 到位置 right 的链表节点，返回 反转后的链表 。</p></blockquote><p><img src="D:%5Cthy123%5Csource%5Cimg%5C6.jpg" alt=""></p><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：head = [1,2,3,4,5], left = 2, right = 4</span><br><span class="line">输出：[1,4,3,2,5]</span><br></pre></td></tr></table></figure></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode() &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int val) &#123; this.val = val; &#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int val, ListNode next) &#123; this.val = val; this.next = next; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">reverseBetween</span><span class="params">(ListNode head, <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// base case</span></span><br><span class="line">    <span class="keyword">if</span> (left == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> reverseN(head, right);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 前进到反转的起点触发 base case</span></span><br><span class="line">    head.next = reverseBetween(head.next, left - <span class="number">1</span>, right - <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    ListNode precessor = <span class="keyword">null</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">reverseN</span><span class="params">(ListNode head, <span class="keyword">int</span> right)</span></span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//base case</span></span><br><span class="line">        <span class="keyword">if</span>(right==<span class="number">1</span>)&#123;</span><br><span class="line">            precessor = head.next;</span><br><span class="line">            <span class="keyword">return</span> head;</span><br><span class="line">        &#125;</span><br><span class="line">        ListNode last = reverseN(head.next,right-<span class="number">1</span>);</span><br><span class="line">        head.next.next = head;</span><br><span class="line">        head.next = precessor;</span><br><span class="line">        <span class="keyword">return</span> last;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;反转链表I&quot;&gt;反转链表I&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;给定单链表的头节点 &lt;code&gt;head&lt;/code&gt; ，请反转链表，并返回反转后的链表的头节点。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;D:%5Cthy123%5Csou</summary>
      
    
    
    
    <category term="Leetcode刷题" scheme="http://example.com/categories/Leetcode%E5%88%B7%E9%A2%98/"/>
    
    
  </entry>
  
  <entry>
    <title>单链表题目</title>
    <link href="http://example.com/2022/01/05/%E5%8D%95%E9%93%BE%E8%A1%A8%E9%A2%98%E7%9B%AE/"/>
    <id>http://example.com/2022/01/05/%E5%8D%95%E9%93%BE%E8%A1%A8%E9%A2%98%E7%9B%AE/</id>
    <published>2022-01-05T02:41:54.000Z</published>
    <updated>2022-01-06T03:34:20.341Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题目1合并两个升序链表">题目1合并两个升序链表</h3><blockquote><p>将两个升序链表合并为一个新的 <strong>升序</strong> 链表并返回。新链表是通过拼接给定的两个链表的所有节点组成的。</p></blockquote><p><img src="D:%5Cthy123%5Csource%5Cimg%5Cmerge_ex1.jpg" alt=""></p><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：l1 = [1,2,4], l2 = [1,3,4]</span><br><span class="line">输出：[1,1,2,3,4,4]</span><br></pre></td></tr></table></figure></blockquote><p>思路:</p><p>我们应该首先定义两个指针，一个指向list1,一个指向list2.</p><p>然后建立一个指针指向一个虚拟节点，最后将虚拟节点的后继传回</p><p>然后，当list1和list2的值都不为空时，循环遍历链表，判断list1和list2值的大小</p><p>最后判断list1和list2是否为空</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode() &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int val) &#123; this.val = val; &#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int val, ListNode next) &#123; this.val = val; this.next = next; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">mergeTwoLists</span><span class="params">(ListNode list1, ListNode list2)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建新的链表</span></span><br><span class="line">        ListNode dummy = <span class="keyword">new</span> ListNode(-<span class="number">1</span>);</span><br><span class="line">        <span class="comment">//创建两个链表指针</span></span><br><span class="line">        ListNode p1 = list1;ListNode p2 = list2;</span><br><span class="line">        ListNode p = dummy;</span><br><span class="line">        <span class="keyword">while</span>(p1!=<span class="keyword">null</span>&amp;&amp;p2!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">//如果链表1的值大于链表2的值</span></span><br><span class="line">            <span class="keyword">if</span>(p1.val&gt;=p2.val)&#123;</span><br><span class="line">                p.next = <span class="keyword">new</span> ListNode(p2.val);</span><br><span class="line">                p2 = p2.next;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                p.next = <span class="keyword">new</span> ListNode(p1.val);</span><br><span class="line">                p1 = p1.next;</span><br><span class="line">            &#125;</span><br><span class="line">            p = p.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(p1!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            p.next = p1;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(p2!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            p.next = p2;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dummy.next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="题目2链表中倒数第K个节点">题目2链表中倒数第K个节点</h3><blockquote><p>输入一个链表，输出该链表中倒数第k个节点。为了符合大多数人的习惯，本题从1开始计数，即链表的尾节点是倒数第1个节点。</p><p>例如，一个链表有 6 个节点，从头节点开始，它们的值依次是 1、2、3、4、5、6。这个链表的倒数第 3 个节点是值为 4 的节点。</p></blockquote><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">给定一个链表: 1-&gt;2-&gt;3-&gt;4-&gt;5, 和 k = 2.</span><br><span class="line"></span><br><span class="line">返回链表 4-&gt;5.</span><br></pre></td></tr></table></figure></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">getKthFromEnd</span><span class="params">(ListNode head, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//定义两个指针，快指针比慢指针快k</span></span><br><span class="line">        ListNode p1 = head;</span><br><span class="line">        ListNode p2 = head;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;k;i++)&#123;</span><br><span class="line">            p1 = p1.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(p1!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            p1 = p1.next;</span><br><span class="line">            p2 = p2.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> p2;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="题目3剑指-Offer-II-022-链表中环的入口节点">题目3剑指 Offer II 022. 链表中环的入口节点</h3><blockquote><p>给定一个链表，返回链表开始入环的第一个节点。 从链表的头节点开始沿着 next 指针进入环的第一个节点为环的入口节点。如果链表无环，则返回 null。</p><p>为了表示给定链表中的环，我们使用整数 pos 来表示链表尾连接到链表中的位置（索引从 0 开始）。 如果 pos 是 -1，则在该链表中没有环。注意，pos 仅仅是用于标识环的情况，并不会作为参数传递到函数中。</p><p>说明：不允许修改给定的链表。</p></blockquote><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：head = [3,2,0,-4], pos = 1</span><br><span class="line">输出：返回索引为 1 的链表节点</span><br><span class="line">解释：链表中有一个环，其尾部连接到第二个节点</span><br></pre></td></tr></table></figure></blockquote><p>这里有一个BUG，还未解决，不知道哪里错了</p><p>错误代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) &#123;</span></span><br><span class="line"><span class="comment"> *         val = x;</span></span><br><span class="line"><span class="comment"> *         next = null;</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">detectCycle</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//其中p1为慢指针，p2为快指针</span></span><br><span class="line">        ListNode p1 = head;</span><br><span class="line">        ListNode p2 = head;</span><br><span class="line">        <span class="keyword">while</span>(p2!=<span class="keyword">null</span>&amp;&amp;p2.next!=<span class="keyword">null</span>&amp;&amp;p1!=p2)&#123;</span><br><span class="line">            p1 = p1.next;</span><br><span class="line">            p2 = p2.next.next;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(p2==<span class="keyword">null</span>||p2.next==<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        p1 = head;</span><br><span class="line">        <span class="keyword">while</span>(p1!=p2)&#123;</span><br><span class="line">            p1 = p1.next;</span><br><span class="line">            p2 = p2.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> p1;    </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>正确代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) &#123;</span></span><br><span class="line"><span class="comment"> *         val = x;</span></span><br><span class="line"><span class="comment"> *         next = null;</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">detectCycle</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//其中p1为慢指针，p2为快指针</span></span><br><span class="line">        ListNode p1 = head;</span><br><span class="line">        ListNode p2 = head;</span><br><span class="line">        <span class="keyword">while</span>(p2!=<span class="keyword">null</span>&amp;&amp;p2.next!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            p1 = p1.next;</span><br><span class="line">            p2 = p2.next.next;</span><br><span class="line">            <span class="keyword">if</span>(p1==p2)<span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(p2==<span class="keyword">null</span>||p2.next==<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        p1 = head;</span><br><span class="line">        <span class="keyword">while</span>(p1!=p2)&#123;</span><br><span class="line">            p1 = p1.next;</span><br><span class="line">            p2 = p2.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> p1;    </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="题目4相交链表">题目4相交链表</h3><blockquote><p>给你两个单链表的头节点 headA 和 headB ，请你找出并返回两个单链表相交的起始节点。如果两个链表不存在相交节点，返回 null 。</p><p>图示两个链表在节点 c1 开始相交：</p></blockquote><p><img src="D:%5Cthy123%5Csource%5Cimg%5C3.png" alt=""></p><p>思路1:用一个HashSet记录下一条链表中的每一个节点，然后和另一条链表进行比对。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) &#123;</span></span><br><span class="line"><span class="comment"> *         val = x;</span></span><br><span class="line"><span class="comment"> *         next = null;</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">getIntersectionNode</span><span class="params">(ListNode headA, ListNode headB)</span> </span>&#123;</span><br><span class="line">        Set&lt;ListNode&gt; set = <span class="keyword">new</span> HashSet&lt;ListNode&gt;();</span><br><span class="line">        ListNode p1 = headA;ListNode p2 = headB;</span><br><span class="line">        <span class="keyword">while</span>(p1!=<span class="keyword">null</span>&amp;&amp;p2!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(set.contains(p1))&#123;</span><br><span class="line">                <span class="keyword">return</span> p1;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                set.add(p1);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(set.contains(p2))&#123;</span><br><span class="line">                <span class="keyword">return</span> p2;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                set.add(p2);</span><br><span class="line">            &#125;</span><br><span class="line">            p1 = p1.next;</span><br><span class="line">            p2 = p2.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(p1==<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">while</span>(p2!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(set.contains(p2))&#123;</span><br><span class="line">                    <span class="keyword">return</span> p2;</span><br><span class="line">                &#125;</span><br><span class="line">                p2 = p2.next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(p2==<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">while</span>(p1!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(set.contains(p1))&#123;</span><br><span class="line">                    <span class="keyword">return</span> p1;</span><br><span class="line">                &#125;</span><br><span class="line">                p1 = p1.next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是，上述解法利用了额外的空间，那么如果不利用额外的空间，我们应该怎么处理呢?</p><p>我们可以定义两个指针，让指针a去遍历链表1，让指针b去遍历链表2，当遍历完后，去遍历另一根链表，那么当两个指针相交时，如果为null，则说明没有交点，如果有节点则返回指向节点，代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">getIntersectionNode</span><span class="params">(ListNode headA, ListNode headB)</span> </span>&#123;</span><br><span class="line">        ListNode p1 = headA;ListNode p2 = headB;</span><br><span class="line">        <span class="keyword">while</span>(p1!=p2)&#123;</span><br><span class="line">            <span class="keyword">if</span>(p1==<span class="keyword">null</span>)&#123;</span><br><span class="line">                p1 = headB;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                p1 = p1.next;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(p2==<span class="keyword">null</span>)&#123;</span><br><span class="line">                p2 = headA;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                p2 = p2.next</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> p1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>很明显，下面的方法更好。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;题目1合并两个升序链表&quot;&gt;题目1合并两个升序链表&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;将两个升序链表合并为一个新的 &lt;strong&gt;升序&lt;/strong&gt; 链表并返回。新链表是通过拼接给定的两个链表的所有节点组成的。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p</summary>
      
    
    
    
    <category term="Leetcode刷题" scheme="http://example.com/categories/Leetcode%E5%88%B7%E9%A2%98/"/>
    
    
  </entry>
  
  <entry>
    <title>Comparator对对象按升序排列</title>
    <link href="http://example.com/2022/01/04/Comparator%E5%AF%B9%E5%AF%B9%E8%B1%A1%E6%8C%89%E5%8D%87%E5%BA%8F%E6%8E%92%E5%88%97/"/>
    <id>http://example.com/2022/01/04/Comparator%E5%AF%B9%E5%AF%B9%E8%B1%A1%E6%8C%89%E5%8D%87%E5%BA%8F%E6%8E%92%E5%88%97/</id>
    <published>2022-01-04T13:44:09.000Z</published>
    <updated>2022-01-04T13:59:50.387Z</updated>
    
    <content type="html"><![CDATA[<h3 id="利用Comparator对对象按升序排列">利用Comparator对对象按升序排列</h3><p><strong>Comparator</strong>可以强行对某个对象进行整体排序的比较函数</p><p>可以将<strong>Comparator</strong>传递给<strong>sort</strong>方法(<strong>Collections.sort</strong>或者<strong>Arrays.sort</strong>)</p><p>例:对宠物猫对象按名字升序进行排列</p><p>宠物猫类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Cat</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Cat</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Cat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = <span class="string">&quot;zhangsan&quot;</span>;</span><br><span class="line">        <span class="keyword">this</span>.age = <span class="number">12</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Cat&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>NameCoparator实现了Comparator接口的代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Comparator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NameCoparator</span> <span class="keyword">implements</span> <span class="title">Comparator</span>&lt;<span class="title">Cat</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Cat o1,Cat o2)</span></span>&#123;</span><br><span class="line">        <span class="comment">//如果name1&lt;name2返回负整数</span></span><br><span class="line">        <span class="comment">//如果name1=name2返回0</span></span><br><span class="line">        <span class="comment">//如果name1&gt;name2返回正整数</span></span><br><span class="line">        String name1 = o1.name;</span><br><span class="line">        String name2 = o2.name;</span><br><span class="line">        <span class="keyword">int</span> n = name1.compareTo(name2);</span><br><span class="line">        <span class="keyword">return</span> n;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>测试类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Collection;</span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CatTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//按名字升序进行排列</span></span><br><span class="line">        Cat cat1 = <span class="keyword">new</span> Cat(<span class="string">&quot;huahua&quot;</span>, <span class="number">5</span>);</span><br><span class="line">        Cat cat2 = <span class="keyword">new</span> Cat(<span class="string">&quot;fanfan&quot;</span>, <span class="number">6</span>);</span><br><span class="line">        Cat cat3 = <span class="keyword">new</span> Cat(<span class="string">&quot;xixi&quot;</span>, <span class="number">4</span>);</span><br><span class="line">        List&lt;Cat&gt; list = <span class="keyword">new</span> ArrayList&lt;Cat&gt;();</span><br><span class="line">        list.add(cat1);</span><br><span class="line">        list.add(cat2);</span><br><span class="line">        list.add(cat3);</span><br><span class="line">        System.out.print(<span class="string">&quot;排序前的数组:&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span>(Cat e:list)&#123;</span><br><span class="line">            System.out.print(e+<span class="string">&quot;  &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">        Collections.sort(list,<span class="keyword">new</span> NameCoparator());</span><br><span class="line">        System.out.print(<span class="string">&quot;排序后的数组:&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span>(Cat e:list)&#123;</span><br><span class="line">            System.out.print(e+<span class="string">&quot;  &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>输出:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">排序前的数组:Cat&#123;name=&#x27;huahua&#x27;, age=5&#125;  Cat&#123;name=&#x27;fanfan&#x27;, age=6&#125;  Cat&#123;name=&#x27;xixi&#x27;, age=4&#125;  </span><br><span class="line">排序后的数组:Cat&#123;name=&#x27;fanfan&#x27;, age=6&#125;  Cat&#123;name=&#x27;huahua&#x27;, age=5&#125;  Cat&#123;name=&#x27;xixi&#x27;, age=4&#125;  </span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;利用Comparator对对象按升序排列&quot;&gt;利用Comparator对对象按升序排列&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Comparator&lt;/strong&gt;可以强行对某个对象进行整体排序的比较函数&lt;/p&gt;
&lt;p&gt;可以将&lt;strong&gt;Comparator&lt;/str</summary>
      
    
    
    
    <category term="Java基础" scheme="http://example.com/categories/Java%E5%9F%BA%E7%A1%80/"/>
    
    
  </entry>
  
  <entry>
    <title>Java里的泛型</title>
    <link href="http://example.com/2022/01/04/Java%E9%87%8C%E7%9A%84%E6%B3%9B%E5%9E%8B/"/>
    <id>http://example.com/2022/01/04/Java%E9%87%8C%E7%9A%84%E6%B3%9B%E5%9E%8B/</id>
    <published>2022-01-04T06:08:48.000Z</published>
    <updated>2022-01-04T07:05:39.801Z</updated>
    
    <content type="html"><![CDATA[<h3 id="什么是泛型，什么是类型擦除，什么是通配符">什么是泛型，什么是类型擦除，什么是通配符</h3><p><strong>Java</strong>泛型提供了编译时类型安全检查机制，该机制允许程序员在编译时检测到非法的类型。泛型的本质是<strong>参数化类型</strong>，也就是说<strong>所操作的数据类型被指定为一个参数</strong>。</p><p>Java 的泛型是<strong>伪泛型</strong>，这是因为 Java 在运行期间，所有的泛型信息都会被擦掉，这也就是通常所说<strong>类型擦除</strong> 。</p><p>泛型一般有三种使用方式: <strong>泛型类</strong>、<strong>泛型接口</strong>、<strong>泛型方法</strong>。</p><p>下面是<strong>泛型类的定义</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Generic</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> T key;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Generic</span><span class="params">(T key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.key = key;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">getKey</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> key;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面是<strong>泛型类的实例化</strong>:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Generic&lt;Integer&gt; genericInteger = <span class="keyword">new</span> Generic&lt;Integer&gt;(<span class="number">123456</span>);</span><br></pre></td></tr></table></figure><p>下面是<strong>泛型接口</strong>的定义</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Generator</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">method</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面是<strong>泛型接口</strong>的实现，指定<strong>类型</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GeneratorImpl</span> <span class="keyword">implements</span> <span class="title">Generator</span>&lt;<span class="title">String</span>&gt;</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">method</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面是<strong>泛型接口</strong>的实现，没有指定<strong>类型</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">class GeneratorImpl&lt;T&gt; implements Generator&lt;T&gt;&#123;</span><br><span class="line">    @Override</span><br><span class="line">    public T method() &#123;</span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面是<strong>泛型方法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;E&gt; <span class="function"><span class="keyword">void</span> <span class="title">printArray</span><span class="params">(E[] inputArray)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (E element : inputArray) &#123;</span><br><span class="line">        System.out.printf(<span class="string">&quot;%s &quot;</span>, element);</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通配符有以下几类</p><p><strong>常用的通配符为： T，E，K，V，？</strong></p><ul><li>？ 表示不确定的 Java 类型</li><li>T (type) 表示具体的一个 Java 类型</li><li>K V (key value) 分别代表 Java 键值中的 Key Value</li><li>E (element) 代表 Element</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;什么是泛型，什么是类型擦除，什么是通配符&quot;&gt;什么是泛型，什么是类型擦除，什么是通配符&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Java&lt;/strong&gt;泛型提供了编译时类型安全检查机制，该机制允许程序员在编译时检测到非法的类型。泛型的本质是&lt;strong&gt;参数化类型&lt;/s</summary>
      
    
    
    
    <category term="Java基础" scheme="http://example.com/categories/Java%E5%9F%BA%E7%A1%80/"/>
    
    
  </entry>
  
  <entry>
    <title>静态方法</title>
    <link href="http://example.com/2022/01/04/%E9%9D%99%E6%80%81%E6%96%B9%E6%B3%95/"/>
    <id>http://example.com/2022/01/04/%E9%9D%99%E6%80%81%E6%96%B9%E6%B3%95/</id>
    <published>2022-01-04T05:52:46.000Z</published>
    <updated>2022-01-04T06:01:01.930Z</updated>
    
    <content type="html"><![CDATA[<h3 id="静态方法和实例方法的区别">静态方法和实例方法的区别</h3><h4 id="调用方式">调用方式</h4><p>​在外部调用方法时，可以使用<strong>类名.方法名</strong>，也可以使用<strong>对象.方法名</strong>，而实例方法只有后面这种方式。也就是说，调用<strong>静态方法无需创建实例对象</strong>。</p><p>​不过，需要注意的是一般不建议使用<strong>对象.方法名</strong>的方式来调用静态方法。这种方式非常容易造成混淆，<strong>静态方法不属于类的某个对象而是属于这个类</strong>。</p><p>​因此，一般建议使用<strong>类名.方法名</strong>的方式来调用静态方法。</p><h3 id="静态方法为什么不能调用非静态成员">静态方法为什么不能调用非静态成员</h3><p>这个需要结合<strong>JVM</strong>的相关知识，主要原因如下：</p><ol><li>静态方法是属于类的，在类加载的时候就会分配内存，可以通过类名直接访问。而非静态成员属于实例对象，只有在对象实例化之后才存在，需要通过类的实例对象去访问。</li><li>在类的非静态成员不存在的时候静态成员就已经存在了，此时调用在内存中还不存在的非静态成员，属于非法操作。</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;静态方法和实例方法的区别&quot;&gt;静态方法和实例方法的区别&lt;/h3&gt;
&lt;h4 id=&quot;调用方式&quot;&gt;调用方式&lt;/h4&gt;
&lt;p&gt;​	在外部调用方法时，可以使用&lt;strong&gt;类名.方法名&lt;/strong&gt;，也可以使用&lt;strong&gt;对象.方法名&lt;/strong&gt;，而实例方法</summary>
      
    
    
    
    <category term="Java基础" scheme="http://example.com/categories/Java%E5%9F%BA%E7%A1%80/"/>
    
    
  </entry>
  
  <entry>
    <title>路由配置II</title>
    <link href="http://example.com/2022/01/04/%E8%B7%AF%E7%94%B1%E9%85%8D%E7%BD%AEII/"/>
    <id>http://example.com/2022/01/04/%E8%B7%AF%E7%94%B1%E9%85%8D%E7%BD%AEII/</id>
    <published>2022-01-04T04:08:43.000Z</published>
    <updated>2022-01-04T14:15:57.211Z</updated>
    
    
    
    
    <category term="django学习" scheme="http://example.com/categories/django%E5%AD%A6%E4%B9%A0/"/>
    
    
  </entry>
  
  <entry>
    <title>填充二叉树节点的右侧指针</title>
    <link href="http://example.com/2022/01/04/%E5%A1%AB%E5%85%85%E4%BA%8C%E5%8F%89%E6%A0%91%E8%8A%82%E7%82%B9%E7%9A%84%E5%8F%B3%E4%BE%A7%E6%8C%87%E9%92%88/"/>
    <id>http://example.com/2022/01/04/%E5%A1%AB%E5%85%85%E4%BA%8C%E5%8F%89%E6%A0%91%E8%8A%82%E7%82%B9%E7%9A%84%E5%8F%B3%E4%BE%A7%E6%8C%87%E9%92%88/</id>
    <published>2022-01-04T02:51:29.000Z</published>
    <updated>2022-01-04T02:53:40.721Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>给定一个 <strong>完美二叉树</strong> ，其所有叶子节点都在同一层，每个父节点都有两个子节点。二叉树定义如下：</p></blockquote><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">struct Node &#123;</span><br><span class="line">  int val;</span><br><span class="line">  Node *left;</span><br><span class="line">  Node *right;</span><br><span class="line">  Node *next;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>填充它的每个 next 指针，让这个指针指向其下一个右侧节点。如果找不到下一个右侧节点，则将 next 指针设置为 NULL。</p><p>初始状态下，所有 next 指针都被设置为 NULL。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">// Definition for a Node.</span></span><br><span class="line"><span class="comment">class Node &#123;</span></span><br><span class="line"><span class="comment">    public int val;</span></span><br><span class="line"><span class="comment">    public Node left;</span></span><br><span class="line"><span class="comment">    public Node right;</span></span><br><span class="line"><span class="comment">    public Node next;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    public Node() &#123;&#125;</span></span><br><span class="line"><span class="comment">    </span></span><br><span class="line"><span class="comment">    public Node(int _val) &#123;</span></span><br><span class="line"><span class="comment">        val = _val;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    public Node(int _val, Node _left, Node _right, Node _next) &#123;</span></span><br><span class="line"><span class="comment">        val = _val;</span></span><br><span class="line"><span class="comment">        left = _left;</span></span><br><span class="line"><span class="comment">        right = _right;</span></span><br><span class="line"><span class="comment">        next = _next;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">&#125;;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Node <span class="title">connect</span><span class="params">(Node root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root==<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> root;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//传入两个节点，连接他们</span></span><br><span class="line">        connectTwoNode(root.left,root.right);</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">connectTwoNode</span><span class="params">(Node node1,Node node2)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(node1==<span class="keyword">null</span>||node2==<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        node1.next=node2;</span><br><span class="line">        connectTwoNode(node1.left,node1.right);</span><br><span class="line">        connectTwoNode(node2.left,node2.right);</span><br><span class="line">        connectTwoNode(node1.right,node2.left);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;给定一个 &lt;strong&gt;完美二叉树&lt;/strong&gt; ，其所有叶子节点都在同一层，每个父节点都有两个子节点。二叉树定义如下：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;figure class=&quot;highlight plai</summary>
      
    
    
    
    <category term="Leetcode刷题" scheme="http://example.com/categories/Leetcode%E5%88%B7%E9%A2%98/"/>
    
    
  </entry>
  
  <entry>
    <title>二叉树的最小深度</title>
    <link href="http://example.com/2022/01/04/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E6%9C%80%E5%B0%8F%E6%B7%B1%E5%BA%A6/"/>
    <id>http://example.com/2022/01/04/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E6%9C%80%E5%B0%8F%E6%B7%B1%E5%BA%A6/</id>
    <published>2022-01-04T01:43:45.000Z</published>
    <updated>2022-01-04T01:47:02.477Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>给定一个二叉树，找出其最小深度。</p><p>最小深度是从根节点到最近叶子节点的最短路径上的节点数量。</p><p>**说明：**叶子节点是指没有子节点的节点。</p></blockquote><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：root = [3,9,20,null,null,15,7]</span><br><span class="line">输出：2</span><br></pre></td></tr></table></figure></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int val) &#123; this.val = val; &#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int val, TreeNode left, TreeNode right) &#123;</span></span><br><span class="line"><span class="comment"> *         this.val = val;</span></span><br><span class="line"><span class="comment"> *         this.left = left;</span></span><br><span class="line"><span class="comment"> *         this.right = right;</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">minDepth</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//首先判断两种特殊情况，二叉树为空，和二叉树左右子树都为空</span></span><br><span class="line">        <span class="keyword">if</span>(root==<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(root.left==<span class="keyword">null</span>&amp;&amp;root.right==<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> ans = Integer.MAX_VALUE;</span><br><span class="line">        <span class="keyword">if</span>(root.left!=<span class="keyword">null</span>)</span><br><span class="line">        ans = Math.min(ans,minDepth(root.left));</span><br><span class="line">        <span class="keyword">if</span>(root.right!=<span class="keyword">null</span>)</span><br><span class="line">        ans = Math.min(ans,minDepth(root.right));</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>+ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;给定一个二叉树，找出其最小深度。&lt;/p&gt;
&lt;p&gt;最小深度是从根节点到最近叶子节点的最短路径上的节点数量。&lt;/p&gt;
&lt;p&gt;**说明：**叶子节点是指没有子节点的节点。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;figure cl</summary>
      
    
    
    
    <category term="Leetcode刷题" scheme="http://example.com/categories/Leetcode%E5%88%B7%E9%A2%98/"/>
    
    
  </entry>
  
  <entry>
    <title>路由配置I</title>
    <link href="http://example.com/2022/01/03/%E8%B7%AF%E7%94%B1%E9%85%8D%E7%BD%AEI/"/>
    <id>http://example.com/2022/01/03/%E8%B7%AF%E7%94%B1%E9%85%8D%E7%BD%AEI/</id>
    <published>2022-01-03T14:01:33.000Z</published>
    <updated>2022-01-04T04:07:36.681Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>path()函数</p><p>导入-from django.urls import path</p><p>语法-path(route,views,name=None)</p><p>参数:</p><p>1.route:字符串类型，匹配的请求路径</p><p>2.views:指定路径所对应的视图处理函数的名称</p><p><a href="http://3.name">3.name</a>:为地址起别名，在模板中地址反向解析时使用</p></blockquote><h3 id="path转换器">path转换器</h3><p>语法:&lt; 转换器类型:自定义名 &gt;</p><p>作用:如果转换器类型匹配到对应类型的数据，则将数据按照关键字传参的方式传递给视图函数。</p><p>例子:path(‘page/&lt; int:page &gt;’,<a href="http://views.xxx">views.xxx</a>)</p><h3 id="转换器类型">转换器类型</h3><table><thead><tr><th>转换器类型</th><th>作用</th><th>样例</th></tr></thead><tbody><tr><td>str</td><td>匹配除了’/'之外的非空字符串</td><td>“v1/users/&lt; str:username &gt;”匹配</td></tr><tr><td>int</td><td>匹配除了0或者任何正整数，返回一个int</td><td>&quot;page/&lt; int:page &gt;&quot;匹配/page/100</td></tr><tr><td>slug</td><td>匹配任意由ASCII字母或数字以及连字符组成的短标签</td><td>&quot;detail/&lt; slug:sl &gt;&quot;匹配/detail/this-is-django</td></tr><tr><td>path</td><td>匹配非空字符串，包括路径分隔符</td><td>&quot;v1/users/&lt; path:ph &gt;&quot;匹配/v1/goods/a/b/c</td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;path()函数&lt;/p&gt;
&lt;p&gt;导入	-from django.urls import path&lt;/p&gt;
&lt;p&gt;语法	-path(route,views,name=None)&lt;/p&gt;
&lt;p&gt;参数:&lt;/p&gt;
&lt;p&gt;1.route:字符串类型，匹配的请</summary>
      
    
    
    
    <category term="django学习" scheme="http://example.com/categories/django%E5%AD%A6%E4%B9%A0/"/>
    
    
  </entry>
  
  <entry>
    <title>url和视窗函数</title>
    <link href="http://example.com/2022/01/03/url%E5%92%8C%E8%A7%86%E7%AA%97%E5%87%BD%E6%95%B0/"/>
    <id>http://example.com/2022/01/03/url%E5%92%8C%E8%A7%86%E7%AA%97%E5%87%BD%E6%95%B0/</id>
    <published>2022-01-03T13:16:31.000Z</published>
    <updated>2022-01-03T14:00:57.347Z</updated>
    
    <content type="html"><![CDATA[<h3 id="URL结构">URL结构</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">protocol://hostname[:port]/path[?query][#fragment]</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">http通过HTTP访问该资源</span><br><span class="line">https通过安全的HTTPS访问该资源</span><br><span class="line">file资源是本地计算机的文件格式:file://</span><br><span class="line">hostname(主机名)</span><br><span class="line">端口号:默认80端口</span><br><span class="line">path路由地址</span><br><span class="line">query查询字符串，可由多个参数，用&quot;&amp;&quot;符号隔开</span><br></pre></td></tr></table></figure><blockquote><p>浏览器地址栏-&gt;<a href="http://127.0.0.1:8000/page/2003">http://127.0.0.1:8000/page/2003</a></p></blockquote><blockquote><p>1.Django从配置文件中根据ROOT__URLCONF找到主路由文件；默认情况下，该文件在项目同名目录下的urls；例如mysite/mysite/urls.py</p><p>2.Django加载主路由文件中的urlpatterns变量[包括很多路由的数组]</p><p>3.依次匹配urlpatterns中的path，匹配到第一个合适的中断后续匹配(顺序匹配)</p><p>4.匹配成功-调用对应的视图函数处理请求，返回响应</p><p>5.匹配失败，返回404</p></blockquote><p>例如，在新建的一个django项目中，urls.py文件如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;admin/&#x27;</span>, admin.site.urls),</span><br><span class="line">    <span class="comment">#http://127.0.0.1:8000/page/2003/</span></span><br><span class="line">    <span class="comment">#其中,page/2003即为所配置路由</span></span><br><span class="line">    path(<span class="string">&#x27;page/2003/&#x27;</span>,views.page_2003)</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="视图函数">视图函数</h3><p>​视图函数是用于接收一个浏览器请求(HttpRequest对象)并通过HttpResponse对象返回响应的函数。此函数可以接收浏览器请求并根据业务逻辑返回相应的响应内容给浏览器</p><p>语法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">XXX_view</span>(<span class="params">request[,其他参数...]</span>)</span></span><br><span class="line"><span class="function"><span class="title">return</span> <span class="title">HttpResponse</span>对象</span></span><br></pre></td></tr></table></figure><p>例：</p><p>我们在上面定义了<strong>page/2003/<strong>的路由，我们在同名目录下直接定义</strong><a href="http://views.py">views.py</a></strong>文件，通过访问<strong><a href="http://127.0.0.1:8000/page/2003/">http://127.0.0.1:8000/page/2003/</a><strong>即可得到views.py文件下定义的</strong>views.page_2003</strong>视图</p><p>views.py文件如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponse</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">page_2003_view</span>(<span class="params">request</span>):</span></span><br><span class="line">    html = <span class="string">&quot;&lt;h1&gt;这是第一个页面&lt;/h1&gt;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> HttpResponse(html)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;URL结构&quot;&gt;URL结构&lt;/h3&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;</summary>
      
    
    
    
    <category term="django学习" scheme="http://example.com/categories/django%E5%AD%A6%E4%B9%A0/"/>
    
    
  </entry>
  
  <entry>
    <title>django项目结构II</title>
    <link href="http://example.com/2022/01/03/django%E9%A1%B9%E7%9B%AE%E7%BB%93%E6%9E%84II/"/>
    <id>http://example.com/2022/01/03/django%E9%A1%B9%E7%9B%AE%E7%BB%93%E6%9E%84II/</id>
    <published>2022-01-03T12:45:22.000Z</published>
    <updated>2022-01-03T13:15:36.569Z</updated>
    
    <content type="html"><![CDATA[<h3 id="settings-py配置项">settings.py配置项</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">BASE_DIR:项目绝对路径</span><br><span class="line">DEBUG:</span><br><span class="line">#启动模式</span><br><span class="line">#True-调试模式</span><br><span class="line">1.检测代码改动后，立即重启服务</span><br><span class="line">2.报错页面</span><br><span class="line">#False-正式启动模式/上线模式</span><br><span class="line">ROOT_URLCONF:主路由位置</span><br><span class="line">TIME_ZONE:时间戳</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;settings-py配置项&quot;&gt;settings.py配置项&lt;/h3&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/spa</summary>
      
    
    
    
    <category term="django学习" scheme="http://example.com/categories/django%E5%AD%A6%E4%B9%A0/"/>
    
    
  </entry>
  
  <entry>
    <title>翻转二叉树</title>
    <link href="http://example.com/2022/01/03/%E7%BF%BB%E8%BD%AC%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    <id>http://example.com/2022/01/03/%E7%BF%BB%E8%BD%AC%E4%BA%8C%E5%8F%89%E6%A0%91/</id>
    <published>2022-01-03T09:47:48.000Z</published>
    <updated>2022-01-03T09:50:09.218Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>翻转一棵二叉树。</p></blockquote><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">     4</span><br><span class="line">   /   \</span><br><span class="line">  2     7</span><br><span class="line"> / \   / \</span><br><span class="line">1   3 6   9</span><br></pre></td></tr></table></figure></blockquote><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">     4</span><br><span class="line">   /   \</span><br><span class="line">  7     2</span><br><span class="line"> / \   / \</span><br><span class="line">9   6 3   1</span><br></pre></td></tr></table></figure></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int val) &#123; this.val = val; &#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int val, TreeNode left, TreeNode right) &#123;</span></span><br><span class="line"><span class="comment"> *         this.val = val;</span></span><br><span class="line"><span class="comment"> *         this.left = left;</span></span><br><span class="line"><span class="comment"> *         this.right = right;</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> TreeNode <span class="title">invertTree</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//base</span></span><br><span class="line">        <span class="keyword">if</span>(root==<span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">//前序遍历</span></span><br><span class="line">        TreeNode temp = root.left;</span><br><span class="line">        root.left = root.right;</span><br><span class="line">        root.right = temp;</span><br><span class="line"></span><br><span class="line">        invertTree(root.left);</span><br><span class="line">        invertTree(root.right);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;翻转一棵二叉树。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;</summary>
      
    
    
    
    <category term="Leetcode刷题" scheme="http://example.com/categories/Leetcode%E5%88%B7%E9%A2%98/"/>
    
    
  </entry>
  
</feed>
