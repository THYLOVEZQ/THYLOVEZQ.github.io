<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>THYLOVEZQ的博客</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2023-11-12T13:55:33.130Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>THYLOVEZQ</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>用户交友网站项目</title>
    <link href="http://example.com/2023/11/12/%E7%94%A8%E6%88%B7%E4%BA%A4%E5%8F%8B%E7%BD%91%E7%AB%99%E9%A1%B9%E7%9B%AE/"/>
    <id>http://example.com/2023/11/12/%E7%94%A8%E6%88%B7%E4%BA%A4%E5%8F%8B%E7%BD%91%E7%AB%99%E9%A1%B9%E7%9B%AE/</id>
    <published>2023-11-12T04:20:52.000Z</published>
    <updated>2023-11-12T13:55:33.130Z</updated>
    
    <content type="html"><![CDATA[<h2 id="用户交友网站">用户交友网站</h2><p>介绍：帮助大家找到志同道合的伙伴，移动端H5</p><h2 id="需求分析">需求分析</h2><ol><li>用户去添加标签，标签的分类（要有哪些标签，怎么把标签进行分类）</li><li>主动搜索：允许用户根据标签搜索其他用户<ol><li>Redis缓存 + 本地</li></ol></li><li>组队：<ol><li>创建队伍</li><li>加入队伍</li><li>根据标签查询队伍</li><li>邀请其他人</li></ol></li><li>推荐<ol><li>相似度计算算法 + 本地分布式计算</li></ol></li><li>允许用户修改标签</li></ol><h2 id="技术栈">技术栈</h2><p>前端</p><ol><li>Vue3开发框架（提高页面开发效率）</li><li>Vant UI（基于Vue的移动组件库）（React版）</li><li>Vite（打包工具，快）</li><li>Nginx来单机部署</li></ol><h2 id="后端">后端</h2><ol><li>Java编程语言+SpringBoot框架</li><li>SpringMVC + MyBatis + Mybatis Plus</li><li>MySQL 数据库</li><li>Redis缓存</li><li>Swagger + Knife4j接口文档</li></ol><h2 id="第一期计划">第一期计划</h2><ol><li>前端项目初始化</li><li>数据库表设计</li><li>前端主页</li><li>数据库表设计<ol><li>标签表</li><li>用户表</li></ol></li><li>开发后端 - 根据标签搜索用户</li><li>开发前端 - 根据标签搜索用户</li></ol><h3 id="前端项目初始化">前端项目初始化</h3><p>用脚手架初始化项目</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">PS D:\vue-proj&gt; yarn create vite</span><br><span class="line">yarn create v1.22.19</span><br><span class="line">[1/4] Resolving packages...</span><br><span class="line">[2/4] Fetching packages...</span><br><span class="line">[3/4] Linking dependencies...</span><br><span class="line">[4/4] Building fresh packages...</span><br><span class="line">success Installed &quot;create-vite@4.4.1&quot; with binaries:</span><br><span class="line">      - create-vite</span><br><span class="line">      - cva</span><br><span class="line">√ Project name: ... partner-fronted</span><br><span class="line">√ Select a framework: » Vue</span><br><span class="line">√ Select a variant: » TypeScript</span><br><span class="line"></span><br><span class="line">Scaffolding project in D:\vue-proj\partner-fronted...</span><br></pre></td></tr></table></figure><h4 id="整合组件库">整合组件库</h4><p>整合组件库Vant：</p><p>按需引入Vant:</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add @vant/auto-import-resolver unplugin-vue-components -D</span><br></pre></td></tr></table></figure><h4 id="配置插件">配置插件</h4><p>如果是基于vite的项目，在<code>vite.config.js</code>文件中配置插件：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;defineConfig&#125; <span class="keyword">from</span> <span class="string">&#x27;vite&#x27;</span></span><br><span class="line"><span class="keyword">import</span> vue <span class="keyword">from</span> <span class="string">&#x27;@vitejs/plugin-vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Components <span class="keyword">from</span> <span class="string">&#x27;unplugin-vue-components/vite&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;VantResolver&#125; <span class="keyword">from</span> <span class="string">&#x27;@vant/auto-import-resolver&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// https://vitejs.dev/config/</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> defineConfig(&#123;</span><br><span class="line">    <span class="attr">plugins</span>: [vue(),</span><br><span class="line">        Components(&#123;</span><br><span class="line">            <span class="attr">resolvers</span>: [VantResolver()],</span><br><span class="line">        &#125;)],</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="安装vant">安装vant</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 通过 yarn 安装</span><br><span class="line">yarn add vant</span><br></pre></td></tr></table></figure><h4 id="尝试vant">尝试vant</h4><p>在App.vue里添加如下代码，如果有样式，则引入成功：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;van-button type=&quot;primary&quot;&gt;主要按钮&lt;/van-button&gt;</span><br><span class="line">  &lt;van-button type=&quot;success&quot;&gt;成功按钮&lt;/van-button&gt;</span><br><span class="line">  &lt;van-button type=&quot;default&quot;&gt;默认按钮&lt;/van-button&gt;</span><br><span class="line">  &lt;van-button type=&quot;warning&quot;&gt;警告按钮&lt;/van-button&gt;</span><br><span class="line">  &lt;van-button type=&quot;danger&quot;&gt;危险按钮&lt;/van-button&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>开发页面经验：</p><ol><li>多参考</li><li>从整体到局部</li><li>先想清楚页面要做成什么样子，再写代码</li></ol><h3 id="前端主页-组件概览">前端主页 + 组件概览</h3><p>设计</p><p>导航条：展示当前页面名称</p><p>主页搜索框 =&gt; 搜索页=&gt; 搜索结果页（标签筛选页）</p><p>内容：</p><p>tab栏：</p><ul><li>主页（推荐页 + 广告）<ul><li>banner</li><li>搜索框</li><li>推荐信息流</li></ul></li><li>搜索页</li><li>队伍</li><li>用户页（消息 + 考虑发邮件）</li></ul><h3 id="开发">开发</h3><p>删除 <code>HelloWorld.vue</code>。</p><p>很多页面要复用组件/样式，重复写很麻烦，不利于维护，所以要抽象一个通用的布局。</p><p>增加layouts文件夹，创建<code>BasicLayout.vue</code>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;van-nav-bar</span><br><span class="line">      title=&quot;标题&quot;</span><br><span class="line">      left-arrow</span><br><span class="line">      @click-left=&quot;onClickLeft&quot;</span><br><span class="line">      @click-right=&quot;onClickRight&quot;</span><br><span class="line">  &gt;</span><br><span class="line">    &lt;template #right&gt;</span><br><span class="line">      &lt;van-icon name=&quot;search&quot; size=&quot;18&quot;/&gt;</span><br><span class="line">    &lt;/template&gt;</span><br><span class="line">  &lt;/van-nav-bar&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">const onClickLeft = () =&gt; alert(&quot;left&quot;);</span><br><span class="line">const onClickRight = () =&gt; alert(&quot;right&quot;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><blockquote><p>界面出现乱码时，记得删除style.css</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;用户交友网站&quot;&gt;用户交友网站&lt;/h2&gt;
&lt;p&gt;介绍：帮助大家找到志同道合的伙伴，移动端H5&lt;/p&gt;
&lt;h2 id=&quot;需求分析&quot;&gt;需求分析&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;用户去添加标签，标签的分类（要有哪些标签，怎么把标签进行分类）&lt;/li&gt;
&lt;li&gt;主动搜索：允许用</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Gradle</title>
    <link href="http://example.com/2023/11/11/%E5%AE%89%E5%8D%93%E5%BC%80%E5%8F%91/Gradle/"/>
    <id>http://example.com/2023/11/11/%E5%AE%89%E5%8D%93%E5%BC%80%E5%8F%91/Gradle/</id>
    <published>2023-11-11T07:33:57.000Z</published>
    <updated>2023-11-11T08:34:45.997Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1>什么是Gradle</h1><p>Gradle构建工具是一个快速，可靠和灵活的开源构建自动化工具，具有优雅且可扩展的声明性构建语言。<br>在这个手册中，Gradle构建工具通常缩写为Gradle。</p><h1>为什么使用Gradle</h1><p>Gradle是一个广泛使用且成熟的工具，拥有活跃的社区和强大的开发生态系统。</p><ul><li><p>Gradle是JVM中最受欢迎的构建系统，也是Android和Kotlin Multi-Platform项目的默认构建系统。它拥有丰富的社区插件生态系统。</p></li><li><p>Gradle可以使用其内置功能，第三方插件或自定义构建逻辑自动化各种软件构建场景。</p></li><li><p>Gradle提供了高级别，声明式和富有表现力的构建语言，使得编写和阅读构建逻辑变得容易。</p></li><li><p>Gradle快速，可扩展，并可以构建任何大小和复杂度的项目。</p></li><li><p>Gradle能够在获得增量构建，构建缓存和并行执行等优化的同时产生可靠的结果。</p></li></ul><h2 id="Gradle支持的语言和框架">Gradle支持的语言和框架</h2><p>Gradle支持Android，Java，Kotlin，Groovy，Scala，JavaScript，C/C++</p><h2 id="合适的IDES">合适的IDES</h2><p>所有主流的IDES都支持Gradle，包括：Android Studio, IntelliJ IDEA, Visual Studio Code, Eclipse, and NetBeans.<br>你还可以通过终端中的命令行界面，或者通过持续继承服务器（CI）来调用Gradle。</p><h2 id="如何学习Gradle">如何学习Gradle</h2><p>Gradle用户手册是Gradle构建工具的官方文档。</p><p>入门教程：学习Gradle的基础知识以及使用Gradle构建应用程序的好处。</p><p>培训课程：前往课程页面注册免费的Gradle培训。</p><h2 id="使用命令行工具构建Gradle工程">使用命令行工具构建Gradle工程</h2><p>命令行页面是与Gradle互动的主要方法。</p><p>以下是执行和自定义Gradle命令行的参考。它还可用作编写脚本或者持续集成时的参考。</p><p>强烈推荐使用Gradle包装器，在以上示例中，将./gradlew或者gradlew.bat（在windows上）替代gradle</p><p>在命令行上执行Gradle将遵循以下结构：</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gradle [taskName...] [--option-name...]</span><br></pre></td></tr></table></figure><p>选项允许在任务名称之前和之后使用</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gradle [--option-name...] [taskName...]</span><br></pre></td></tr></table></figure><p>如果有多个要运行的任务，我们需要使用空格分隔它们：</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gradle [taskName1 taskName2...] [--option-name...]</span><br></pre></td></tr></table></figure><p>可以用或者不用等号来指定接收值的选项，但建议使用等号。</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gradle [...] --console=plain</span><br></pre></td></tr></table></figure><p>启用行为的选项具有指定反义的长格式选项，使用–no前缀，以下是一些对立选项。</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gradle [...] --build-cache</span><br><span class="line">gradle [...] --no-build-cache</span><br></pre></td></tr></table></figure><p>许多长格式选项有对应的短格式选项，以下是等价的。</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gradle --help</span><br><span class="line">gradle -h</span><br></pre></td></tr></table></figure><blockquote><p>许多命令行标志可以在gradle.properties文件中指定，以避免需要手动输入，请参阅&quot;构建配置环境指南&quot;以获取详细信息。</p></blockquote><h2 id="命令行工具的使用">命令行工具的使用</h2><p>以下章节描述了Gradle命令行页面的使用方式。<br>一些插件还会添加自己的命令行选项，例如为Java测试筛选添加的–test选项。有关如何为自己的任务暴露命令行选项的更多信息，请参阅&quot;声明命令行选项&quot;。</p><p>执行任务：<br>你可以在项目报告部分了解可用的项目和任务。</p><p>大多数构建支持一组通用的任务，称为声明周期任务。这些包括build、assemble和check任务。</p><p>要在根项目上执行名为myTask的任务，请输入：</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ gradle :myTask</span><br></pre></td></tr></table></figure><p>这将运行单个myTask及其所有的依赖项。</p><p>为任务设置选项<br>要向任务传递选项，请在任务名后面加上选项名称前缀&quot;–&quot;:</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ gradle exampleTask --exampleOption=exampleValue</span><br></pre></td></tr></table></figure><h2 id="区分任务选项和内置选项">区分任务选项和内置选项</h2><p>Gradle不会阻止任务注册与Gradle内置选项冲突的选项，比如–profile和–help</p><p>要想解决与Gradle内置选项冲突的任务选项，可以在命令中在任务名之前使用–分隔符</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ gradle [--built-in-option-name...] -- [taskName...] [--<span class="keyword">task</span>-option-name...]</span><br></pre></td></tr></table></figure><p>如果一个名为mytask的任务，它接受一个名为profile的选项：</p><p>在Gradle中，使用&quot;gradle mytask --profile&quot;，Gradle将–profile作为内置的Gradle选项进行接收。</p><p>在Gradle中，使用 gradle --mytask --profile，Gradle将–profile作为任务选项传递。</p><p>在多模块中执行任务：<br>在多项目构建中，可以使用冒号(:)来分隔子任务名称和任务名称来执行子项目任务，以下是从根目录运行时等效方式。</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gradle :subproject:taskName</span><br></pre></td></tr></table></figure><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gradle subproject:taskName</span><br></pre></td></tr></table></figure><p>你也可以使用仅包含任务名称的任务选择器来运行所有子项目的任务。</p><p>从根目录调用以下命令将运行所有子项目的测试任务。</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gradle test</span><br></pre></td></tr></table></figure><blockquote><p>一些任务选择器，比如 help 或者 dependencies，只会在项目上运行任务，而不会在子工程上运行。</p></blockquote><p>在子项目内部调用gradle时，应该省略项目名称。</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd subproject</span><br></pre></td></tr></table></figure><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gradle taskName</span><br></pre></td></tr></table></figure><blockquote><p>当从子项目目录执行Gradle Wrapper时，应该相对地引用gradlew，…/gradlew taskName</p></blockquote><h2 id="Executing-multiple-tasks">Executing multiple tasks</h2><p>You can also specify multiple tasks. The tasks’ dependencies determine the precise order of execution, and a task having no dependencies may execute earlier than it is listed on the command-line.</p><p>For example, the following will execute the test and deploy tasks in the order that they are listed on the command-line and will also execute the dependencies for each task.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gradle test deploy</span><br></pre></td></tr></table></figure><h2 id="Command-line-order-safety">Command line order safety</h2><p>Although Gradle will always attempt to execute the build quickly, command line ordering safety will also be honored.</p><p>For example, the following will execute clean and build along with their dependencies:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gradle clean build</span><br></pre></td></tr></table></figure><p>However, the intention implied in the command line order is that clean should run first and then build. It would be incorrect to execute clean after build, even if doing so would cause the build to execute faster since clean would remove what build created.</p><p>Conversely, if the command line order was build followed by clean, it would not be correct to execute clean before build. Although Gradle will execute the build as quickly as possible, it will also respect the safety of the order of tasks specified on the command line and ensure that clean runs before build when specified in that order.</p><p>Note that command line order safety relies on tasks properly declaring what they create, consume, or remove.</p><h2 id="Gradle实操">Gradle实操</h2><h3 id="你要构建什么">你要构建什么</h3><p>您将构建一个Java应用程序，该应用程序由一个应用程序和多个库项目组成。</p><h3 id="你需要什么">你需要什么</h3><ul><li>一个IDE，例如Intellij IDEA</li><li>Java开发套件 (JDK), 版本8以上</li><li>最新的Gradle</li></ul><h3 id="创建项目文件夹">创建项目文件夹</h3><p>Gradle附带了一个名为init的内置任务，该任务在一个空文件夹中初始化一个新的Gradle项目。init任务使用（也是内置的）wrapper任务来创建Gradle wrapper脚本gradlew。</p><p>开始的步骤就是创建一个文件夹并进入：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir demo</span><br><span class="line">$ cd demo</span><br></pre></td></tr></table></figure><h3 id="运行初始的任务">运行初始的任务</h3><p>在新的项目目录中，在终端中使用以下命令运行init任务：gradle init。<br>出现提示时，选择2:application项目类型和3:Java作为实现语言。然后，选择2：添加库项目。接下来，您可以选择DSL来编写构建脚本——1:Groovy或2:Kotlin。对于其他问题，请按enter键以使用默认值。</p><p>输出如下所示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">$ gradle init</span><br><span class="line"></span><br><span class="line">Select type of project to generate:</span><br><span class="line">  1: basic</span><br><span class="line">  2: application</span><br><span class="line">  3: library</span><br><span class="line">  4: Gradle plugin</span><br><span class="line">Enter selection (default: basic) [1..4] 2</span><br><span class="line"></span><br><span class="line">Split functionality across multiple subprojects?:</span><br><span class="line">   1: no - only one application project</span><br><span class="line">   2: yes - application and library projects</span><br><span class="line">Enter selection (default: no - only one application project) [1..2] 2</span><br><span class="line"></span><br><span class="line">Select implementation language:</span><br><span class="line">  1: C++</span><br><span class="line">  2: Groovy</span><br><span class="line">  3: Java</span><br><span class="line">  4: Kotlin</span><br><span class="line">  5: Scala</span><br><span class="line">  6: Swift</span><br><span class="line">Enter selection (default: Java) [1..6] 3</span><br><span class="line"></span><br><span class="line">Select build script DSL:</span><br><span class="line">  1: Groovy</span><br><span class="line">  2: Kotlin</span><br><span class="line">Enter selection (default: Groovy) [1..2] 1</span><br><span class="line"></span><br><span class="line">Select test framework:</span><br><span class="line">  1: JUnit 4</span><br><span class="line">  2: TestNG</span><br><span class="line">  3: Spock</span><br><span class="line">  4: JUnit Jupiter</span><br><span class="line">Enter selection (default: JUnit 4) [1..4]</span><br><span class="line"></span><br><span class="line">Project name (default: demo):</span><br><span class="line">Source package (default: demo):</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">BUILD SUCCESSFUL</span><br><span class="line">2 actionable tasks: 2 executed</span><br></pre></td></tr></table></figure><p>init任务生成具有以下结构的新项目：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">├── gradle 1</span><br><span class="line">│   └── wrapper</span><br><span class="line">│       ├── gradle-wrapper.jar</span><br><span class="line">│       └── gradle-wrapper.properties</span><br><span class="line">├── gradlew 2 </span><br><span class="line">├── gradlew.bat 2</span><br><span class="line">├── settings.gradle 3</span><br><span class="line">├── buildSrc</span><br><span class="line">│   ├── build.gradle 4</span><br><span class="line">│   └── src</span><br><span class="line">│       └── main</span><br><span class="line">│           └── groovy 5</span><br><span class="line">│               ├── demo.java-application-conventions.gradle</span><br><span class="line">│               ├── demo.java-common-conventions.gradle</span><br><span class="line">│               └── demo.java-library-conventions.gradle</span><br><span class="line">├── app</span><br><span class="line">│   ├── build.gradle 6</span><br><span class="line">│   └── src</span><br><span class="line">│       ├── main 7</span><br><span class="line">│       │   └── java</span><br><span class="line">│       │       └── demo</span><br><span class="line">│       │           └── app</span><br><span class="line">│       │               ├── App.java</span><br><span class="line">│       │               └── MessageUtils.java</span><br><span class="line">│       └── test 8</span><br><span class="line">│           └── java</span><br><span class="line">│               └── demo</span><br><span class="line">│                   └── app</span><br><span class="line">│                       └── MessageUtilsTest.java</span><br><span class="line">├── list</span><br><span class="line">│   ├── build.gradle 6</span><br><span class="line">│   └── src 7</span><br><span class="line">│       ├── main </span><br><span class="line">│       │   └── java</span><br><span class="line">│       │       └── demo</span><br><span class="line">│       │           └── list</span><br><span class="line">│       │               └── LinkedList.java</span><br><span class="line">│       └── test 8 </span><br><span class="line">│           └── java</span><br><span class="line">│               └── demo</span><br><span class="line">│                   └── list</span><br><span class="line">│                       └── LinkedListTest.java</span><br><span class="line">└── utilities</span><br><span class="line">    ├── build.gradle 6</span><br><span class="line">    └── src</span><br><span class="line">        └── main 7</span><br><span class="line">            └── java</span><br><span class="line">                └── demo</span><br><span class="line">                    └── utilities</span><br><span class="line">                        ├── JoinUtils.java</span><br><span class="line">                        ├── SplitUtils.java</span><br><span class="line">                        └── StringUtils.java</span><br></pre></td></tr></table></figure><ol><li>为Gradle wrapper文件生成的文件夹</li><li>Gradle wrapper 启动脚本</li><li>用于定义工程名称和子项目的设置文件</li><li>buildSrc的构建脚本，用于配置构建逻辑的依赖项</li><li>用Groovy或Kotlin DSL编写插件的源文件夹</li><li>构建三个子项目app、list、utilities的脚本</li><li>每个子项目中的Java源文件夹</li><li>子项目中的Java测试源文件夹</li></ol><h3 id="理解什么是Gradle-Wrapper">理解什么是Gradle Wrapper</h3><p>Gradle包装器是启动Gradle构建的最好方式，包装器会下载（如果需要）并调用构建中声明的特定版本的gradle。<br>在您新创建的项目中，首先查看Gradle wrapper使用的文件。包括适用于macOS和Linux的shell脚本和适用于Windows的批处理脚本。这些脚本允许您运行Gradle build而无需在系统上安装Gradle，它还有助于确保不同开发人员之间以及本地和CI机器之间使用相同版本的Gradle进行构建。<br>然后，您将不直接调用Gradle，而使用Gradle Wrapper。</p><p>Step 3. 调用gradle wrapper<br>通过输入以下的命令来使用wrapper：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ./gradlew build</span><br></pre></td></tr></table></figure><p>在Windows中，命令是：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ gradlew.bat build</span><br></pre></td></tr></table></figure><p>当你第一次运行Wrapper时，如果你的机器上没有安装Gradle，它将下载并缓存Gradle的二进制文件。<br>在这种情况下，我们通过Wrapper调用Gradle来构建我们的项目，因此我们可以看到应用程序<br>目录现在包含一个新的生成文件夹：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ cd app</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ls -al</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">drwxr-xr-x 10 gradle-user staff 320 May 24 18:07 build</span><br><span class="line">-rw-r--r-- 1 gradle-user staff 862 May 24 17:45 build.gradle.kts</span><br><span class="line">drwxr-xr-x 4 gradle-user staff 128 May 24 17:45 src</span><br></pre></td></tr></table></figure><p>如果没有其他的设置，所有通过build生成的文件都会进入build文件夹。</p><h2 id="Gradle中定义常量">Gradle中定义常量</h2><p>我们可以在Gradle中定义常量：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">buildTypes &#123;</span><br><span class="line">        debug &#123;</span><br><span class="line">            <span class="comment">// 定义gradle常量</span></span><br><span class="line">            buildConfigField(<span class="string">&quot;boolean&quot;</span>, <span class="string">&quot;LOG_DEBUG&quot;</span>, <span class="string">&quot;true&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后，我们就可以在BuildConfig类中看到我们定义的常量：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">BuildConfig</span> </span>&#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="comment">// Field from build type: debug</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">boolean</span> LOG_DEBUG = <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>但这里需要注意的是字符串需要转义：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">    buildTypes &#123;</span><br><span class="line">        debug &#123;</span><br><span class="line">            <span class="comment">// 定义gradle常量</span></span><br><span class="line">            buildConfigField(<span class="string">&quot;boolean&quot;</span>, <span class="string">&quot;LOG_DEBUG&quot;</span>, <span class="string">&quot;true&quot;</span>)</span><br><span class="line">            buildConfigField(<span class="string">&quot;String&quot;</span>, <span class="string">&quot;LOG_TAG&quot;</span>, <span class="string">&quot;\&quot;Partner\&quot;&quot;</span>)</span><br><span class="line">            buildConfigField(<span class="string">&quot;String&quot;</span>, <span class="string">&quot;SP_NAME&quot;</span>, <span class="string">&quot;\&quot;Config\&quot;&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="提升Gradle构建的十大技巧">提升Gradle构建的十大技巧</h2><ul><li>使用最新版的Gradle插件</li><li>避免激活旧的Multidex</li><li>急用Multidex apk构建</li></ul><p><img src="C:%5CUsers%5C86185%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20231111155602979.png" alt="image-20231111155602979"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// 调试</span><br><span class="line">if (rootProject.hasProperty(&quot;devBuild&quot;))&#123;</span><br><span class="line">    splits.abi.enable=false</span><br><span class="line">    splits.density.enable=false</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>最小化打包资源</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 调试</span><br><span class="line">resConfig(&quot;zh&quot;)</span><br></pre></td></tr></table></figure><ul><li>禁用PNG压缩</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// 调试</span><br><span class="line">if (rootProject.hasProperty(&quot;devBuild&quot;)) &#123;</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">    //禁用PNG压缩</span><br><span class="line">    aaptOptions.cruncherEnabled = false</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>PNG转换为webp</li></ul><h2 id="开发Gradle插件">开发Gradle插件</h2><h3 id="开发自定义Gradle插件">开发自定义Gradle插件</h3><p>Gradle插件打包了可重复使用的构建的逻辑片段，可在许多不同的项目和构建中使用。Gradle允许您实现自己的插件，以便重复使用您的构建逻辑并与其他人分享。<br>您可以使用任何喜欢的语言来实现Gradle插件，最后都会转换为JVM字节码，在我们的实例中，我们将在独立插件项目中使用Java作为实现语言，并在构建脚本中使用Groovy和Kotlin，通常情况下，使用Java或者Kotlin实现的插件的性能将高于使用Groovy实现的相同的插件。</p><p>打包插件：<br>有这些地方您可以放置插件的源代码。</p><p>Build script：<br>您可以将插件的源代码直接放在构建脚本中。这样做的好处是插件会自动编译并包含在构建脚本的类路径中，而不需要您做任何事情。然而，该插件在构建脚本之外是不可见的，因此不能在定义插件的构建脚本之外重用插件。</p><p>buildSrc project<br>你可以将插件的源代码放在<em>rootProjectDir/buildSrc/src/main/java</em>，或者<em>rootProjectDir/buildSrc/src/main/groovy</em>和<em>rootProjectDir/buildSrc/src/main/kotlin</em>下，<br>Gradle将会负责编译和测试插件，并使其在构建脚本的类路径中可用。该插件对构建中的每个构建脚本都可见。但是，它在构建之外不可见，因此，您无法在定义插件的构建之外重用它。</p><p>独立项目<br>你可以为你的插件创建一个单独的项目，该项目会生成并发布一个JAR文件，你可以在多个构建中使用它，并与他人共享。通常，这个JAR文件可能包含一些插件，或将多个相关的任务类打包到一个库中，或者两者结合使用。在我们的示例中，我们将从构建脚本中开始，以保证事情简单，然后，我们将看看如何创建一个独立的项目。</p><h3 id="编写一个简单的插件">编写一个简单的插件</h3><p>要创建一个Gradle插件，你需要编写一个实现Plugin接口的类，当该插件应用到一个项目上时，Gradle会创建插件类的一个实例并调用该实例的Plugin.apply()方法。项目对象被作为参数传递，插件可以使用它来根据需要配置项目。以下示例包含一个问候插件，它向项目添加了一个hello任务。</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GreetingPlugin</span> <span class="keyword">implements</span> <span class="title">Plugin</span>&lt;<span class="title">Project</span>&gt; &#123;</span></span><br><span class="line">  <span class="keyword">void</span> apply(Project project) &#123;</span><br><span class="line">  project.task(<span class="string">&#x27;hello&#x27;</span>) &#123;</span><br><span class="line">  doLast &#123;</span><br><span class="line">  println <span class="string">&#x27;Hello from the GreetingPlugin&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 应用插件</span></span><br><span class="line">apply <span class="attr">plugin:</span> GreetingPlugin</span><br></pre></td></tr></table></figure><p>在命令行里输入：</p><blockquote><p>gradle -q hello</p></blockquote><p>输出为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hello from the GreetingPlugin</span><br></pre></td></tr></table></figure><p>需要注意的一点是，为每个应用它的项目创建了一个插件的新实例，另外，请注意Plugin类是一种泛型类型。这个示例中将Project类型作为类型参数传递给它。插件也可以接收Settings类型的参数，这样插件可以在设置脚本中应用，或接收Gradle类型的参数，这样插件可以在初始化脚本中应用。</p><h3 id="使插件可配置">使插件可配置</h3><p>大多数插件为构建脚本和其他插件提供了一些配置选项，以用于自定义插件的工作方式。插件使用扩展对象来实现这一点。Gradle项目有一个关联的ExtensionContainer对象，该对象包含插件的所有设置和属性已应用于该项目的。您可以通过添加扩展对象。扩展对象只是一个具有JavaBean属性的对象<br>其表示配置。让我们为项目添加一个简单的扩展对象。在这里，我们将问候语扩展对象添加到<br>项目，它允许您配置问候语。</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">GreetingPluginExtension</span> &#123;</span></span><br><span class="line">  Property&lt;String&gt; getMessage()</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GreetingPlugin</span> <span class="keyword">implements</span> <span class="title">Plugin</span>&lt;<span class="title">Project</span>&gt; &#123;</span></span><br><span class="line"><span class="keyword">void</span> apply(Project project) &#123;</span><br><span class="line"><span class="comment">// Add the &#x27;greeting&#x27; extension object</span></span><br><span class="line"><span class="keyword">def</span> extension = project.extensions.create(<span class="string">&#x27;greeting&#x27;</span>,GreetingPluginExtension)</span><br><span class="line">extension.message.convention(<span class="string">&#x27;Hello from GreetingPlugin&#x27;</span>)</span><br><span class="line"><span class="comment">// Add a task that uses configuration from the extension object</span></span><br><span class="line">project.task(<span class="string">&#x27;hello&#x27;</span>) &#123;</span><br><span class="line">doLast &#123;</span><br><span class="line">println extension.message.get()</span><br><span class="line">  &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">apply <span class="attr">plugin:</span> GreetingPlugin</span><br><span class="line"><span class="comment">// Configure the extension</span></span><br><span class="line">greeting.message = <span class="string">&#x27;Hi from Gradle&#x27;</span></span><br></pre></td></tr></table></figure><p>Most plugins offer some configuration options for build scripts and other plugins to use to<br>customize how the plugin works. Plugins do this using extension objects. The Gradle Project has an<br>associated ExtensionContainer object that contains all the settings and properties for the plugins<br>that have been applied to the project. You can provide configuration for your plugin by adding an<br>extension object to this container. An extension object is simply an object with Java Bean properties<br>that represent the configuration.<br>Let’s add a simple extension object to the project. Here we add a greeting extension object to the<br>project, which allows you to configure the greeting.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h1&gt;什么是Gradle&lt;/h1&gt;
&lt;p&gt;Gradle构建工具是一个快速，可靠和灵活的开源构建自动化工具，具有优雅且可扩展的声明性构建语言。&lt;br&gt;
在这个手册中，Gradle构建工具通常缩写为Gradle。&lt;/p&gt;
&lt;h1&gt;为什么使用Gradle&lt;/</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Java NIO</title>
    <link href="http://example.com/2023/11/07/Java%E5%9F%BA%E7%A1%80/Java-NIO/"/>
    <id>http://example.com/2023/11/07/Java%E5%9F%BA%E7%A1%80/Java-NIO/</id>
    <published>2023-11-07T13:07:16.000Z</published>
    <updated>2023-11-15T15:34:40.850Z</updated>
    
    <content type="html"><![CDATA[<h1>Java NIO概述</h1><p>Java NIO是从Java1.4版本引入的一个新的API，可以代替标准的Java IO API。NIO支持面向缓冲区的，基于通道的IO操作。NIO将以更加高效的方式进行文件的读写操作。</p><h2 id="阻塞IO">阻塞IO</h2><p>通常在进行同步I/O操作时，如果读取数据，代码会阻塞直至有可供读取的数据，同样，写入调用会阻塞直至数据能够写入。传统的Server/Client模式会基于TPR（Thread Per Request），服务器会为每个客户端建立一个线程，由该线程单独负责处理一个客户请求。这种模式带来的一个问题就是线程数量的剧增。大量的线程会增大服务器的开销。大多数的实现为了避免这个问题。都采用了线程池模型，并设置线程池线程的最大数量，这带来了新的问题，如果线程池中有100个线程，而有100个用户都在进行大文件下载，会导致第101个用户的请求无法响应。</p><h2 id="非阻塞IO">非阻塞IO</h2><p>NIO中非阻塞IO采用了基于Reactor模式的工作方式，I/O调用不会被阻塞，相反是注册感兴趣的特定I/O事件，如可读数据到达，新的套接字连接等等。在发生特定事件时，系统再通知我们，NIO中实现非阻塞I/O的核心对象就是Selector。</p><p>Selector就是注册各种I/O事件地方，而且当我们感兴趣的事情发生时，就是这个对象告诉我们所发生的事件，如下图所示：</p><p>从图中可以看出，当有读或写等任何注册的事件发生时，可以从Selector中获取相应的SelectionKey，同时从SelectionKey中可以找到发生的事件和该事件所发生的具体的SelectableChannel，以获取到客户端发送过来的数据。</p><p>非阻塞指的是IO事件本身不阻塞，但是获取IO事件的select()方法是需要阻塞等待的，区别是阻塞的IO会阻塞在IO操作上，NIO阻塞在事件获取上，没有事件就没有IO，从高层次看IO就不阻塞了，也就是说只有IO已经发生那么我们才评估IO是否阻塞，但是select()阻塞的时候IO还没有发生，何谈IO的阻塞呢？NIO的本质是延迟IO操作到真正发生IO的时候，而不是以前的只要IO流打开了就一直等待IO操作。</p><table><thead><tr><th>IO</th><th>NIO</th></tr></thead><tbody><tr><td>面向流（Stream Oriented）</td><td>面向缓冲区（Buffer Oriented）</td></tr><tr><td>阻塞IO（Blocking IO）</td><td>非阻塞IO（Non Blocking IO）</td></tr><tr><td>（无）</td><td>选择器</td></tr></tbody></table><h2 id="NIO概述">NIO概述</h2><p>Java NIO由以下几个核心部分组成：</p><ul><li>Channels</li><li>Buffers</li><li>Selectors</li></ul><p>虽然Java NIO中除此之外还有很多类和组件，但Channel，Buffer和Selector构成了核心的API，其他组件，如Pipe和FileLock，只不过是与三个核心组件共同使用的工具类。</p><h3 id="Channel">Channel</h3><p>首先说一下Channel，可以翻译为&quot;通道&quot;。Channel和IO中的Stream（流）是差不多一个等级的。只不过流是单向的，譬如InputStream，OutputStream，而Channel是双向的，既可以用来进行读操作，又可以进行写操作。</p><p>NIO的主要实现有：FileChannel，DatagramChannel，SocketChannel和ServerSocketChannel，这里看名字就可以猜出来：分别对应文件IO，UDP和TCP（Server和Client）</p><h3 id="Buffer">Buffer</h3><p>NIO中的关键Buffer实现有：ByteBuffer，CharBuffer，DoubleBuffer，FloatBuffer，IntBuffer，LongBuffer，ShortBuffer，分别对应基本数据类型：byte，char，double，float，int，long，short。</p><h3 id="Selector">Selector</h3><p>Selector运行单线程处理多个Channel，如果你的应用打开了多个通道，但每个连接的流量都很低，使用Selector就会很方便。例如在一个聊天服务器中，要使用Selector，得向Selector注册Channel，然后调用它的select()方法，这个方法会一直阻塞到某个注册的通道有事件就绪，一旦这个方法返回，线程就可以处理这些事件，事件的例子有如新的连接进来，数据接收等。</p><h2 id="Channel概述">Channel概述</h2><p>Channel是一个通道，可以通过它读取和写入数据，它就像水管一样，网络数据通过Channel读取和写入。通道与流的不同之处在于通道是双向的，流只是在一个方向上移动（一个流必须是InputStream货或者OutputStream的子类），而且通道可以用于读，写或者同时用于读写，因为Channel是全双工的，所以它可以比流更好地映射底层操作系统的API。</p><p>NIO中通过channel封装了对数据源的操作，通过channel我们可以操作数据源，但又不必关心数据源的具体物理结构。这个数据源可能是多种的。比如，可以是文件，也可以是网络socket。在大多数应用中，channel与文件描述符或者socket是一一对应的，Channel用于在字节缓冲区和位于通道另一侧的实体（通常是一个文件或套接字）之间有效的传输数据。</p><p><strong>channel接口源码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Channel</span> <span class="keyword">extends</span> <span class="title">Closeable</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Tells whether or not this channel is open.</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span> true if,only if this channel is open</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isOpen</span><span class="params">()</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Closes this channel</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException If an I/O error occurs</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> <span class="keyword">throws</span> IOException</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>与缓冲区不同，通道API主要由接口指定，不同的操作系统上通道实现（Channel Implementation）会有根本性的差异，所以通道API仅仅描述了可以做什么，因此很自然地，通道实现经常使用操作系统的本地代码，通道接口允许您以一种受控且可移植的方式来访问底层的I/O服务。</p><p>Channel是一个对象，可以通过它读取和写入数据，拿NIO与原来的I/O做个比较，通道就像是流，所有数据都通过Buffer对象来处理，您永远不会将字节直接写入通道中，相反，您是将数据写入包含一个或者多个字节的缓冲区。同样，您不会直接从通道中读取字节，而是将数据从通道读入到缓冲区。再从缓冲区获取这个字节。</p><p>Java NIO的通道类似流，但又有些不同：</p><ul><li>既可以从通道中读取数据，又可以写数据到通道，但流的读写通常是单向的。</li><li>通道可以异步地读写。</li><li>通道中的数据总是要先读到一个Buffer，或者总是要从一个Buffer中写入。</li></ul><h3 id="Channel实现">Channel实现</h3><p>下面是Java NIO中最重要的Channel的实现：</p><ul><li>FileChannel</li><li>DatagramChannel</li><li>SocketChannel</li><li>ServerSocketChannel</li></ul><p>1）FileChannel从文件中读写数据。</p><ol start="2"><li><p>DatagramChannel能通过UDP读写网络中的数据。</p></li><li><p>SocketChannel能通过TCP读写网络中的数据。</p></li><li><p>ServerSocketChannel 可以监听新进来的TCP连接，像Web服务器那样，对每一个新进来的连接都会创建一个SocketChannel。</p></li></ol><p>正如你看到的，这些通道涵盖了UDP，TCP网络IO，以及文件IO。</p><h3 id="FileChannel介绍和示例">FileChannel介绍和示例</h3><p>FileChannel类可以实现常用的read，write以及scatter/gather操作，同时它也提供了很多专用于文件的新方法。这些方法中的许多都是我们所熟悉的文件操作。</p><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>int read(ByteBuffer dst)</td><td>从Channel中读取数据到ByteBuffer</td></tr><tr><td>long read(ByteBuffer[] dsts)</td><td>将Channel中的数据&quot;分散&quot;到ByteBuffer[]</td></tr><tr><td>int write(ByteBuffer src)</td><td>将ByteBuffer中的数据写入到Channel</td></tr><tr><td>long write(ByteBuffer[] srcs)</td><td>将ByteBuffer[]中的数据&quot;聚集&quot;到Channel</td></tr><tr><td>long position()</td><td>返回此通道的文件位置</td></tr><tr><td>FileChannel position(long p)</td><td>设置此通道的文件位置</td></tr><tr><td>long size()</td><td>返回此通道的文件的当前大小</td></tr><tr><td>FileChannel truncate(long s)</td><td>将此通道的文件截取为给定大小</td></tr><tr><td>void force(boolean metaData)</td><td>强制将所有对此通道的文件更新写入到存储设备中</td></tr></tbody></table><p>下面是一个使用FileChannel读取数据到Buffer中的示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileChannelDemo1</span> </span>&#123;</span><br><span class="line">    <span class="comment">// FileChannel读取数据到buffer中</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 1. 创建FileChannel</span></span><br><span class="line">        RandomAccessFile accessFile =</span><br><span class="line">                <span class="keyword">new</span> RandomAccessFile(<span class="string">&quot;D:\\springboot-proj\\multi-thread\\01.txt&quot;</span>, <span class="string">&quot;rw&quot;</span>);</span><br><span class="line">        FileChannel channel = accessFile.getChannel();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 创建Buffer</span></span><br><span class="line">        ByteBuffer buf = ByteBuffer.allocate(<span class="number">1024</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3. 读取数据到buffer中</span></span><br><span class="line">        <span class="keyword">int</span> bytesRead = channel.read(buf);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (bytesRead != -<span class="number">1</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;读取了&quot;</span> + bytesRead);</span><br><span class="line">            <span class="comment">// 读取的转换</span></span><br><span class="line">            buf.flip();</span><br><span class="line">            <span class="keyword">while</span> (buf.hasRemaining()) &#123;</span><br><span class="line">                System.out.println((<span class="keyword">char</span>) buf.get());</span><br><span class="line">            &#125;</span><br><span class="line">            buf.clear();</span><br><span class="line">            bytesRead = channel.read(buf);</span><br><span class="line">        &#125;</span><br><span class="line">        accessFile.close();</span><br><span class="line">        System.out.println(<span class="string">&quot;结束了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="FileChannel操作详解">FileChannel操作详解</h3><h4 id="打开FileChannel">打开FileChannel</h4><p>在使用FileChannel之前，必须先打开它。但是，我们无法直接打开一个FileChannel，需要通过一个InputStream、OutputStream或者RandomAccessFile来获取一个FileChannel实例，下面是通过RandomAccessFile打开FileChannel的示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">RandomAccessFile accessFile =</span><br><span class="line">                <span class="keyword">new</span> RandomAccessFile(<span class="string">&quot;D:\\springboot-proj\\multi-thread\\01.txt&quot;</span>, <span class="string">&quot;rw&quot;</span>);</span><br><span class="line">        FileChannel inChannel = accessFile.getChannel();</span><br></pre></td></tr></table></figure><h4 id="从FileChannel读取数据">从FileChannel读取数据</h4><p>调用多个read()方法之一从FileChannel中读取数据。如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ByteBuffer buf = ByteBuffer.allocate(<span class="number">48</span>);</span><br><span class="line"><span class="keyword">int</span> bytesRead = inChannel.read(buf)</span><br></pre></td></tr></table></figure><p>首先，分配一个Buffer，从FileChannel中读取的数据将被读到Buffer中，然后，调用FileChannel.read()方法，该方法将数据从FileChannel读取到Buffer中，read()方法返回的int值，表示有多少个字节被读取到了Buffer中，如果返回-1，表示到了文件末尾。</p><h4 id="向FileChannel写数据">向FileChannel写数据</h4><p>使用FileChannel.write()方法向FileChannel写数据，该方法的参数是一个Buffer。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileChannelDemo2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 打开FileChannel</span></span><br><span class="line">        RandomAccessFile randomAccessFile</span><br><span class="line">                = <span class="keyword">new</span> RandomAccessFile(<span class="string">&quot;D:\\springboot-proj\\multi-thread\\01.txt&quot;</span>, <span class="string">&quot;rw&quot;</span>);</span><br><span class="line">        FileChannel channel = randomAccessFile.getChannel();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建Buffer对象</span></span><br><span class="line">        ByteBuffer byteBuffer = ByteBuffer.allocate(<span class="number">1024</span>);</span><br><span class="line"></span><br><span class="line">        String newData = <span class="string">&quot;data heima&quot;</span>;</span><br><span class="line"></span><br><span class="line">        byteBuffer.clear();</span><br><span class="line"></span><br><span class="line">        byteBuffer.put(newData.getBytes());</span><br><span class="line"></span><br><span class="line">        byteBuffer.flip();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (byteBuffer.hasRemaining()) &#123;</span><br><span class="line">            channel.write(byteBuffer);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        channel.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>注意：FileChannel.write()是在while循环中调用的，因为无法保证write()方法一次能向FileChannel写入多少字节，因此需要重复调用write()方法，直到Buffer中已经没有尚未写入通道的字节。</p><h4 id="关闭FileChannel">关闭FileChannel</h4><p>用完FileChannel后必须将其关闭：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">inChannel.close();</span><br></pre></td></tr></table></figure><h4 id="FileChannel的position方法">FileChannel的position方法</h4><p>有时可能需要在FileChannel的某个特定位置进行数据的读或者写操作。可以通过调用position()方法获取FileChannel的当前位置，也可以通过调用position(long pos)方法设置FileChannel的当前位置。</p><p>这里有两个例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">long</span> pos = channel.position();</span><br><span class="line">channel.position(pos + <span class="number">123</span>)</span><br></pre></td></tr></table></figure><p>如果将位置设置在文件结束符之后，然后试图从文件通道中读取数据，读方法将返回1（文件结束标志）。</p><p>如果将位置设置在文件结束符之后，然后向通道中写数据，文件将撑大到当前位置并写入数据。这可能导致&quot;文件空洞&quot;，磁盘上物理文件中写入的数据间有空隙。</p><h3 id="FileChannel的size方法">FileChannel的size方法</h3><p>FileChannel实例的size()方法将返回该实例所关联文件的大小，如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">long</span> fileSize = channel.size();</span><br></pre></td></tr></table></figure><h3 id="FileChannel的truncate方法">FileChannel的truncate方法</h3><p>可以使用FileChannel.truncate()方法截取一个文件。截取文件时，文件将中指定长度后面的部分将被删除。如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">channel.truncate(<span class="number">1024</span>);</span><br></pre></td></tr></table></figure><p>这个例子截取文件的前1024个字节。</p><h3 id="FileChannel的force方法">FileChannel的force方法</h3><p>FileChannel.force()方法将通道里尚未写入磁盘的数据强制写到磁盘上，出于性能方面的考虑，操作系统会将数据缓存到内存中，所以无法保证写入到FileChannel里的数据一定会即时写道磁盘上，要保证这一点，需要调用force()方法。</p><p>force()方法有一个boolean类型的参数，指明是否同时将文件元数据（权限信息等）写道磁盘上。</p><h3 id="FileChannel的transferTo和transferFrom方法">FileChannel的transferTo和transferFrom方法</h3><p>通道之间的数据传输：</p><p>如果两个通道中有一个是FileChannel，那你可以直接将数据从一个channel传输到另外一个channel。</p><p>FileChannel的transfrom()方法可以将数据从源通道传输到FileChannel中（译者注：这个方法在JDK文档的解释为将字节从给定的可读取字节通道传输到此通道的文件中）。下面是一个FileChannel完成文件间的复制的例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 通道之间数据的传输</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileChannelDemo3</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        RandomAccessFile aFile =</span><br><span class="line">                <span class="keyword">new</span> RandomAccessFile(<span class="string">&quot;D:\\springboot-proj\\multi-thread\\01.txt&quot;</span>, <span class="string">&quot;rw&quot;</span>);</span><br><span class="line"></span><br><span class="line">        FileChannel fromChannel = aFile.getChannel();</span><br><span class="line"></span><br><span class="line">        RandomAccessFile bFile = <span class="keyword">new</span> RandomAccessFile(<span class="string">&quot;D:\\springboot-proj\\multi-thread\\02.txt&quot;</span>, <span class="string">&quot;rw&quot;</span>);</span><br><span class="line"></span><br><span class="line">        FileChannel toChannel = bFile.getChannel();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">long</span> position = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">long</span> count = fromChannel.size();</span><br><span class="line"></span><br><span class="line">        toChannel.transferFrom(fromChannel, position, count);</span><br><span class="line"></span><br><span class="line">        aFile.close();</span><br><span class="line">        bFile.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;Java NIO概述&lt;/h1&gt;
&lt;p&gt;Java NIO是从Java1.4版本引入的一个新的API，可以代替标准的Java IO API。NIO支持面向缓冲区的，基于通道的IO操作。NIO将以更加高效的方式进行文件的读写操作。&lt;/p&gt;
&lt;h2 id=&quot;阻塞IO&quot;&gt;阻塞IO&lt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Gitlab</title>
    <link href="http://example.com/2023/11/04/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/Gitlab/"/>
    <id>http://example.com/2023/11/04/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/Gitlab/</id>
    <published>2023-11-04T09:48:30.000Z</published>
    <updated>2023-11-05T23:24:23.352Z</updated>
    
    <content type="html"><![CDATA[<h1>传统应用发布模式</h1><ul><li>开发团队</li></ul><p>在开发环境中完成软件开发，单元测试，测试通过，提交到代码版本管理库</p><ul><li>运维团队</li></ul><p>把应用部署到测试环境，供QA团队测试，测试通过后部署到生产环境。</p><ul><li>QA团队</li></ul><p>进行测试，测试通过后通知部署人员发布到生产环境。</p><h2 id="代码版本管理">代码版本管理</h2><p>Gitlab主要有以下功能。</p><ul><li>代码审查</li><li>问题跟踪</li><li>动态订阅</li><li>易于扩展</li><li>项目wiki</li><li>多角色项目管理</li><li>项目代码在线预览</li><li>CI工具集成</li></ul><h2 id="持续集成">持续集成</h2><p>jenkins主要有以下功能。</p><ul><li>可扩展自动化服务器</li><li>安装配置简单</li><li>丰富的插件库</li><li>分布式架构设计</li><li>支持所有的平台</li><li>可视化管理界面</li></ul><h2 id="Gitlab内置持续集成">Gitlab内置持续集成</h2><p>持续集成CI</p><ul><li>集成团队每个开发人员提交的代码到代码存储库中。</li><li>开发人员在Merge或者Pull请求合并拉取新代码。</li><li>在提交或者合并到代码存储库之前，会触发了构建，测试和新代码验证的管道。</li><li>CI可帮助您在开发周期的早期发现并减少错误。</li></ul><p>持续交付</p><ul><li>可通过结构化的部署管道确保将经过CI验证的代码交付给您的应用程序。</li><li>CD可以将经过验证的代码更快的交付给您的程序。</li></ul><h2 id="GitLab-CI-CD组件">GitLab CI/CD组件</h2><p>GitLab CI/CD</p><ul><li>GitLab的一部分，GitLab是一个Web应用程序，具有将其状态存储在数据库中的API</li><li>除了GitLab的所有功能之外，它还管理项目/构建并提供了一个不错的用户界面</li></ul><p>GitLab Runner</p><ul><li>是一个处理构建的应用程序。</li><li>它可以单独部署，并通过API与GitLab CI/CD一起使用。</li></ul><p>.gitlab-ci.yml</p><ul><li>为了运行测试，至少需要一个GitLab实例和一个Gitlab Runner。</li></ul><h2 id="GitLab安装">GitLab安装</h2><ul><li>下载GitLab</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://mirrors.tuna.tsinghua.edu.cn/gitlab-ce/yum/el7/gitlab-ce-15.4.2-ce.0.el7.x86_64.rpm</span><br></pre></td></tr></table></figure><ul><li>安装包</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpm -ivh gitlab-ce-15.4.2-ce.0.el7.x86_64.rpm</span><br></pre></td></tr></table></figure><ul><li>配置</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/gitlab.rb   # 编辑站点地址</span><br><span class="line">gitlab-ctl reconfigure  # 配置</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#服务控制</span><br><span class="line">gitlab-ctl start </span><br><span class="line">gitlab-ctl status</span><br><span class="line">gitlab-ctl stop </span><br></pre></td></tr></table></figure><h2 id="GitLab添加组，创建用户，创建项目">GitLab添加组，创建用户，创建项目</h2><ol><li>创建组</li></ol><p>使用管理员root创建组，一个组里边可以有多个项目分支，可以将开发添加到组里边进行设置权限，不同的组就是公司不同项目或者服务模块，不同的组添加不同的开发即可实现对开发设置权限的管理。</p><ol start="2"><li>设置权限</li></ol><p>Guest：可以创建issue，发布评论，不能读写版本库</p><p>Reporter：可以克隆代码，不能提交，QA，PM可以赋予这个权限</p><p>Developer：可以克隆代码，开发，提交，push，普通开发可以赋予这个权限。</p><p>Maintainer：可以创建项目，添加tag，保护分支，添加项目成员，编辑项目，核心开发可以赋予这个权限</p><p>Owner：可以设置项目访问权限 - Visibility Level，删除项目，迁移项目，管理组成员，开发组组长可以赋予这个权限。</p><h2 id="GitLab-Runner">GitLab Runner</h2><h3 id="GitLab-Runner简介">GitLab Runner简介</h3><ul><li>GitLab Runner是一个开源项目，用于运行作业并将结果发送回GitLab</li><li>与GitLabCI结合使用，GitLabCI是GitLab随附的用于协调作业的开源持续集成服务。</li><li>GitLab Runner是用go编写的，可以在Linux，macos和windows上运行。</li><li>容器部署需使用最新docker版本，GitLab Runner需要最少的Docker v1.13.0</li><li>GitLab Runner版本需与GitLab版本同步。</li><li>可以根据需要配置任意数量的Runner。</li></ul><p>GitLab Runner类似于Jenkins的agent，执行CI持续集成，构建的脚本任务。</p><h3 id="GitLab-Runner特点">GitLab Runner特点</h3><ul><li>作业运行控制：同时执行多个作业。</li><li>作业运行环境：<ul><li>在本地使用docker容器，使用docker容器并通过SSH执行作业。</li><li>使用docker容器在不同的云和虚拟化管理程序上自动缩放。</li><li>连接到远程SSH服务器。</li></ul></li><li>支持Bash，Windows Batch和Windows powershell</li><li>允许自定义作业运行环境</li><li>自动重新加载配置</li><li>易于安装，可作为Linux，macOS和Windows的服务。</li></ul><h3 id="GitLab-Runner类型与状态">GitLab Runner类型与状态</h3><ul><li>类型<ul><li>shared共享类型，运行整个平台项目的作业（gitlab）</li><li>group  项目组类型，运行特定group下所有项目的作业（group）</li><li>specific  项目类型，运行指定的项目作业（project）</li></ul></li><li>状态<ul><li>locked： 锁定状态，无法运行项目作业</li><li>paused： 暂停状态，暂时不会接收新的作业</li></ul></li></ul><h3 id="下载gitlab-runner">下载gitlab runner</h3><ul><li>下载rpm包</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://mirrors.tuna.tsinghua.edu.cn/gitlab-runner/yum/el7/gitlab-runner-15.4.2-1.x86_64.rpm</span><br></pre></td></tr></table></figure><ul><li>安装</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpm -ivh gitlab-runner-15.4.2-1.x86_64.rpm</span><br></pre></td></tr></table></figure><ul><li>启动gitlab runner服务</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start gitlab-runner</span><br></pre></td></tr></table></figure><p>测试：只要有gitlab-runner即为成功。</p><h2 id="GitLab-Runner注册">GitLab Runner注册</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gitlab-runner register</span><br></pre></td></tr></table></figure><h2 id="Jekins安装">Jekins安装</h2><h3 id="JDK版本安装">JDK版本安装</h3><p>我这里使用的是JDK17，因此，需要安装JDK17版本。</p><p>先从网上下载rpm包：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://corretto.aws/downloads/latest/amazon-corretto-17-x64-linux-jdk.rpm</span><br></pre></td></tr></table></figure><p>再安装rpm包：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpm -ivh amazon-corretto-17-x64-linux-jdk.rpm</span><br></pre></td></tr></table></figure><p>去下面的jenkins网站下载jenkins：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://mirrors.jenkins.io/war-stable/</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;传统应用发布模式&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;开发团队&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在开发环境中完成软件开发，单元测试，测试通过，提交到代码版本管理库&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;运维团队&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;把应用部署到测试环境，供QA团队测试，测试通过后部署到生</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>C++</title>
    <link href="http://example.com/2023/11/03/C++/C/"/>
    <id>http://example.com/2023/11/03/C++/C/</id>
    <published>2023-11-03T15:40:51.000Z</published>
    <updated>2023-11-03T16:12:08.804Z</updated>
    
    <content type="html"><![CDATA[<h1>C++代码的结构</h1><h2 id="预处理器">预处理器</h2><p>C++预处理器是一个在编译器看到源代码之前处理它的程序。C++预处理器会从源文件中删除所有注释，并将每个注释替换为一个空格。然后找到预处理器并执行。</p><p>常见的预处理器有以下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;myfile.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">elif</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">undef</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">line</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">error</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span></span></span><br></pre></td></tr></table></figure><p>当预处理器看到这个指令时，它会用他所引用的文件替换掉#include，并递归的处理该文件。</p><h2 id="main函数">main函数</h2><ul><li>每个C++程序都必须只含一个主函数。</li><li>main函数是C++执行的入口。</li><li>返回0表示函数执行成功。</li><li>有两种版本是可行的。</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">// code</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span>&#123;</span><br><span class="line"><span class="comment">// code</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第二种版本，main需要来自操作系统的信息，假设在执行程序时，需要从命令行向程序传递消息。这在命令行中非常常见。在这种情况下，我们告诉编译器我们需要两条消息。首先，我们需要传入消息的数量，第二个信息是我们传递给程序的实际参数。</p><h2 id="命名空间">命名空间</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;C++代码的结构&lt;/h1&gt;
&lt;h2 id=&quot;预处理器&quot;&gt;预处理器&lt;/h2&gt;
&lt;p&gt;C++预处理器是一个在编译器看到源代码之前处理它的程序。C++预处理器会从源文件中删除所有注释，并将每个注释替换为一个空格。然后找到预处理器并执行。&lt;/p&gt;
&lt;p&gt;常见的预处理器有以下：&lt;/</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>微服务</title>
    <link href="http://example.com/2023/10/27/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    <id>http://example.com/2023/10/27/%E5%BE%AE%E6%9C%8D%E5%8A%A1/</id>
    <published>2023-10-26T23:30:36.000Z</published>
    <updated>2023-10-26T23:54:57.151Z</updated>
    
    <content type="html"><![CDATA[<h1>微服务</h1><h2 id="什么是微服务">什么是微服务</h2><p>微服务是一种软件架构风格，它是专注于单一职责的很多小型项目为基础，组合成复杂的大型应用。</p><p>微服务拆分造成的问题：</p><ul><li>服务拆分</li><li>远程调用</li><li>服务治理</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;微服务&lt;/h1&gt;
&lt;h2 id=&quot;什么是微服务&quot;&gt;什么是微服务&lt;/h2&gt;
&lt;p&gt;微服务是一种软件架构风格，它是专注于单一职责的很多小型项目为基础，组合成复杂的大型应用。&lt;/p&gt;
&lt;p&gt;微服务拆分造成的问题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;服务拆分&lt;/li&gt;
&lt;li&gt;远程调用&lt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>kotlin基础</title>
    <link href="http://example.com/2023/10/11/%E5%AE%89%E5%8D%93%E5%BC%80%E5%8F%91/kotlin%E5%9F%BA%E7%A1%80/"/>
    <id>http://example.com/2023/10/11/%E5%AE%89%E5%8D%93%E5%BC%80%E5%8F%91/kotlin%E5%9F%BA%E7%A1%80/</id>
    <published>2023-10-11T14:02:14.000Z</published>
    <updated>2023-10-11T14:03:29.307Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h2 id="Kotlin基础">Kotlin基础</h2><h3 id="if语句">if语句</h3><p>最基本的if语句</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> c = caculate(<span class="number">3</span>,<span class="number">5</span>)</span><br><span class="line">    print(c)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 返回a和b较大的数 </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">caculate</span><span class="params">(a:<span class="type">Int</span>,b:<span class="type">Int</span>)</span></span>:<span class="built_in">Int</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> c = <span class="number">0</span></span><br><span class="line">    <span class="keyword">if</span>(a &gt; b)&#123;</span><br><span class="line">        c = a</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        c = b </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> c</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为if是具有返回值的，因此可以简写为</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> c = caculate(<span class="number">3</span>,<span class="number">5</span>)</span><br><span class="line">    print(c)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 返回a和b较大的数 </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">caculate</span><span class="params">(a:<span class="type">Int</span>,b:<span class="type">Int</span>)</span></span>:<span class="built_in">Int</span>&#123;    </span><br><span class="line">    <span class="keyword">var</span> c = <span class="keyword">if</span>(a &gt; b)&#123;</span><br><span class="line">        a</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        b </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> c</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>进一步可以写为</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> c = caculate(<span class="number">3</span>,<span class="number">5</span>)</span><br><span class="line">    print(c)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 返回a和b较大的数 </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">caculate</span><span class="params">(a:<span class="type">Int</span>,b:<span class="type">Int</span>)</span></span> =  <span class="keyword">if</span>(a &gt; b) a <span class="keyword">else</span> b  </span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="when语句">when语句</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> c = getScore(<span class="string">&quot;Tom&quot;</span>)</span><br><span class="line">    print(c)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * when的使用方法 </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">getScore</span><span class="params">(name:<span class="type">String</span>)</span></span> = <span class="keyword">when</span>(name) &#123;</span><br><span class="line">        <span class="string">&quot;Jim&quot;</span> -&gt; <span class="number">86</span></span><br><span class="line">        <span class="string">&quot;Tom&quot;</span> -&gt; <span class="number">50</span></span><br><span class="line">        <span class="string">&quot;Fox&quot;</span> -&gt; <span class="number">60</span></span><br><span class="line">        <span class="keyword">else</span> -&gt; <span class="number">0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="函数">函数</h3><p>有参有返回值</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> res = caculate(<span class="number">3</span>,<span class="number">5</span>)</span><br><span class="line">    print(res)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">caculate</span><span class="params">(a:<span class="type">Int</span>,b:<span class="type">Int</span>)</span></span>:<span class="built_in">Int</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a+b</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="继承">继承</h3><p>在kotlin里如果要继承一个类，必须使得该类为open，因为<code>effective java</code>书中说到，如果一个类不是用来继承的，那么应该将其声明为<code>open</code>。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> stu1 = Student()</span><br><span class="line">    print(stu1.age)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">open</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> name = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">var</span> age = <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> : <span class="type">Person</span></span>() &#123;</span><br><span class="line">    <span class="keyword">var</span> sno = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">var</span> grade = <span class="number">0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里需要注意的是，在继承一个类时有主构造函数和次构造函数</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> stu1 = Student(<span class="string">&quot;2&quot;</span>, <span class="number">100</span>, <span class="string">&quot;THY&quot;</span>, <span class="number">25</span>)</span><br><span class="line">    println(stu1.age)</span><br><span class="line">    <span class="keyword">var</span> stu2 = Student(<span class="string">&quot;3&quot;</span>,<span class="number">20</span>)</span><br><span class="line">    println(stu2.name)</span><br><span class="line">    <span class="keyword">var</span> stu3 = Student()</span><br><span class="line">    println(stu3.age)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">open</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>(<span class="keyword">val</span> name: String, <span class="keyword">val</span> age: <span class="built_in">Int</span>) &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span></span>(<span class="keyword">val</span> son: String, <span class="keyword">val</span> grade: <span class="built_in">Int</span>, name: String, age: <span class="built_in">Int</span>) : Person(name, age) &#123;</span><br><span class="line">    <span class="keyword">constructor</span>(name:String,age:<span class="built_in">Int</span>):<span class="keyword">this</span>(<span class="string">&quot;&quot;</span>,<span class="number">0</span>,name,age)</span><br><span class="line">    <span class="keyword">constructor</span>() : <span class="keyword">this</span>(<span class="string">&quot;&quot;</span>,<span class="number">0</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="接口">接口</h3><p>kotlin中的接口可以有默认实现方法，子类可以继承并重写，也可以继承不重写</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> stu1 = Student(<span class="string">&quot;2&quot;</span>, <span class="number">100</span>, <span class="string">&quot;THY&quot;</span>, <span class="number">25</span>)</span><br><span class="line">    println(stu1.age)</span><br><span class="line">    <span class="keyword">var</span> stu2 = Student(<span class="string">&quot;3&quot;</span>,<span class="number">20</span>)</span><br><span class="line">    println(stu2.name)</span><br><span class="line">    <span class="keyword">var</span> stu3 = Student()</span><br><span class="line">    println(stu3.age)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">open</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>(<span class="keyword">val</span> name: String, <span class="keyword">val</span> age: <span class="built_in">Int</span>) &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span></span>(<span class="keyword">val</span> son: String, <span class="keyword">val</span> grade: <span class="built_in">Int</span>, name: String, age: <span class="built_in">Int</span>) : Person(name, age),Study &#123;</span><br><span class="line">    <span class="keyword">constructor</span>(name:String,age:<span class="built_in">Int</span>):<span class="keyword">this</span>(<span class="string">&quot;&quot;</span>,<span class="number">0</span>,name,age)</span><br><span class="line">    <span class="keyword">constructor</span>() : <span class="keyword">this</span>(<span class="string">&quot;&quot;</span>,<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">doHomeWorks</span><span class="params">()</span></span> &#123;</span><br><span class="line">        print(<span class="string">&quot;do work&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Study</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">readBooks</span><span class="params">()</span></span>&#123;</span><br><span class="line">        print(<span class="string">&quot;read books&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">doHomeWorks</span><span class="params">()</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="data类">data类</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> cellPhone1 = CellPhone(<span class="string">&quot;HUAWEI&quot;</span>,<span class="number">1200.0</span>)</span><br><span class="line">    <span class="keyword">var</span> cellPhone2 = CellPhone(<span class="string">&quot;HUAWEI&quot;</span>,<span class="number">1200.0</span>)</span><br><span class="line">    print(cellPhone1 == cellPhone2)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">data</span> <span class="class"><span class="keyword">class</span> <span class="title">CellPhone</span></span>(<span class="keyword">val</span> band:String,<span class="keyword">val</span> price:<span class="built_in">Double</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">out</span>:<span class="literal">true</span></span><br></pre></td></tr></table></figure><h3 id="kotlin里的单例类">kotlin里的单例类</h3><p>只需要将<code>class</code>改为<code>object</code>即可实现单例类</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">object</span> Singleton &#123;</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">singletonTest</span><span class="params">()</span></span>&#123;</span><br><span class="line">        println(<span class="string">&quot;singletonTest is called&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Kotlin中的集合">Kotlin中的集合</h3><h4 id="List">List</h4><p>Kotlin里可通过listOf声明一个列表</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">fun main() &#123;</span><br><span class="line">    val list = listOf(&quot;apple&quot;,&quot;peer&quot;,&quot;grape&quot;)</span><br><span class="line">for(fruit in list)&#123;</span><br><span class="line">        println(fruit)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是用<strong>listOf</strong>生成的集合是不可变的集合，即不能对集合进行添加，修改，删除操作。</p><p>可以使用**mutableListOf()**声明一个可变的集合。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> list = mutableListOf(<span class="string">&quot;apple&quot;</span>,<span class="string">&quot;orange&quot;</span>)</span><br><span class="line">    list.add(<span class="string">&quot;grape&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span>(fruit <span class="keyword">in</span> list)&#123;</span><br><span class="line">        println(fruit)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Map">Map</h4><p>一般使用<strong>HashMap</strong>去声明一个<strong>Map</strong></p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> map = HashMap&lt;String,<span class="built_in">Int</span>&gt;()</span><br><span class="line">    map[<span class="string">&quot;Apple&quot;</span>] = <span class="number">1</span></span><br><span class="line">    map[<span class="string">&quot;orange&quot;</span>] = <span class="number">2</span></span><br><span class="line">    println(map[<span class="string">&quot;Apple&quot;</span>])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>遍历map</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> map = mapOf(<span class="string">&quot;Apple&quot;</span> to <span class="number">1</span>,<span class="string">&quot;Banana&quot;</span> to <span class="number">2</span>,<span class="string">&quot;Orange&quot;</span> to <span class="number">3</span>)</span><br><span class="line">    <span class="keyword">for</span>((fruit,number) <span class="keyword">in</span> map)&#123;</span><br><span class="line">        println(<span class="string">&quot;fruit is &quot;</span> + fruit + <span class="string">&quot; number is &quot;</span> +number)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Lambda表达式">Lambda表达式</h3><p><strong>lambda</strong>是一种可以作为参数传递的代码：</p><p>其表达式为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;参数名1：参数类型，参数名2：参数类型 -&gt; 函数体&#125;</span><br></pre></td></tr></table></figure><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> list = listOf(<span class="string">&quot;Apple&quot;</span>,<span class="string">&quot;orange&quot;</span>,<span class="string">&quot;watermelon&quot;</span>)</span><br><span class="line">    <span class="keyword">val</span> lambda = &#123;fruit:String -&gt; fruit.length&#125;</span><br><span class="line">   println(list.maxBy(lambda)) </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">可以直接将lambda表达式传入maxBy函数中：</span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> list = listOf(<span class="string">&quot;Apple&quot;</span>,<span class="string">&quot;orange&quot;</span>,<span class="string">&quot;watermelon&quot;</span>)</span><br><span class="line">   println(list.maxBy(&#123;fruit:String -&gt; fruit.length&#125;)) </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">如果lambda参数是函数的唯一一个参数时，可以将lambda表达式移至函数括号的外边</span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> list = listOf(<span class="string">&quot;Apple&quot;</span>,<span class="string">&quot;orange&quot;</span>,<span class="string">&quot;watermelon&quot;</span>)</span><br><span class="line">   println(list.maxBy()&#123;fruit:String -&gt; fruit.length&#125;) </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">如果lambda参数是函数的唯一一个参数时，可以将函数的括号省略</span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> list = listOf(<span class="string">&quot;Apple&quot;</span>,<span class="string">&quot;orange&quot;</span>,<span class="string">&quot;watermelon&quot;</span>)</span><br><span class="line">   println(list.maxBy&#123;fruit:String -&gt; fruit.length&#125;) </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">kotlin可以推导类型，因此，可以省略String</span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> list = listOf(<span class="string">&quot;Apple&quot;</span>,<span class="string">&quot;orange&quot;</span>,<span class="string">&quot;watermelon&quot;</span>)</span><br><span class="line">   println(list.maxBy&#123;fruit -&gt; fruit.length&#125;) </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">只有一个参数，可以用it代替</span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> list = listOf(<span class="string">&quot;Apple&quot;</span>,<span class="string">&quot;orange&quot;</span>,<span class="string">&quot;watermelon&quot;</span>)</span><br><span class="line">   println(list.maxBy&#123;it.length&#125;) </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>map可以将集合中的元素映射为另外的值</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> list = listOf(<span class="string">&quot;Apple&quot;</span>,<span class="string">&quot;orange&quot;</span>,<span class="string">&quot;watermelon&quot;</span>)</span><br><span class="line">    <span class="keyword">var</span> newList = list.map&#123;it.toUpperCase()&#125;</span><br><span class="line">    <span class="keyword">for</span>(fruit <span class="keyword">in</span> newList)&#123;</span><br><span class="line">        print(fruit+<span class="string">&quot; &quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>filter可以过滤集合中的数据</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> list = listOf(<span class="string">&quot;Apple&quot;</span>,<span class="string">&quot;orange&quot;</span>,<span class="string">&quot;watermelon&quot;</span>)</span><br><span class="line">    <span class="keyword">var</span> newList = list</span><br><span class="line">        .filter&#123;it.length &lt;= <span class="number">5</span>&#125;</span><br><span class="line">    .map&#123;it.toUpperCase()&#125;</span><br><span class="line">    <span class="keyword">for</span>(fruit <span class="keyword">in</span> newList)&#123;</span><br><span class="line">        print(fruit+<span class="string">&quot; &quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>any用于判断集合中是否存在一个元素满足条件，all函数用于判断集合中是否所有元素都满足条件。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> list = listOf(<span class="string">&quot;Apple&quot;</span>,<span class="string">&quot;orange&quot;</span>,<span class="string">&quot;watermelon&quot;</span>)</span><br><span class="line">    <span class="keyword">val</span> anyResult = list.any&#123;it -&gt; it.length &lt;= <span class="number">5</span>&#125;</span><br><span class="line">    <span class="keyword">val</span> allResult = list.all&#123;it -&gt; it.length &lt;= <span class="number">5</span>&#125;</span><br><span class="line">    println(<span class="string">&quot;anyList:&quot;</span>+anyResult+<span class="string">&quot; allResult:&quot;</span>+allResult)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Java函数式API的使用">Java函数式API的使用</h3><p>Java里有一个单抽象方法接口<code>Runnable</code>接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于任何一个<code>Java</code>方法，只要其接受<code>Runnable</code>参数，我们就可以使用函数式API，其中，<code>Thread</code>类的构造方法就接收了一个<code>Runnable</code>参数。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable()&#123;</span><br><span class="line">    <span class="meta">@override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;Thread is running&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;).start();</span><br></pre></td></tr></table></figure><p>而将上述方法换为<code>kotlin</code>则可以写为</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Thread(<span class="keyword">object</span> : Runnable&#123;</span><br><span class="line"> <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        println(<span class="string">&quot;Thread is running&quot;</span>)</span><br><span class="line">    &#125;   </span><br><span class="line">&#125;).start()</span><br></pre></td></tr></table></figure><p>而由于<code>Runnable</code>接口中只有一个待实现方法，因此，我们可以不用显示重写run方法。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Thread(Runnable&#123;</span><br><span class="line">        println(<span class="string">&quot;Thread is running&quot;</span>)</span><br><span class="line">&#125;).start()</span><br></pre></td></tr></table></figure><p>而如果Java方法列表里有且仅有一个<code>Java</code>单抽象方法接口参数，我们可以省略其接口名</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Thread(&#123;</span><br><span class="line">        println(<span class="string">&quot;Thread is running&quot;</span>)</span><br><span class="line">&#125;).start()</span><br></pre></td></tr></table></figure><p>当lambda表达式是方法的唯一一个参数，可以将方法的括号省略</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Thread&#123;</span><br><span class="line">        println(<span class="string">&quot;Thread is running&quot;</span>)</span><br><span class="line">&#125;.start()</span><br></pre></td></tr></table></figure><h3 id="空指针检查">空指针检查</h3><p>先看下面代码是否安全</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> void doStudy(Study study)&#123;</span><br><span class="line">study.readBooks();</span><br><span class="line">study.doHomework();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>很显然，这段代码并不安全，因为如果传入的<code>study</code>为空，则会发生空指针异常</p><p>而kotlin非常科学的解决了该问题，它利用编译时判空检查的机制杜绝了空指针异常</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">// 报错</span></span><br><span class="line">    doStudy(<span class="literal">null</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">doStudy</span><span class="params">(study : <span class="type">Study</span>)</span></span>&#123;</span><br><span class="line">study.readBooks();</span><br><span class="line">study.doHomework();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因此，我们可以使用<code>?</code>来杜绝编译报错</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">// 报错</span></span><br><span class="line">    doStudy(<span class="literal">null</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">doStudy</span><span class="params">(study : <span class="type">Study</span>?)</span></span>&#123;</span><br><span class="line">study.readBooks();</span><br><span class="line">study.doHomework();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于传入空值，因此，<code>readBooks</code>和<code>doHomework</code>编译会报错，因此，在方法内需要对其进行非空判断</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">fun doStudy(study : Study?)&#123;</span><br><span class="line">if(study != null)&#123;</span><br><span class="line">study.readBooks();</span><br><span class="line">study.doHomework();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="非空判断工具">非空判断工具</h4><p>我们可以将上述判空代码修改为</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">doStudy</span><span class="params">(study : <span class="type">Study</span>?)</span></span>&#123;</span><br><span class="line">study?.readBooks();</span><br><span class="line">study?.doHomework();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果左边的表达式不为空则返回</p><h3 id="kotlin协程">kotlin协程</h3><p>在计算机科学中，有两种类型的多任务处理方法来管理多个并发进程。一种是操作系统控制进程间的切换。另一种是协程，其中进程自行控制其行为。协程是为协作多任务处理子例程的软件组件。在某种程度上，协程可以被视为轻量级线程，我们可以在单个线程中执行多个协程，协程也可以在线程之间切换。这意味着，协程可以从一个线程挂起，并从另一个线程恢复。在Java中，多线程任务都是通过RxJava，AsyncTask，Executors，HandlerThreads，IntentServices完成的，协程API还允许我们使用顺序方式编写异步代码。</p><h4 id="使用协程">使用协程</h4><p>添加下面的依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">implementation(&quot;org.jetbrains.kotlinx:kotlinx-coroutines-core:1.7.3&quot;)</span><br><span class="line">implementation(&quot;org.jetbrains.kotlinx:kotlinx-coroutines-android:1.7.3&quot;)</span><br></pre></td></tr></table></figure><p>然后既可以将耗时的任务放在协程里去执行了：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">btnDownloadUserData.setOnClickListener&#123;</span><br><span class="line">    downloadUserData()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">btnDownloadUserData.setOnClickListener &#123;</span><br><span class="line">    CoroutineScope(Dispatchers.IO).launch &#123;</span><br><span class="line">        downloadUserData()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在kotlin的协程中，我们必须在某个范围内启动协程，在该范围内，我们可以跟踪协程，取消协程，并处理由协程带来的异常，而<code>CoroutineScope</code>就是我们为协程指定的作用域，除了<code>CoroutineScope</code>，在kotlin中，我们还有一个作用域接口，称为GlobalScope，全局范围用于启动顶层协程，在安卓开发中，我们很少使用，我们将Dispatchers作为我们的Context，该参数可以选择：Dispatchers.Main，<a href="http://Dispatcher.IO">Dispatcher.IO</a>，Dispatcher.Default，Dispatcher.Unconfined。如果选择Dispatchers.Main，协程将在主线程中运行，在Android中，我们也称其为UI线程。我们仅在小型，轻量级任务中使用Dispatchers.Main，例如调用UI函数，调用挂起函数。<a href="http://xn--Dispatcher-vj4pe9c610eobzenrqr3c.IO">如果我们使用Dispatcher.IO</a>，协程将在后台线程中运行，我们可以使用这个IO调度程序来处理本地数据库，与网络通信并处理请求，Dispatcher.Default用于CPU密集型任务，例如：对包含10000个列表项的数据列表进行排序，或者解析一个包含100000部电影详细信息的巨大json文件。Dispatcher.Unconfined是与GlobalScope一起使用的调度程序，如果我们使用Dispatcher.Unconfined，协程将在当前线程上运行，但如果它被挂起并恢复，它将在挂起函数正在运行的线程上运行，不建议使用。launch是协程的构建器，协程构建器是协程的扩展函数作用域，主要有四个构建器：分别是启动（launch），异步（async），生成（produce）和运行阻塞（runBlocking）。启动构建器可以启动一个不阻塞当前线程的协程。该构建器返回一个Job的实例，可以用作协程的引用。我们可以使用返回的Job实例去跟踪协程或者取消协程。但是，我们不能使用这个协程来计算某些东西并获得返回值。如果我们要获得这样的结果作为返回值，我们可以使用异步协程构建器，不仅如此，异步构建器的主要特点是它允许我们并行的启动协程。同时，异步构建器也不会阻塞当前线程，同时它会返回一个Deferred实例，我们需要调用其await值来获取其返回值。</p><p>对于上述案例，如果我想在主线程中更改UI</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.anushka.coroutinesdemo1</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> androidx.appcompat.app.AppCompatActivity</span><br><span class="line"><span class="keyword">import</span> android.os.Bundle</span><br><span class="line"><span class="keyword">import</span> android.util.Log</span><br><span class="line"><span class="keyword">import</span> android.view.View</span><br><span class="line"><span class="keyword">import</span> android.widget.Button</span><br><span class="line"><span class="keyword">import</span> android.widget.TextView</span><br><span class="line"><span class="keyword">import</span> kotlinx.coroutines.*</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> : <span class="type">AppCompatActivity</span></span>() &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> count = <span class="number">0</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">lateinit</span> <span class="keyword">var</span> btnDownloadUserData: Button</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">lateinit</span> <span class="keyword">var</span> btnCount: Button</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">lateinit</span> <span class="keyword">var</span> tvCount: TextView</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">lateinit</span> <span class="keyword">var</span> tvUserMessage: TextView</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCreate</span><span class="params">(savedInstanceState: <span class="type">Bundle</span>?)</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState)</span><br><span class="line">        setContentView(R.layout.activity_main)</span><br><span class="line">        tvUserMessage = findViewById(R.id.tvUserMessage)</span><br><span class="line">        btnDownloadUserData = findViewById(R.id.btnDownloadUserData)</span><br><span class="line">        btnCount = findViewById(R.id.btnCount)</span><br><span class="line">        tvCount = findViewById(R.id.tvCount)</span><br><span class="line"></span><br><span class="line">        btnCount.setOnClickListener &#123;</span><br><span class="line">            tvCount.text = count++.toString()</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">val</span> function: (View) -&gt; <span class="built_in">Unit</span> = &#123;</span><br><span class="line">            CoroutineScope(Dispatchers.IO).launch &#123;</span><br><span class="line">                downloadUserData()</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">downloadUserData</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">1.</span><span class="number">.200000</span>) &#123;</span><br><span class="line">            tvUserMessage.text = <span class="string">&quot;Downloading user <span class="variable">$i</span> in <span class="subst">$&#123;Thread.currentThread().name&#125;</span>&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们不能像上述代码中直接从后台进程调用在UI线程中运行的视图组件。</p><p>我们可以使用上下文函数将协程从一个线程切换到另一个线程。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.anushka.coroutinesdemo1</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> androidx.appcompat.app.AppCompatActivity</span><br><span class="line"><span class="keyword">import</span> android.os.Bundle</span><br><span class="line"><span class="keyword">import</span> android.util.Log</span><br><span class="line"><span class="keyword">import</span> android.view.View</span><br><span class="line"><span class="keyword">import</span> android.widget.Button</span><br><span class="line"><span class="keyword">import</span> android.widget.TextView</span><br><span class="line"><span class="keyword">import</span> kotlinx.coroutines.*</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> : <span class="type">AppCompatActivity</span></span>() &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> count = <span class="number">0</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">lateinit</span> <span class="keyword">var</span> btnDownloadUserData: Button</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">lateinit</span> <span class="keyword">var</span> btnCount: Button</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">lateinit</span> <span class="keyword">var</span> tvCount: TextView</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">lateinit</span> <span class="keyword">var</span> tvUserMessage: TextView</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCreate</span><span class="params">(savedInstanceState: <span class="type">Bundle</span>?)</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState)</span><br><span class="line">        setContentView(R.layout.activity_main)</span><br><span class="line">        tvUserMessage = findViewById(R.id.tvUserMessage)</span><br><span class="line">        btnDownloadUserData = findViewById(R.id.btnDownloadUserData)</span><br><span class="line">        btnCount = findViewById(R.id.btnCount)</span><br><span class="line">        tvCount = findViewById(R.id.tvCount)</span><br><span class="line"></span><br><span class="line">        btnCount.setOnClickListener &#123;</span><br><span class="line">            tvCount.text = count++.toString()</span><br><span class="line">        &#125;</span><br><span class="line">        btnDownloadUserData.setOnClickListener &#123;</span><br><span class="line">            CoroutineScope(Dispatchers.IO).launch &#123;</span><br><span class="line">                downloadUserData()</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">suspend</span> <span class="function"><span class="keyword">fun</span> <span class="title">downloadUserData</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">1.</span><span class="number">.200000</span>) &#123;</span><br><span class="line">            withContext(Dispatchers.Main) &#123;</span><br><span class="line">                tvUserMessage.text = <span class="string">&quot;Downloading user <span class="variable">$i</span> in <span class="subst">$&#123;Thread.currentThread().name&#125;</span>&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="挂起函数">挂起函数</h4><p>在kotlin的协程中，每当协程暂停时，函数当前的栈帧都会被复制并保存在内存中，当函数完成其任务并恢复后，栈帧会从保存位置恢复并再次运行。kotlin的协程为我们提供了很多API，是我们的工作更加轻松，几乎所有的函数都是暂停函数，例如：withContext()，withTimeout()，withTimeoutOrNull()，join()，delay()，supervisorScope，coroutineScope等。如果我们要从我们的函数中调用暂停函数，我们必须使用suspend修饰符来标记我们的函数。</p><h4 id="Async和Await">Async和Await</h4><p>让我们假设有以下场景，我们需要获取去获取网络数据的结果并将它们结合去显示最终结果：</p><p>TASK 1 =&gt; 10s</p><p>TASK 1 =&gt; 15s</p><p>TASK 1 =&gt; 12s</p><p>TASK 1 =&gt; 13s</p><p>我们可以一个一个去获取数据，但是这样做所花费的时间为：10+15+12+13=50s。</p><p>我们写下面的例子证明该问题：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> : <span class="type">AppCompatActivity</span></span>() &#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCreate</span><span class="params">(savedInstanceState: <span class="type">Bundle</span>?)</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState)</span><br><span class="line">        setContentView(R.layout.activity_main)</span><br><span class="line"></span><br><span class="line">        CoroutineScope(IO).launch &#123;</span><br><span class="line">            Log.i(<span class="string">&quot;MyTag&quot;</span>, <span class="string">&quot;Caculation started...&quot;</span>)</span><br><span class="line">            <span class="keyword">val</span> stock1 = getStock1()</span><br><span class="line">            <span class="keyword">val</span> stock2 = getStock2()</span><br><span class="line">            <span class="keyword">val</span> total = stock1 + stock2</span><br><span class="line">            Log.i(<span class="string">&quot;MyTag&quot;</span>, <span class="string">&quot;Total is <span class="variable">$total</span>&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">suspend</span> <span class="function"><span class="keyword">fun</span> <span class="title">getStock1</span><span class="params">()</span></span>: <span class="built_in">Int</span> &#123;</span><br><span class="line">    delay(<span class="number">10000</span>)</span><br><span class="line">    Log.i(<span class="string">&quot;MyTag&quot;</span>, <span class="string">&quot;stock 1 returned&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">55000</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">suspend</span> <span class="function"><span class="keyword">fun</span> <span class="title">getStock2</span><span class="params">()</span></span>: <span class="built_in">Int</span> &#123;</span><br><span class="line">    delay(<span class="number">8000</span>)</span><br><span class="line">    Log.i(<span class="string">&quot;MyTag&quot;</span>, <span class="string">&quot;stock 2 returned&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">35000</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述代码是顺序执行的版本，运行后，在Logcat中可以看到：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">2023-08-05 21:58:13.462 28428-28464 MyTag                   com.thylearncode.chapter58           I  Caculation started...</span><br><span class="line">2023-08-05 21:58:23.467 28428-28465 MyTag                   com.thylearncode.chapter58           I  stock 1 returned</span><br><span class="line">2023-08-05 21:58:31.469 28428-28465 MyTag                   com.thylearncode.chapter58           I  stock 2 returned</span><br><span class="line">2023-08-05 21:58:31.469 28428-28465 MyTag                   com.thylearncode.chapter58           I  Total is 90000</span><br></pre></td></tr></table></figure><p>可以发现，getStock1先执行，然后过了10s后，getStock2才执行。</p><p>在下面，我们将使用异步协程构造器对上面的代码进行优化：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.thylearncode.chapter58</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.os.Bundle</span><br><span class="line"><span class="keyword">import</span> android.util.Log</span><br><span class="line"><span class="keyword">import</span> androidx.appcompat.app.AppCompatActivity</span><br><span class="line"><span class="keyword">import</span> kotlinx.coroutines.CoroutineScope</span><br><span class="line"><span class="keyword">import</span> kotlinx.coroutines.Dispatchers.IO</span><br><span class="line"><span class="keyword">import</span> kotlinx.coroutines.async</span><br><span class="line"><span class="keyword">import</span> kotlinx.coroutines.delay</span><br><span class="line"><span class="keyword">import</span> kotlinx.coroutines.launch</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> : <span class="type">AppCompatActivity</span></span>() &#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCreate</span><span class="params">(savedInstanceState: <span class="type">Bundle</span>?)</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState)</span><br><span class="line">        setContentView(R.layout.activity_main)</span><br><span class="line"></span><br><span class="line">        CoroutineScope(IO).launch &#123;</span><br><span class="line">            Log.i(<span class="string">&quot;MyTag&quot;</span>, <span class="string">&quot;Caculation started...&quot;</span>)</span><br><span class="line">            <span class="keyword">val</span> stock1 = async &#123; getStock1() &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">val</span> stock2 = async &#123; getStock2() &#125;</span><br><span class="line">            <span class="keyword">val</span> total = stock1.await() + stock2.await()</span><br><span class="line">            Log.i(<span class="string">&quot;MyTag&quot;</span>, <span class="string">&quot;Total is <span class="variable">$total</span>&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">suspend</span> <span class="function"><span class="keyword">fun</span> <span class="title">getStock1</span><span class="params">()</span></span>: <span class="built_in">Int</span> &#123;</span><br><span class="line">    delay(<span class="number">10000</span>)</span><br><span class="line">    Log.i(<span class="string">&quot;MyTag&quot;</span>, <span class="string">&quot;stock 1 returned&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">55000</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">suspend</span> <span class="function"><span class="keyword">fun</span> <span class="title">getStock2</span><span class="params">()</span></span>: <span class="built_in">Int</span> &#123;</span><br><span class="line">    delay(<span class="number">8000</span>)</span><br><span class="line">    Log.i(<span class="string">&quot;MyTag&quot;</span>, <span class="string">&quot;stock 2 returned&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">35000</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过查看上面的日志。可以发现，程序并行的执行了代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">2023-08-05 22:11:48.724  1042-1093  MyTag                   com.thylearncode.chapter58           I  Caculation started...</span><br><span class="line">2023-08-05 22:11:56.729  1042-1100  MyTag                   com.thylearncode.chapter58           I  stock 2 returned</span><br><span class="line">2023-08-05 22:11:58.729  1042-1100  MyTag                   com.thylearncode.chapter58           I  stock 1 returned</span><br><span class="line">2023-08-05 22:11:58.730  1042-1100  MyTag                   com.thylearncode.chapter58           I  Total is 90000</span><br></pre></td></tr></table></figure><h4 id="非结构化协程">非结构化协程</h4><p>有以下情况：</p><p>我们需要在一个挂起函数中启动多个协程。并从中获得结果。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.anushka.coroutinesdemo1</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> androidx.appcompat.app.AppCompatActivity</span><br><span class="line"><span class="keyword">import</span> android.os.Bundle</span><br><span class="line"><span class="keyword">import</span> android.util.Log</span><br><span class="line"><span class="keyword">import</span> android.view.View</span><br><span class="line"><span class="keyword">import</span> android.widget.Button</span><br><span class="line"><span class="keyword">import</span> android.widget.TextView</span><br><span class="line"><span class="keyword">import</span> kotlinx.coroutines.*</span><br><span class="line"><span class="keyword">import</span> kotlinx.coroutines.Dispatchers.Main</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> : <span class="type">AppCompatActivity</span></span>() &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> count = <span class="number">0</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">lateinit</span> <span class="keyword">var</span> btnDownloadUserData: Button</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">lateinit</span> <span class="keyword">var</span> btnCount: Button</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">lateinit</span> <span class="keyword">var</span> tvCount: TextView</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">lateinit</span> <span class="keyword">var</span> tvUserMessage: TextView</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCreate</span><span class="params">(savedInstanceState: <span class="type">Bundle</span>?)</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState)</span><br><span class="line">        setContentView(R.layout.activity_main)</span><br><span class="line">        tvUserMessage = findViewById(R.id.tvUserMessage)</span><br><span class="line">        btnDownloadUserData = findViewById(R.id.btnDownloadUserData)</span><br><span class="line">        btnCount = findViewById(R.id.btnCount)</span><br><span class="line">        tvCount = findViewById(R.id.tvCount)</span><br><span class="line"></span><br><span class="line">        btnCount.setOnClickListener &#123;</span><br><span class="line">            tvCount.text = count++.toString()</span><br><span class="line">        &#125;</span><br><span class="line">        btnDownloadUserData.setOnClickListener &#123;</span><br><span class="line">            CoroutineScope(Main).launch &#123;</span><br><span class="line">                tvUserMessage.text = UserDataManager1().getTotalUserCount().toString()</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">suspend</span> <span class="function"><span class="keyword">fun</span> <span class="title">downloadUserData</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">1.</span><span class="number">.200000</span>) &#123;</span><br><span class="line">            withContext(Dispatchers.Main) &#123;</span><br><span class="line">                tvUserMessage.text = <span class="string">&quot;Downloading user <span class="variable">$i</span> in <span class="subst">$&#123;Thread.currentThread().name&#125;</span>&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.anushka.coroutinesdemo1</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> kotlinx.coroutines.CoroutineScope</span><br><span class="line"><span class="keyword">import</span> kotlinx.coroutines.Dispatchers.IO</span><br><span class="line"><span class="keyword">import</span> kotlinx.coroutines.delay</span><br><span class="line"><span class="keyword">import</span> kotlinx.coroutines.launch</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserDataManager1</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">suspend</span> <span class="function"><span class="keyword">fun</span> <span class="title">getTotalUserCount</span><span class="params">()</span></span>: <span class="built_in">Int</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> count: <span class="built_in">Int</span> = <span class="number">0</span></span><br><span class="line">        CoroutineScope(IO).launch &#123;</span><br><span class="line">            delay(<span class="number">1000</span>)</span><br><span class="line">            count = <span class="number">50</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> count</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行上述结果后，发现<code>tvUserMessage.text</code>的值为0，这是由于非结构化并发并不能保证在函数返回之前，完成挂起函数的所有任务。实际上，在父协程完成后，子协程仍然能够运行。但是，如果使用异步构建器，并使用await函数调用作为返回值，就可以得到异步协程的预期结果。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.anushka.coroutinesdemo1</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> kotlinx.coroutines.CoroutineScope</span><br><span class="line"><span class="keyword">import</span> kotlinx.coroutines.Dispatchers.IO</span><br><span class="line"><span class="keyword">import</span> kotlinx.coroutines.async</span><br><span class="line"><span class="keyword">import</span> kotlinx.coroutines.delay</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserDataManager1</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">suspend</span> <span class="function"><span class="keyword">fun</span> <span class="title">getTotalUserCount</span><span class="params">()</span></span>: <span class="built_in">Int</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> count: <span class="built_in">Int</span> = <span class="number">0</span></span><br><span class="line">        <span class="keyword">val</span> deferred = CoroutineScope(IO).async &#123;</span><br><span class="line">            delay(<span class="number">1000</span>)</span><br><span class="line">            <span class="keyword">return</span><span class="symbol">@async</span> <span class="number">50</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> count + deferred.await()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行后，发现结果为50。</p><h3 id="结构化并发">结构化并发</h3>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h2 id=&quot;Kotlin基础&quot;&gt;Kotlin基础&lt;/h2&gt;
&lt;h3 id=&quot;if语句&quot;&gt;if语句&lt;/h3&gt;
&lt;p&gt;最基本的if语句&lt;/p&gt;
&lt;figure class=&quot;highlight kotlin&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;</summary>
      
    
    
    
    <category term="安卓开发" scheme="http://example.com/categories/%E5%AE%89%E5%8D%93%E5%BC%80%E5%8F%91/"/>
    
    
  </entry>
  
  <entry>
    <title>安卓基础</title>
    <link href="http://example.com/2023/10/11/%E5%AE%89%E5%8D%93%E5%BC%80%E5%8F%91/%E5%AE%89%E5%8D%93%E5%9F%BA%E7%A1%80/"/>
    <id>http://example.com/2023/10/11/%E5%AE%89%E5%8D%93%E5%BC%80%E5%8F%91/%E5%AE%89%E5%8D%93%E5%9F%BA%E7%A1%80/</id>
    <published>2023-10-11T13:53:20.000Z</published>
    <updated>2023-11-14T14:09:21.433Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Android布局">Android布局</h2><h3 id="如何不显示Android最上面的程序名称栏">如何不显示Android最上面的程序名称栏</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">android:theme=&quot;@style/Theme.MaterialComponents.DayNight.NoActionBar&quot;</span><br></pre></td></tr></table></figure><h3 id="定义自己的ActionBar">定义自己的ActionBar</h3><p>在<code>Theme</code>里定义</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">&quot;ToolbarTheme&quot;</span> <span class="attr">parent</span>=<span class="string">&quot;@style/ThemeOverlay.MaterialComponents.ActionBar&quot;</span>&gt;</span><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">&quot;colorControlNormal&quot;</span>&gt;</span>@color/toolbar_color_control_normal<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在<code>color.xml</code>里定义</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">&quot;toolbar_color_control_normal&quot;</span>&gt;</span>#000000<span class="tag">&lt;/<span class="name">color</span>&gt;</span></span><br></pre></td></tr></table></figure><p>定义<code>Toolbar</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">androidx.appcompat.widget.Toolbar</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/toolbarExercise&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;?android:attr/actionBarSize&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:theme</span>=<span class="string">&quot;@style/ToolbarTheme&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:background</span>=<span class="string">&quot;@color/white&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:subtitleTextColor</span>=<span class="string">&quot;@color/colorPrimary&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">androidx.appcompat.widget.Toolbar</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在<code>ExerciseActivity</code>里定义<code>ActionBar</code></p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ExerciseActivity</span> : <span class="type">AppCompatActivity</span></span>() &#123;</span><br><span class="line">    <span class="keyword">var</span> viewBinding : ActivityExerciseBinding? = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCreate</span><span class="params">(savedInstanceState: <span class="type">Bundle</span>?)</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState)</span><br><span class="line">        viewBinding = ActivityExerciseBinding.inflate(layoutInflater)</span><br><span class="line">        setContentView(viewBinding?.root)</span><br><span class="line">        setSupportActionBar(viewBinding?.toolbarExercise)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Activity">Activity</h3><h4 id="如何查看主Activity">如何查看主Activity</h4><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;intent-filter&gt;</span><br><span class="line">    &lt;action android:name=<span class="string">&quot;android.intent.action.MAIN&quot;</span> /&gt;</span><br><span class="line">&lt;category android:name=<span class="string">&quot;android.intent.category.LAUNCHER&quot;</span> /&gt;</span><br><span class="line">&lt;/intent-filter&gt;</span><br></pre></td></tr></table></figure><h4 id="Toast的使用">Toast的使用</h4><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Toast.makeText(<span class="keyword">this</span>,<span class="string">&quot;hello&quot;</span>,Toast.LENGTH_LONG).show()</span><br></pre></td></tr></table></figure><h4 id="使用intent在Activity之间穿梭">使用intent在Activity之间穿梭</h4><h5 id="intent的显式方法">intent的显式方法</h5><p><strong>intent</strong>一般用于<strong>Android</strong>各组件之间交互，<strong>intent</strong>一般用于启动<strong>Activity</strong>，启动<strong>Service</strong>，以及发送广播等。</p><p><strong>Intent</strong>有多个构造参数重载，其中如下：</p><blockquote><p>intent(Context packageContext,Class&lt;?&gt; cls)</p></blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> intent = Intent(<span class="keyword">this</span>,SecondActivity::<span class="keyword">class</span>.java)</span><br><span class="line">startActivity(intent)</span><br></pre></td></tr></table></figure><h5 id="向下一个Activity传送数据">向下一个Activity传送数据</h5><p>我们可以利用<strong>putExtra</strong>方法将想要传递的数据暂存在<strong>Intent</strong>中，如下：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="keyword">data</span> = <span class="string">&quot;Hello secondActivity&quot;</span></span><br><span class="line"><span class="keyword">var</span> intent = Intent(<span class="keyword">this</span>,SecondActivity::<span class="keyword">class</span>.java)</span><br><span class="line">intent.putExtra(<span class="string">&quot;extra_data&quot;</span>,<span class="keyword">data</span>)</span><br><span class="line">startActivity(intent)</span><br></pre></td></tr></table></figure><p>那么在<strong>SecondActivity</strong>中我们就可以将存放的数据从<strong>intent</strong>中取出</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> extra_data = intent.getStringExtra(<span class="string">&quot;extra_data&quot;</span>)</span><br><span class="line">Log.d(<span class="string">&quot;extra_data&quot;</span>, <span class="string">&quot;<span class="variable">$extra_data</span>&quot;</span>)</span><br></pre></td></tr></table></figure><h5 id="使用隐式Intent">使用隐式Intent</h5><p>在manifests中声明一个activity</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">activity</span></span></span><br><span class="line"><span class="tag">          <span class="attr">android:name</span>=<span class="string">&quot;.SecondActivity&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">android:exported</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">          &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">&quot;com.thylearncode.firstactivity.ACTION_START&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">&quot;android.intent.category.DEFAULT&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">activity</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> intent = Intent(<span class="string">&quot;com.thylearncode.firstactivity.ACTION_START&quot;</span>)</span><br><span class="line">startActivity(intent)</span><br></pre></td></tr></table></figure><p>使用隐式Intent，我们不仅可以启动自己程序的<strong>Activity</strong>，还可以启动其他程序的<strong>Activity</strong></p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> intent = Intent(Intent.ACTION_VIEW)</span><br><span class="line">intent.<span class="keyword">data</span> = Uri.parse(<span class="string">&quot;https://www.baidu.com&quot;</span>)</span><br><span class="line">startActivity(intent)</span><br></pre></td></tr></table></figure><p>上述代码会打开https://www.baidu.com。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> intent = Intent(Intent.ACTION_DIAL)</span><br><span class="line">intent.<span class="keyword">data</span> = Uri.parse(<span class="string">&quot;tel:10086&quot;</span>)</span><br><span class="line">startActivity(intent)</span><br></pre></td></tr></table></figure><h5 id="Activity的声明周期">Activity的声明周期</h5><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>A</mi><mi>c</mi><mi>t</mi><mi>i</mi><mi>v</mi><mi>i</mi><mi>t</mi><mi>y</mi></mrow><annotation encoding="application/x-tex">Activity</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8778em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">A</span><span class="mord mathnormal">c</span><span class="mord mathnormal">t</span><span class="mord mathnormal">i</span><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="mord mathnormal">i</span><span class="mord mathnormal">t</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span></span></span></span>是可以层叠的，我们每启动一个新的<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>A</mi><mi>c</mi><mi>t</mi><mi>i</mi><mi>v</mi><mi>i</mi><mi>t</mi><mi>y</mi></mrow><annotation encoding="application/x-tex">Activity</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8778em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">A</span><span class="mord mathnormal">c</span><span class="mord mathnormal">t</span><span class="mord mathnormal">i</span><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="mord mathnormal">i</span><span class="mord mathnormal">t</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span></span></span></span>，就会覆盖在原<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>A</mi><mi>c</mi><mi>t</mi><mi>i</mi><mi>v</mi><mi>i</mi><mi>t</mi><mi>y</mi></mrow><annotation encoding="application/x-tex">Activity</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8778em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">A</span><span class="mord mathnormal">c</span><span class="mord mathnormal">t</span><span class="mord mathnormal">i</span><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="mord mathnormal">i</span><span class="mord mathnormal">t</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span></span></span></span>上，然后点击<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>B</mi><mi>a</mi><mi>c</mi><mi>k</mi></mrow><annotation encoding="application/x-tex">Back</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="mord mathnormal">a</span><span class="mord mathnormal">c</span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span></span></span></span>键或者调用<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi><mi>i</mi><mi>n</mi><mi>i</mi><mi>s</mi><mi>h</mi></mrow><annotation encoding="application/x-tex">finish</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mord mathnormal">ini</span><span class="mord mathnormal">s</span><span class="mord mathnormal">h</span></span></span></span>方法就会销毁最上面的<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>A</mi><mi>c</mi><mi>t</mi><mi>i</mi><mi>v</mi><mi>i</mi><mi>t</mi><mi>y</mi></mrow><annotation encoding="application/x-tex">Activity</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8778em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">A</span><span class="mord mathnormal">c</span><span class="mord mathnormal">t</span><span class="mord mathnormal">i</span><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="mord mathnormal">i</span><span class="mord mathnormal">t</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span></span></span></span>。</p><p>每个<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>A</mi><mi>c</mi><mi>t</mi><mi>i</mi><mi>v</mi><mi>i</mi><mi>t</mi><mi>y</mi></mrow><annotation encoding="application/x-tex">Activity</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8778em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">A</span><span class="mord mathnormal">c</span><span class="mord mathnormal">t</span><span class="mord mathnormal">i</span><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="mord mathnormal">i</span><span class="mord mathnormal">t</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span></span></span></span>在其生命周期中最多可能会有四种状态</p><p>1.运行状态：</p><p>当<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>A</mi><mi>c</mi><mi>t</mi><mi>i</mi><mi>v</mi><mi>i</mi><mi>t</mi><mi>y</mi></mrow><annotation encoding="application/x-tex">Activity</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8778em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">A</span><span class="mord mathnormal">c</span><span class="mord mathnormal">t</span><span class="mord mathnormal">i</span><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="mord mathnormal">i</span><span class="mord mathnormal">t</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span></span></span></span>位于栈顶时，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>A</mi><mi>c</mi><mi>t</mi><mi>i</mi><mi>v</mi><mi>i</mi><mi>t</mi><mi>y</mi></mrow><annotation encoding="application/x-tex">Activity</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8778em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">A</span><span class="mord mathnormal">c</span><span class="mord mathnormal">t</span><span class="mord mathnormal">i</span><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="mord mathnormal">i</span><span class="mord mathnormal">t</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span></span></span></span>就处于运行状态。</p><p>2.暂停状态：</p><p>当一个<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>A</mi><mi>c</mi><mi>t</mi><mi>i</mi><mi>v</mi><mi>i</mi><mi>t</mi><mi>y</mi></mrow><annotation encoding="application/x-tex">Activity</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8778em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">A</span><span class="mord mathnormal">c</span><span class="mord mathnormal">t</span><span class="mord mathnormal">i</span><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="mord mathnormal">i</span><span class="mord mathnormal">t</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span></span></span></span>不再处于栈顶位置，但依然可见时，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>A</mi><mi>c</mi><mi>t</mi><mi>i</mi><mi>v</mi><mi>i</mi><mi>t</mi><mi>y</mi></mrow><annotation encoding="application/x-tex">Activity</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8778em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">A</span><span class="mord mathnormal">c</span><span class="mord mathnormal">t</span><span class="mord mathnormal">i</span><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="mord mathnormal">i</span><span class="mord mathnormal">t</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span></span></span></span>就进入了暂停状态。这里需要解释的是，有的<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>A</mi><mi>c</mi><mi>t</mi><mi>i</mi><mi>v</mi><mi>i</mi><mi>t</mi><mi>y</mi></mrow><annotation encoding="application/x-tex">Activity</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8778em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">A</span><span class="mord mathnormal">c</span><span class="mord mathnormal">t</span><span class="mord mathnormal">i</span><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="mord mathnormal">i</span><span class="mord mathnormal">t</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span></span></span></span>是对话框形式，它只会占用屏幕中间的部分区域，处于暂停状态的<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>A</mi><mi>c</mi><mi>t</mi><mi>i</mi><mi>v</mi><mi>i</mi><mi>t</mi><mi>y</mi></mrow><annotation encoding="application/x-tex">Activity</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8778em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">A</span><span class="mord mathnormal">c</span><span class="mord mathnormal">t</span><span class="mord mathnormal">i</span><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="mord mathnormal">i</span><span class="mord mathnormal">t</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span></span></span></span>仍然是完全存活的。</p><p>3.停止状态：</p><p>当一个<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>A</mi><mi>c</mi><mi>t</mi><mi>i</mi><mi>v</mi><mi>i</mi><mi>t</mi><mi>y</mi></mrow><annotation encoding="application/x-tex">Activity</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8778em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">A</span><span class="mord mathnormal">c</span><span class="mord mathnormal">t</span><span class="mord mathnormal">i</span><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="mord mathnormal">i</span><span class="mord mathnormal">t</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span></span></span></span>不再处于栈顶位置，并且完全不可见时，就进入了停止状态。系统仍然会为这种<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>A</mi><mi>c</mi><mi>t</mi><mi>i</mi><mi>v</mi><mi>i</mi><mi>t</mi><mi>y</mi></mrow><annotation encoding="application/x-tex">Activity</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8778em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">A</span><span class="mord mathnormal">c</span><span class="mord mathnormal">t</span><span class="mord mathnormal">i</span><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="mord mathnormal">i</span><span class="mord mathnormal">t</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span></span></span></span>保存相应的状态和成员变量。</p><p>4.销毁状态：</p><p>一个<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>A</mi><mi>c</mi><mi>t</mi><mi>i</mi><mi>v</mi><mi>i</mi><mi>t</mi><mi>y</mi></mrow><annotation encoding="application/x-tex">Activity</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8778em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">A</span><span class="mord mathnormal">c</span><span class="mord mathnormal">t</span><span class="mord mathnormal">i</span><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="mord mathnormal">i</span><span class="mord mathnormal">t</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span></span></span></span>从返回栈中移除后就变成了销毁状态。系统最倾向于回收这种状态的<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>A</mi><mi>c</mi><mi>t</mi><mi>i</mi><mi>v</mi><mi>i</mi><mi>t</mi><mi>y</mi></mrow><annotation encoding="application/x-tex">Activity</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8778em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">A</span><span class="mord mathnormal">c</span><span class="mord mathnormal">t</span><span class="mord mathnormal">i</span><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="mord mathnormal">i</span><span class="mord mathnormal">t</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span></span></span></span>。</p><h3 id="Fragment">Fragment</h3><p>1.Fragment是到Android3.0+以后</p><p>2.一个Activity可以运行多个Fragment</p><p>3.Fragment不能脱离Activity而存在</p><p>4.Activity是屏幕的主体，而Fragment是Activity的一个组成元素</p><h4 id="Fragment的简单用法">Fragment的简单用法</h4><p>我们先准备一个简单的<strong>Fragment</strong>项目。在一个<strong>Activity</strong>当中添加两个<strong>Fragment</strong>，并让这两个<strong>Fragment</strong>平分<strong>Activity</strong>的空间。</p><p>新建一个左侧Fragment的布局<strong>left_fragment.xml</strong>，代码如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:orientation</span>=<span class="string">&quot;vertical&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/button&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_gravity</span>=<span class="string">&quot;center_horizontal&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">&quot;Button&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">Button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><p>新建右侧<strong>Fragment</strong>的布局<strong>right_fragment.xml</strong>，代码如下：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span><br><span class="line">&lt;LinearLayout xmlns:android=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span><br><span class="line">    android:layout_width=<span class="string">&quot;match_parent&quot;</span></span><br><span class="line">    android:layout_height=<span class="string">&quot;match_parent&quot;</span></span><br><span class="line">    android:background=<span class="string">&quot;#00ff00&quot;</span></span><br><span class="line">    android:orientation=<span class="string">&quot;vertical&quot;</span>&gt;</span><br><span class="line">    &lt;TextView</span><br><span class="line">        android:layout_width=<span class="string">&quot;wrap_content&quot;</span></span><br><span class="line">        android:layout_height=<span class="string">&quot;wrap_content&quot;</span></span><br><span class="line">        android:layout_gravity=<span class="string">&quot;center_horizontal&quot;</span></span><br><span class="line">        android:text=<span class="string">&quot;This is right Fragment&quot;</span></span><br><span class="line">        android:textSize=<span class="string">&quot;24sp&quot;</span>&gt;</span><br><span class="line">    &lt;/TextView&gt;</span><br><span class="line">&lt;/LinearLayout&gt;</span><br></pre></td></tr></table></figure><p>然后，我们新建一个<strong>LeftFragment</strong>类，让其继承<strong>Fragment</strong>，这里需要注意的是，选择<strong>androidx</strong>库中的<strong>Fragment</strong>。</p><p>现在编写<strong>LeftFragment</strong>中的代码：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LeftFragment</span> : <span class="type">Fragment</span></span>() &#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCreateView</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">        inflater: <span class="type">LayoutInflater</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">        container: <span class="type">ViewGroup</span>?,</span></span></span><br><span class="line"><span class="params"><span class="function">        savedInstanceState: <span class="type">Bundle</span>?</span></span></span><br><span class="line"><span class="params"><span class="function">    )</span></span>: View? &#123;</span><br><span class="line">        <span class="keyword">return</span> inflater.inflate(R.layout.left_fragment, container, <span class="literal">false</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接着用同样的方法创建<strong>RightFragment</strong>：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RightFragment</span> : <span class="type">Fragment</span></span>() &#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCreateView</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">        inflater: <span class="type">LayoutInflater</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">        container: <span class="type">ViewGroup</span>?,</span></span></span><br><span class="line"><span class="params"><span class="function">        savedInstanceState: <span class="type">Bundle</span>?</span></span></span><br><span class="line"><span class="params"><span class="function">    )</span></span>: View? &#123;</span><br><span class="line">        <span class="keyword">return</span> inflater.inflate(R.layout.right_fragment, container, <span class="literal">false</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来修改<strong>main_activity.xml</strong>中的代码：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:app</span>=<span class="string">&quot;http://schemas.android.com/apk/res-auto&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tools</span>=<span class="string">&quot;http://schemas.android.com/tools&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:orientation</span>=<span class="string">&quot;horizontal&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">tools:context</span>=<span class="string">&quot;.MainActivity&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">fragment</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/leftFrag&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:name</span>=<span class="string">&quot;com.thylearncode.myfragment.LeftFragment&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;0dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_weight</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">fragment</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">fragment</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/rightFrag&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:name</span>=<span class="string">&quot;com.thylearncode.myfragment.RightFragment&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;0dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_weight</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">fragment</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><p>可以看到，我们使用<strong>Fragment</strong>标签在布局中添加了<strong>Fragment</strong>，这里需要通过<strong>android:name</strong>来显式添加<strong>Fragment</strong>的类名。</p><h4 id="动态添加Fragment">动态添加Fragment</h4><p>新建<strong>another_right_fragment.xml</strong>，代码如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:background</span>=<span class="string">&quot;#ffff00&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:orientation</span>=<span class="string">&quot;vertical&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_gravity</span>=<span class="string">&quot;center_horizontal&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">&quot;This is another right fragment&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:textSize</span>=<span class="string">&quot;24sp&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">TextView</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><p>该布局文件的代码和<strong>right_fragment.xml</strong>的代码相同，只是将背景改为了黄色。并将提示的文字修改了，然后新建<strong>AnotherRightFragment</strong>作为另一个右侧<strong>Fragment</strong>，代码如下：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AnotherRightFragment</span> : <span class="type">Fragment</span></span>() &#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCreateView</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">        inflater: <span class="type">LayoutInflater</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">        container: <span class="type">ViewGroup</span>?,</span></span></span><br><span class="line"><span class="params"><span class="function">        savedInstanceState: <span class="type">Bundle</span>?</span></span></span><br><span class="line"><span class="params"><span class="function">    )</span></span>: View? &#123;</span><br><span class="line">        <span class="keyword">return</span> inflater.inflate(R.layout.another_right_fragment, container, <span class="literal">false</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来，修改<strong>activity_main.xml</strong>的代码。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:app</span>=<span class="string">&quot;http://schemas.android.com/apk/res-auto&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tools</span>=<span class="string">&quot;http://schemas.android.com/tools&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:orientation</span>=<span class="string">&quot;horizontal&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">tools:context</span>=<span class="string">&quot;.MainActivity&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">fragment</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/leftFrag&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:name</span>=<span class="string">&quot;com.thylearncode.myfragment.LeftFragment&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;0dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_weight</span>=<span class="string">&quot;1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">fragment</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">FrameLayout</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/rightLayout&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;0dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_weight</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">FrameLayout</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><p>下面我们在<strong>FrameLayout</strong>中添加内容，从而实现动态添加<strong>Fragment</strong>的功能，修改<strong>MainActivity</strong>中的代码。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> : <span class="type">AppCompatActivity</span></span>() &#123;</span><br><span class="line">    <span class="keyword">private</span>  <span class="keyword">var</span> button: Button? = <span class="literal">null</span></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCreate</span><span class="params">(savedInstanceState: <span class="type">Bundle</span>?)</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState)</span><br><span class="line">        setContentView(R.layout.activity_main)</span><br><span class="line">        <span class="keyword">val</span> fragment = supportFragmentManager.findFragmentById(R.id.leftFrag) <span class="keyword">as</span> LeftFragment</span><br><span class="line">        button = fragment.activity?.findViewById&lt;Button&gt;(R.id.button)</span><br><span class="line">        button?.setOnClickListener &#123;</span><br><span class="line">            replaceFragment(AnotherRightFragment())</span><br><span class="line">        &#125;</span><br><span class="line">        replaceFragment(RightFragment())</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">replaceFragment</span><span class="params">(fragment: <span class="type">Fragment</span>)</span></span> &#123;</span><br><span class="line">        <span class="keyword">val</span> fragmentManager = supportFragmentManager</span><br><span class="line">        <span class="keyword">val</span> transaction = fragmentManager.beginTransaction()</span><br><span class="line">        transaction.replace(R.id.rightLayout,fragment)</span><br><span class="line">        transaction.commit()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先，我们给左侧<strong>Fragment</strong>中的按钮注册了一个点击事件，然后调用<strong>replaceFragment</strong>动态添加了RightFragment，当点击左侧<strong>Fragment</strong>中的按钮时，又会调用<strong>replaceFragment</strong>方法，将右侧<strong>Fragment</strong>替换为<strong>AnotherRightFragment</strong>，可以发现，动态添加<strong>Fragment</strong>主要分为5步：</p><p>1.创建待添加<strong>Fragment</strong>的实例。</p><p>2.获取<strong>FragmentManager</strong>，在<strong>Activity</strong>中可以调用<strong>supportFragmentManager</strong>。</p><p>3.开启一个事务，通过调用<strong>beginTransaction</strong>方法开启。</p><p>4.向容器内添加或者替换<strong>Fragment</strong>，一般使用<strong>replace</strong>方法替换，需要传入容器的id和待添加的<strong>Fragment</strong>实例。</p><p>5.提交事务，调用<strong>commit</strong>方法完成。</p><h4 id="在Fragment中实现返回栈">在Fragment中实现返回栈</h4><p>在上一小节中，我们成功实现了向<strong>Activity</strong>中动态添加<strong>Fragment</strong>的功能，不过当添加了一个<strong>Fragment</strong>后，这时候按<strong>Back</strong>键就会直接退出，而我们如果想实现按下<strong>Back</strong>键回到上一个<strong>Fragment</strong>，该怎么实现呢？</p><p>我们可以利用<strong>FragementTransaction</strong>中的<strong>addToBackStack</strong>方法。可将事务添加到返回栈中。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">replaceFragment</span><span class="params">(fragment: <span class="type">Fragment</span>)</span></span> &#123;</span><br><span class="line">        <span class="keyword">val</span> fragmentManager = supportFragmentManager</span><br><span class="line">        <span class="keyword">val</span> transaction = fragmentManager.beginTransaction()</span><br><span class="line">        transaction.replace(R.id.rightLayout,fragment)</span><br><span class="line">        transaction.addToBackStack(<span class="literal">null</span>)</span><br><span class="line">        transaction.commit()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Fragment和Activity的交互">Fragment和Activity的交互</h4><p>虽然<strong>Fragment</strong>是嵌入在<strong>Activity</strong>中显示的，可是它们的关系没有那么紧密，<strong>Fragment</strong>和<strong>Activity</strong>是各自存在于一个独立的类当中的，如果想要在<strong>Activity</strong>中调用<strong>Fragment</strong>的方法，或者在<strong>Fragment</strong>调用<strong>Activity</strong>中的方法，应该怎么处理呢。</p><p>为了方便<strong>Fragment</strong>和<strong>Activity</strong>之间进行交互，<strong>supportFragmentManager</strong>提供了<strong>findFragmentById</strong>方法来获取<strong>Fragment</strong>实例，代码如下：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> fragment = supportFragmentManager.findFragmentById(R.id.leftFrag) <span class="keyword">as</span> LeftFragment</span><br></pre></td></tr></table></figure><p>那么，掌握了如何在<strong>Activity</strong>中调用<strong>Fragment</strong>的方法，那么如何在<strong>Fragment</strong>中调用Activity的方法呢，在每个Fragment中都可以通过调用<strong>getActivity</strong>方法来获取当前<strong>Fragment</strong>相关联的Activity实例。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (activity != <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">val</span> mainActivity = activity <span class="keyword">as</span> MainActivity</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="LinearLayout">LinearLayout</h3><p>这种布局会将它所包含的控件在线性方向上以此排列</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;LinearLayout xmlns:android=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span><br><span class="line">    xmlns:app=<span class="string">&quot;http://schemas.android.com/apk/res-auto&quot;</span></span><br><span class="line">    xmlns:tools=<span class="string">&quot;http://schemas.android.com/tools&quot;</span></span><br><span class="line">    android:layout_width=<span class="string">&quot;match_parent&quot;</span></span><br><span class="line">    android:layout_height=<span class="string">&quot;match_parent&quot;</span></span><br><span class="line">    tools:context=<span class="string">&quot;.MainActivity&quot;</span></span><br><span class="line">    android:orientation=<span class="string">&quot;vertical&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">    &lt;Button</span><br><span class="line">        android:id=<span class="string">&quot;@+id/button1&quot;</span></span><br><span class="line">        android:layout_width=<span class="string">&quot;wrap_content&quot;</span></span><br><span class="line">        android:layout_height=<span class="string">&quot;wrap_content&quot;</span></span><br><span class="line">        android:text=<span class="string">&quot;button 1&quot;</span>&gt;</span><br><span class="line">    &lt;/Button&gt;</span><br><span class="line"></span><br><span class="line">    &lt;Button</span><br><span class="line">        android:id=<span class="string">&quot;@+id/button2&quot;</span></span><br><span class="line">        android:layout_width=<span class="string">&quot;wrap_content&quot;</span></span><br><span class="line">        android:layout_height=<span class="string">&quot;wrap_content&quot;</span></span><br><span class="line">        android:text=<span class="string">&quot;button 2&quot;</span>&gt;</span><br><span class="line">    &lt;/Button&gt;</span><br><span class="line"></span><br><span class="line">    &lt;Button</span><br><span class="line">        android:id=<span class="string">&quot;@+id/button3&quot;</span></span><br><span class="line">        android:layout_width=<span class="string">&quot;wrap_content&quot;</span></span><br><span class="line">        android:layout_height=<span class="string">&quot;wrap_content&quot;</span></span><br><span class="line">        android:text=<span class="string">&quot;button 3&quot;</span>&gt;</span><br><span class="line">    &lt;/Button&gt;</span><br><span class="line">&lt;/LinearLayout&gt;</span><br></pre></td></tr></table></figure><p>其中，<code>android:orientation</code>属性控制排列方向，其中，<code>vertical</code>表示竖直排列，<code>horizontal</code>表示水平排列。</p><p>其中，<code>android:layout_gravity</code>可以控制控件在布局中的相对位置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:app</span>=<span class="string">&quot;http://schemas.android.com/apk/res-auto&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tools</span>=<span class="string">&quot;http://schemas.android.com/tools&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">tools:context</span>=<span class="string">&quot;.MainActivity&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:orientation</span>=<span class="string">&quot;horizontal&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/button1&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_gravity</span>=<span class="string">&quot;top&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">&quot;button 1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Button</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/button2&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_gravity</span>=<span class="string">&quot;center&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">&quot;button 2&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Button</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/button3&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_gravity</span>=<span class="string">&quot;bottom&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">&quot;button 3&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>android:layout_weight</code>这个属性可以允许我们使用比例的方式来指定控件的大小，</p><p>系统会将<code>LinearLayout</code>下所有控件指定的<code>layout_weight</code>相加，得到一个总值，然后每个控件所占大小比例就是用该控件的<code>layout_weight</code>值除以算出的总值。</p><h3 id="RelativeLayout">RelativeLayout</h3><p><code>RelativeLayout</code>又称为相对布局，它可以通过相对定位的方式让控件出现在布局的任意位置。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">&lt;RelativeLayout xmlns:android=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span><br><span class="line">    xmlns:app=<span class="string">&quot;http://schemas.android.com/apk/res-auto&quot;</span></span><br><span class="line">    xmlns:tools=<span class="string">&quot;http://schemas.android.com/tools&quot;</span></span><br><span class="line">    android:layout_width=<span class="string">&quot;match_parent&quot;</span></span><br><span class="line">    android:layout_height=<span class="string">&quot;match_parent&quot;</span></span><br><span class="line">    tools:context=<span class="string">&quot;.MainActivity&quot;</span>&gt;</span><br><span class="line">    &lt;Button</span><br><span class="line">        android:id=<span class="string">&quot;@+id/button1&quot;</span></span><br><span class="line">        android:layout_width=<span class="string">&quot;wrap_content&quot;</span></span><br><span class="line">        android:layout_height=<span class="string">&quot;wrap_content&quot;</span></span><br><span class="line">        android:layout_alignParentLeft=<span class="string">&quot;true&quot;</span></span><br><span class="line">        android:layout_alignParentTop=<span class="string">&quot;true&quot;</span></span><br><span class="line">        android:text=<span class="string">&quot;Send&quot;</span>&gt;&lt;/Button&gt;</span><br><span class="line"></span><br><span class="line">    &lt;Button</span><br><span class="line">        android:id=<span class="string">&quot;@+id/button2&quot;</span></span><br><span class="line">        android:layout_width=<span class="string">&quot;wrap_content&quot;</span></span><br><span class="line">        android:layout_height=<span class="string">&quot;wrap_content&quot;</span></span><br><span class="line">        android:layout_alignParentBottom=<span class="string">&quot;true&quot;</span></span><br><span class="line">        android:layout_alignParentRight=<span class="string">&quot;true&quot;</span></span><br><span class="line">        android:text=<span class="string">&quot;Send&quot;</span>&gt;&lt;/Button&gt;</span><br><span class="line"></span><br><span class="line">    &lt;Button</span><br><span class="line">        android:id=<span class="string">&quot;@+id/button3&quot;</span></span><br><span class="line">        android:layout_width=<span class="string">&quot;wrap_content&quot;</span></span><br><span class="line">        android:layout_height=<span class="string">&quot;wrap_content&quot;</span></span><br><span class="line">        android:layout_centerInParent=<span class="string">&quot;true&quot;</span></span><br><span class="line">        android:text=<span class="string">&quot;Send&quot;</span>&gt;&lt;/Button&gt;</span><br><span class="line"></span><br><span class="line">    &lt;Button</span><br><span class="line">        android:id=<span class="string">&quot;@+id/button4&quot;</span></span><br><span class="line">        android:layout_width=<span class="string">&quot;wrap_content&quot;</span></span><br><span class="line">        android:layout_height=<span class="string">&quot;wrap_content&quot;</span></span><br><span class="line">        android:layout_alignParentRight=<span class="string">&quot;true&quot;</span></span><br><span class="line">        android:layout_alignParentTop=<span class="string">&quot;true&quot;</span></span><br><span class="line">        android:text=<span class="string">&quot;Send&quot;</span>&gt;&lt;/Button&gt;</span><br><span class="line"></span><br><span class="line">    &lt;Button</span><br><span class="line">        android:id=<span class="string">&quot;@+id/button5&quot;</span></span><br><span class="line">        android:layout_width=<span class="string">&quot;wrap_content&quot;</span></span><br><span class="line">        android:layout_height=<span class="string">&quot;wrap_content&quot;</span></span><br><span class="line">        android:layout_alignParentLeft=<span class="string">&quot;true&quot;</span></span><br><span class="line">        android:layout_alignParentBottom=<span class="string">&quot;true&quot;</span></span><br><span class="line">        android:text=<span class="string">&quot;Send&quot;</span>&gt;&lt;/Button&gt;</span><br><span class="line"></span><br><span class="line">&lt;/RelativeLayout&gt;</span><br></pre></td></tr></table></figure><h3 id="FrameLayout">FrameLayout</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;FrameLayout xmlns:android=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span><br><span class="line">    xmlns:app=<span class="string">&quot;http://schemas.android.com/apk/res-auto&quot;</span></span><br><span class="line">    xmlns:tools=<span class="string">&quot;http://schemas.android.com/tools&quot;</span></span><br><span class="line">    android:layout_width=<span class="string">&quot;match_parent&quot;</span></span><br><span class="line">    android:layout_height=<span class="string">&quot;match_parent&quot;</span></span><br><span class="line">    android:orientation=<span class="string">&quot;vertical&quot;</span></span><br><span class="line">    tools:context=<span class="string">&quot;.MainActivity&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">    &lt;TextView</span><br><span class="line">        android:layout_width=<span class="string">&quot;wrap_content&quot;</span></span><br><span class="line">        android:layout_height=<span class="string">&quot;wrap_content&quot;</span></span><br><span class="line">        android:text=<span class="string">&quot;TextView&quot;</span>&gt;&lt;/TextView&gt;</span><br><span class="line"></span><br><span class="line">    &lt;Button</span><br><span class="line">        android:layout_width=<span class="string">&quot;wrap_content&quot;</span></span><br><span class="line">        android:layout_height=<span class="string">&quot;wrap_content&quot;</span></span><br><span class="line">        android:text=<span class="string">&quot;hello&quot;</span>&gt;&lt;/Button&gt;</span><br><span class="line">&lt;/FrameLayout&gt;</span><br></pre></td></tr></table></figure><p>可以发现，文字和按钮都位于布局的左上角，同时我们可以使用layout属性来定义其在布局中的对齐方式。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;FrameLayout xmlns:android=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span><br><span class="line">    xmlns:app=<span class="string">&quot;http://schemas.android.com/apk/res-auto&quot;</span></span><br><span class="line">    xmlns:tools=<span class="string">&quot;http://schemas.android.com/tools&quot;</span></span><br><span class="line">    android:layout_width=<span class="string">&quot;match_parent&quot;</span></span><br><span class="line">    android:layout_height=<span class="string">&quot;match_parent&quot;</span></span><br><span class="line">    android:orientation=<span class="string">&quot;vertical&quot;</span></span><br><span class="line">    tools:context=<span class="string">&quot;.MainActivity&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">    &lt;TextView</span><br><span class="line">        android:layout_width=<span class="string">&quot;wrap_content&quot;</span></span><br><span class="line">        android:layout_height=<span class="string">&quot;wrap_content&quot;</span></span><br><span class="line">        android:text=<span class="string">&quot;TextView&quot;</span></span><br><span class="line">        android:layout_gravity=<span class="string">&quot;left&quot;</span>&gt;&lt;/TextView&gt;</span><br><span class="line"></span><br><span class="line">    &lt;Button</span><br><span class="line">        android:layout_width=<span class="string">&quot;wrap_content&quot;</span></span><br><span class="line">        android:layout_height=<span class="string">&quot;wrap_content&quot;</span></span><br><span class="line">        android:text=<span class="string">&quot;hello&quot;</span></span><br><span class="line">        android:layout_gravity=<span class="string">&quot;right&quot;</span>&gt;&lt;/Button&gt;</span><br><span class="line">&lt;/FrameLayout&gt;</span><br></pre></td></tr></table></figure><h2 id="UI界面">UI界面</h2><h3 id="TextView">TextView</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:app</span>=<span class="string">&quot;http://schemas.android.com/apk/res-auto&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tools</span>=<span class="string">&quot;http://schemas.android.com/tools&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">tools:context</span>=<span class="string">&quot;.MainActivity&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:orientation</span>=<span class="string">&quot;vertical&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">&quot;This is first textview&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">TextView</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span>    </span><br></pre></td></tr></table></figure><p>match_parent:表示当前控件的大小和父布局大小一样。</p><p>wrap_content:表示让当前控件的大小能够包住里面的内容。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:gravity</span>=<span class="string">&quot;center&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">&quot;This is first textview&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>android:gravity:指定文字的对齐方式，可选值有top，bottom，start，end，center等，我们这里指定的是“center”。效果等同于&quot;center_vertical|center_horizontal&quot;。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/tv_one&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:gravity</span>=<span class="string">&quot;center_horizontal&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:shadowColor</span>=<span class="string">&quot;@color/red&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:shadowDx</span>=<span class="string">&quot;10.0&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:shadowDy</span>=<span class="string">&quot;10.0&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:shadowRadius</span>=<span class="string">&quot;3.0&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">&quot;Hello World!&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:textSize</span>=<span class="string">&quot;30sp&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>android:shadowColor:设置阴影颜色，需要与shadowRadius一起使用。</p><p>android:shadowRadius：设置阴影的模糊程度，设置为0.1就变成字体颜色了，建议使用3.0<br>android:shadowDx：设置阴影在水平方向的偏移，就是水平方向阴影开始的横坐标位置。</p><p>android:shadowDy:  设置阴影在竖直方向的偏移，就是竖直方向阴影开始的纵坐标位置。</p><p>TextView还可以用来实现跑马灯效果</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/tv_one&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:gravity</span>=<span class="string">&quot;center_horizontal&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:shadowColor</span>=<span class="string">&quot;@color/red&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:shadowDx</span>=<span class="string">&quot;10.0&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:shadowDy</span>=<span class="string">&quot;10.0&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:shadowRadius</span>=<span class="string">&quot;3.0&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:singleLine</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:ellipsize</span>=<span class="string">&quot;marquee&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:marqueeRepeatLimit</span>=<span class="string">&quot;marquee_forever&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:focusable</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:clickable</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:focusableInTouchMode</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">&quot;@string/tv_one&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:textSize</span>=<span class="string">&quot;30sp&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>android:singleLine：内容单行显示</p><p>android:focusable：是否可以获取焦点</p><p>android:focusableInTouchMode：用于控制视图在触摸模式下是否可以聚焦</p><p>android:ellipsize：在哪里省略文本</p><p>android:marqueeRepeatLimit：字幕动画重复的次数</p><p>但是，这样的TextView只有点击获取焦点后才能实现跑马灯效果。</p><p>因此，可以使用自定义TextView</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTextView</span> <span class="keyword">extends</span> <span class="title">TextView</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyTextView</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyTextView</span><span class="params">(Context context, <span class="meta">@Nullable</span> AttributeSet attrs)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context, attrs);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyTextView</span><span class="params">(Context context, <span class="meta">@Nullable</span> AttributeSet attrs, <span class="keyword">int</span> defStyleAttr)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context, attrs, defStyleAttr);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 声明焦点为true</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isFocused</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">com.thylearncode.mytextview.MyTextView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/tv_one&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:gravity</span>=<span class="string">&quot;center_horizontal&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:shadowColor</span>=<span class="string">&quot;@color/red&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:shadowDx</span>=<span class="string">&quot;10.0&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:shadowDy</span>=<span class="string">&quot;10.0&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:shadowRadius</span>=<span class="string">&quot;3.0&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:singleLine</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:ellipsize</span>=<span class="string">&quot;marquee&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:marqueeRepeatLimit</span>=<span class="string">&quot;marquee_forever&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:focusable</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:clickable</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:focusableInTouchMode</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">&quot;@string/tv_one&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:textSize</span>=<span class="string">&quot;30sp&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>或者使用<code>requestFocus</code>标签</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/tv_one&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:clickable</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:ellipsize</span>=<span class="string">&quot;marquee&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:focusable</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:focusableInTouchMode</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:gravity</span>=<span class="string">&quot;center_horizontal&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:marqueeRepeatLimit</span>=<span class="string">&quot;marquee_forever&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:shadowColor</span>=<span class="string">&quot;@color/red&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:shadowDx</span>=<span class="string">&quot;10.0&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:shadowDy</span>=<span class="string">&quot;10.0&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:shadowRadius</span>=<span class="string">&quot;3.0&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:singleLine</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">&quot;@string/tv_one&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:textSize</span>=<span class="string">&quot;30sp&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">requestFocus</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">TextView</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="button控件">button控件</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/button&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">&quot;Button&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>给button的点击事件注册一个监听器：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> button1 : Button = findViewById(R.id.button)</span><br><span class="line">button1.setOnClickListener &#123;</span><br><span class="line">    <span class="keyword">var</span> intent = Intent(Intent.ACTION_DIAL)</span><br><span class="line">    intent.<span class="keyword">data</span> = Uri.parse(<span class="string">&quot;tel:10086&quot;</span>)</span><br><span class="line">    startActivity(intent)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>button按钮的点击在kotlin里也可以写成如下函数式API的形式。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> : <span class="type">AppCompatActivity</span></span>(), View.OnClickListener &#123;</span><br><span class="line">    <span class="keyword">var</span> btn: Button? = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCreate</span><span class="params">(savedInstanceState: <span class="type">Bundle</span>?)</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState)</span><br><span class="line">        setContentView(R.layout.activity_main)</span><br><span class="line">        btn = findViewById(R.id.btn1)</span><br><span class="line">        <span class="comment">// 这里将MainActivity实例传入方法</span></span><br><span class="line">        btn?.setOnClickListener(<span class="keyword">this</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onClick</span><span class="params">(p0: <span class="type">View</span>?)</span></span> &#123;</span><br><span class="line">        <span class="keyword">when</span> (p0?.id) &#123;</span><br><span class="line">            R.id.btn1 -&gt; &#123;</span><br><span class="line">                <span class="comment">// 在这里添加逻辑</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Button事件处理">Button事件处理</h4><p>1.点击事件</p><p>2.长按事件</p><p>3.触摸事件</p><h3 id="CheckBox">CheckBox</h3><p>系统封装的复选组件</p><p><strong>CheckBox</strong>总共有两种状态：选中或者未选中<strong>setChecked</strong>()和<strong>isChecked</strong>()</p><p><strong>setOnCheckedChangeListener</strong>可以在点击<strong>CheckBox</strong>的时候触发事件。</p><p>首先，在<strong>XML</strong>中添加<strong>CheckBox</strong>控件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:app</span>=<span class="string">&quot;http://schemas.android.com/apk/res-auto&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tools</span>=<span class="string">&quot;http://schemas.android.com/tools&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:orientation</span>=<span class="string">&quot;vertical&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">tools:context</span>=<span class="string">&quot;.MainActivity&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">CheckBox</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/checkBox&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:checked</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">&quot;CheckBox&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">CheckBox</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/checkBox2&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">&quot;CheckBox&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><p>修改MainActivity</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        CheckBox checkBox = findViewById(R.id.checkBox);</span><br><span class="line">        checkBox.setChecked(<span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置是否选中(设置它的状态)</span></span><br><span class="line">        <span class="keyword">boolean</span> checked = checkBox.isChecked();</span><br><span class="line">        <span class="comment">// 获取它的状态(是否选中)</span></span><br><span class="line">        Log.d(<span class="string">&quot;isChecked&quot;</span>, String.valueOf(checked));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 该方法可以监听状态的改变</span></span><br><span class="line">        checkBox.setOnCheckedChangeListener(<span class="keyword">new</span> CompoundButton.OnCheckedChangeListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCheckedChanged</span><span class="params">(CompoundButton compoundButton, <span class="keyword">boolean</span> b)</span> </span>&#123;</span><br><span class="line">                Log.d(<span class="string">&quot;isChecked&quot;</span>, <span class="string">&quot;On changed &quot;</span> + b);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="RadioButton">RadioButton</h3><p>单选控件</p><p>可以和RadioGroup一起使用，只能选择一个。</p><p>和CheckBox的区别：</p><p>1.通过点击变成未选中。</p><p>2.一组RadioButton，只能同时选中一个</p><p>3.在大多数UI框架里，都以圆形显示</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:app</span>=<span class="string">&quot;http://schemas.android.com/apk/res-auto&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tools</span>=<span class="string">&quot;http://schemas.android.com/tools&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">tools:context</span>=<span class="string">&quot;.MainActivity&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">RadioGroup</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">RadioButton</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">&quot;@+id/RadioButton&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_weight</span>=<span class="string">&quot;1&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:text</span>=<span class="string">&quot;吃饭&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">RadioButton</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">RadioButton</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">&quot;@+id/RadioButton2&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_weight</span>=<span class="string">&quot;1&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:text</span>=<span class="string">&quot;睡觉&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">RadioButton</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">RadioButton</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">&quot;@+id/RadioButton3&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_weight</span>=<span class="string">&quot;1&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:text</span>=<span class="string">&quot;学习&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">RadioButton</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">RadioGroup</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="ToggleButton">ToggleButton</h3><p>1.切换程序中的状态</p><p>2.两种状态</p><p>​android:textOn</p><p>​android:textOff</p><p>​setChecked(boolean)</p><p>3.setOnCheckedChangeListener</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ToggleButton</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/toggleButton&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:checked</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">&quot;ToggleButton&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:textOff</span>=<span class="string">&quot;bye bye&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:textOn</span>=<span class="string">&quot;hello&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><h3 id="EditText">EditText</h3><p><strong>EditText</strong>是程序用于和用户进行交互的另一种重要控件，它允许用户在控件里输入和编辑内容。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">EditText</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/editText&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">EditText</span>&gt;</span></span><br></pre></td></tr></table></figure><p>那么，如果我们想给<strong>EditText</strong>添加一些提示性文字，我们可以使用</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">EditText</span></span></span><br><span class="line"><span class="tag">          <span class="attr">android:id</span>=<span class="string">&quot;@+id/editText&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">android:hint</span>=<span class="string">&quot;请输入用户名&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">EditText</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如果我们想要控制<strong>EditText</strong>的最大行数，我们可以使用android:maxLines确定EditText的最大行数，当输入的内容超过两行时，文本就会向上滚动，EditText则不会继续拉伸。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">EditText</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/editText&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:hint</span>=<span class="string">&quot;请输入用户名&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:maxLines</span>=<span class="string">&quot;2&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">EditText</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="ImageView">ImageView</h3><p>ImageView是用于在界面上展示图片的一个控件，图片大多是放在以<strong>drawable</strong>开头的目录下的。现在最主流的手机屏幕分辨率大多是<strong>xxhdpi</strong>的</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ImageView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:src</span>=<span class="string">&quot;@drawable/ic_launcher_background&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ImageView</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="ProgressBar">ProgressBar</h3><p>ProgressBar用于在界面上显示一个进度条，表示我们正在加载一些数据。</p><p>进度条的定义非常简单</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ProgressBar</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/progressbar&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ProgressBar</span>&gt;</span></span><br></pre></td></tr></table></figure><p>旋转的进度条表明我们的程序正在加载数据，那么当加载完成时，我们怎么让进度条消失呢？</p><p>我们可以通过android:visibility进行指定。</p><p>可选值有三种：visibility,invisibility,gone</p><p>我们可以通过控制visibility来控制ProgressBar的可见性</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> : <span class="type">AppCompatActivity</span></span>(), View.OnClickListener &#123;</span><br><span class="line">    <span class="keyword">var</span> image: ImageView? = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> btn: Button? = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> progressBar : ProgressBar ?= <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCreate</span><span class="params">(savedInstanceState: <span class="type">Bundle</span>?)</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState)</span><br><span class="line">        setContentView(R.layout.activity_main)</span><br><span class="line">        btn = findViewById(R.id.btn1)</span><br><span class="line">        image = findViewById(R.id.image1)</span><br><span class="line">        progressBar = findViewById(R.id.progressbar)</span><br><span class="line">        btn?.setOnClickListener(<span class="keyword">this</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onClick</span><span class="params">(p0: <span class="type">View</span>?)</span></span> &#123;</span><br><span class="line">        <span class="keyword">when</span> (p0?.id) &#123;</span><br><span class="line">            R.id.btn1 -&gt; &#123;</span><br><span class="line">                <span class="keyword">if</span>(progressBar?.visibility == View.VISIBLE)&#123;</span><br><span class="line">                    progressBar?.visibility = View.GONE</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    progressBar?.visibility = View.VISIBLE</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可以设置style将进度条改为水平进度条,同时设置max属性可以设置进度条的最大值。然后我们可以在代码中动态更改进度条的进度。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ProgressBar</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:id</span>=<span class="string">&quot;@+id/progressbar&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">style</span>=<span class="string">&quot;?android:attr/progressBarStyleHorizontal&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:max</span>=<span class="string">&quot;100&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ProgressBar</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> : <span class="type">AppCompatActivity</span></span>(), View.OnClickListener &#123;</span><br><span class="line">    <span class="keyword">var</span> image: ImageView? = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> btn: Button? = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> progressBar: ProgressBar? = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCreate</span><span class="params">(savedInstanceState: <span class="type">Bundle</span>?)</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState)</span><br><span class="line">        setContentView(R.layout.activity_main)</span><br><span class="line">        btn = findViewById(R.id.btn1)</span><br><span class="line">        image = findViewById(R.id.image1)</span><br><span class="line">        progressBar = findViewById(R.id.progressbar)</span><br><span class="line">        btn?.setOnClickListener(<span class="keyword">this</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onClick</span><span class="params">(p0: <span class="type">View</span>?)</span></span> &#123;</span><br><span class="line">        <span class="keyword">when</span> (p0?.id) &#123;</span><br><span class="line">            R.id.btn1 -&gt; &#123;</span><br><span class="line">                progressBar?.progress = progressBar?.progress?.plus(<span class="number">10</span>)!!</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="创建自定义控件">创建自定义控件</h3><p>我们可以自己创建一个标题栏：</p><p>首先在<strong>layout</strong>中创建<strong>title.xml</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:background</span>=<span class="string">&quot;@drawable/title_bg&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/titleBack&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_gravity</span>=<span class="string">&quot;center&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_margin</span>=<span class="string">&quot;5dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:background</span>=<span class="string">&quot;@drawable/back_bg&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">&quot;Back&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:textColor</span>=<span class="string">&quot;#fff&quot;</span></span></span><br><span class="line"><span class="tag">        &gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;0dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_weight</span>=<span class="string">&quot;1&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_gravity</span>=<span class="string">&quot;center&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">&quot;Title Text&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:gravity</span>=<span class="string">&quot;center&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:textColor</span>=<span class="string">&quot;#fff&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:textSize</span>=<span class="string">&quot;24sp&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">TextView</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/titleEdit&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_gravity</span>=<span class="string">&quot;center&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_margin</span>=<span class="string">&quot;5dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:background</span>=<span class="string">&quot;@drawable/edit_bg&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">&quot;Edit&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:textColor</span>=<span class="string">&quot;#fff&quot;</span></span></span><br><span class="line"><span class="tag">        &gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后，我们标题栏的布局已经编写完成了，剩下就是如何在程序中使用该标题栏了，修改<strong>activity_main.xml</strong>如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:app</span>=<span class="string">&quot;http://schemas.android.com/apk/res-auto&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tools</span>=<span class="string">&quot;http://schemas.android.com/tools&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">tools:context</span>=<span class="string">&quot;.MainActivity&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">include</span> <span class="attr">layout</span>=<span class="string">&quot;@layout/title&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><p>我们只需要通过一行include语句引入标题栏布局即可。</p><p>最后在MainActivity中将系统自带的标题栏隐藏掉即可。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> android.content.Intent</span><br><span class="line"><span class="keyword">import</span> android.net.Uri</span><br><span class="line"><span class="keyword">import</span> android.os.Binder</span><br><span class="line"><span class="keyword">import</span> androidx.appcompat.app.AppCompatActivity</span><br><span class="line"><span class="keyword">import</span> android.os.Bundle</span><br><span class="line"><span class="keyword">import</span> android.view.View</span><br><span class="line"><span class="keyword">import</span> android.widget.Button</span><br><span class="line"><span class="keyword">import</span> android.widget.EditText</span><br><span class="line"><span class="keyword">import</span> android.widget.ImageView</span><br><span class="line"><span class="keyword">import</span> android.widget.ProgressBar</span><br><span class="line"><span class="keyword">import</span> android.widget.Toast</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> : <span class="type">AppCompatActivity</span></span>()&#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCreate</span><span class="params">(savedInstanceState: <span class="type">Bundle</span>?)</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState)</span><br><span class="line">        setContentView(R.layout.activity_main)</span><br><span class="line">        supportActionBar?.hide()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>引入布局确实解决了重复编写代码的问题，但是，如果布局中有一些控件要求能够响应事件，我们还需要在每个Activity中为这些控件编写一次事件注册的代码，但是这种事件在每一个Activity中都是相同的，即销毁当前Activity。而如果在每一个Activity中都注册一遍按钮的返回事件，会增加很多的重复代码。</p><p>我们可以在<strong>TitleLayout</strong>的主构造函数中声明了<strong>Context和AttributeSet</strong>，在布局中引入<strong>TitleLayout</strong>时就会调用这个构造函数。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TitleLayout</span></span>(context: Context,attrs:AttributeSet) :LinearLayout(context, attrs) &#123;</span><br><span class="line">    <span class="keyword">init</span> &#123;</span><br><span class="line">        LayoutInflater.from(context).inflate(R.layout.title,<span class="keyword">this</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后，我们就可以在布局文件中添加该自定义控件，修改<strong>activity_main</strong>的代码</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:app</span>=<span class="string">&quot;http://schemas.android.com/apk/res-auto&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tools</span>=<span class="string">&quot;http://schemas.android.com/tools&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">tools:context</span>=<span class="string">&quot;.MainActivity&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">com.thylearncode.firstactivity.TitleLayout</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">com.thylearncode.firstactivity.TitleLayout</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后我们就可以尝试为标题栏中的按钮注册点击事件。修改<strong>TitleLayout</strong>中的代码</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TitleLayout</span></span>(context: Context,attrs:AttributeSet) :LinearLayout(context, attrs) &#123;</span><br><span class="line">    <span class="keyword">var</span> titleBack : Button?= <span class="literal">null</span></span><br><span class="line">    <span class="keyword">var</span> titleEdit : Button?= <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">init</span> &#123;</span><br><span class="line">        LayoutInflater.from(context).inflate(R.layout.title,<span class="keyword">this</span>)</span><br><span class="line">        titleBack = findViewById(R.id.titleBack)</span><br><span class="line">        titleEdit = findViewById(R.id.titleEdit)</span><br><span class="line">        titleBack?.setOnClickListener &#123;</span><br><span class="line">            <span class="keyword">val</span> activity = context <span class="keyword">as</span> Activity</span><br><span class="line">            activity.finish()</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        titleEdit?.setOnClickListener &#123;</span><br><span class="line">            Toast.makeText(context,<span class="string">&quot;You clicked Edit Button&quot;</span>,Toast.LENGTH_SHORT).show()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>需要注意的是：<strong>TitleLayout</strong>中接收的<strong>context</strong>参数实际上是<strong>Activity</strong>的实例，我们需要将其强制转换为<strong>Activity</strong>然后调用<strong>finish</strong>方法销毁掉当前<strong>Activity</strong>。</p><h3 id="ListView">ListView</h3><p>由于手机空间比较有限，能够一次性在屏幕上展示的内容不多，我们的程序中有大量数据需要展示时，就可以采用<strong>ListView</strong>来实现。</p><p>首先在<strong>activity_main</strong>中添加<strong>ListView</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:app</span>=<span class="string">&quot;http://schemas.android.com/apk/res-auto&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tools</span>=<span class="string">&quot;http://schemas.android.com/tools&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">tools:context</span>=<span class="string">&quot;.MainActivity&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">ListView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/listView&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ListView</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><p>接下来修改<strong>MainActivity</strong>的代码</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> : <span class="type">AppCompatActivity</span></span>() &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> <span class="keyword">data</span> = listOf(</span><br><span class="line">        <span class="string">&quot;Apple&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Banana&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Orange&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Watermelo&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Pear&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Grape&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Pineapple&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Mango&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Banana&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Orange&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Watermelo&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Pear&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Grape&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Pineapple&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Mango&quot;</span></span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> listView: ListView ?= <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCreate</span><span class="params">(savedInstanceState: <span class="type">Bundle</span>?)</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState)</span><br><span class="line">        setContentView(R.layout.activity_main)</span><br><span class="line">        <span class="keyword">val</span> adapter = ArrayAdapter&lt;String&gt;(<span class="keyword">this</span>, android.R.layout.simple_list_item_1, <span class="keyword">data</span>)</span><br><span class="line">        listView = findViewById(R.id.listView)</span><br><span class="line">        listView?.adapter = adapter</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然而，集合中的数据是无法直接传递给<strong>ListView</strong>的。我们还需要借助适配器实现。我们使用<strong>ArrayAdapter</strong>，他需要利用泛型来指定适配数据的类型。然后在构造函数中把要适配的数据传入。</p><p>其构造函数的三个参数为：<strong>Activity</strong>的实例，<strong>ListView</strong>子项的布局<strong>id</strong>以及数据源。</p><h4 id="定制ListView的界面">定制ListView的界面</h4><p>首先新建一个<strong>Fruit</strong>类</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Fruit</span></span>(<span class="keyword">val</span> name: String, <span class="keyword">val</span> img: <span class="built_in">Int</span>)</span><br></pre></td></tr></table></figure><p>其中，<strong>name</strong>表示水果的名字，<strong>img</strong>表示水果对应图片的资源。</p><p>然后需要给<strong>ListView</strong>的子项指定一个自定义的布局。新建一个<strong>fruit_item.xml</strong>如下</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;60dp&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">ImageView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/fruitImage&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;40dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;40dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_gravity</span>=<span class="string">&quot;center_vertical&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_marginLeft</span>=<span class="string">&quot;10dp&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ImageView</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/fruitName&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_marginLeft</span>=<span class="string">&quot;10dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_gravity</span>=<span class="string">&quot;center_vertical&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">TextView</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><p>接下来需要创建一个自定义的适配器，继承自<strong>ArrayAdapter</strong>，并指定泛型为<strong>Fruit</strong>类，新建类<strong>FruitAdapter</strong>，代码如下：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> android.app.Activity</span><br><span class="line"><span class="keyword">import</span> android.view.LayoutInflater</span><br><span class="line"><span class="keyword">import</span> android.view.View</span><br><span class="line"><span class="keyword">import</span> android.view.ViewGroup</span><br><span class="line"><span class="keyword">import</span> android.widget.ArrayAdapter</span><br><span class="line"><span class="keyword">import</span> android.widget.ImageView</span><br><span class="line"><span class="keyword">import</span> android.widget.TextView</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FruitAdapter</span></span>(activity: Activity, <span class="keyword">val</span> resourceId: <span class="built_in">Int</span>, <span class="keyword">data</span>: List&lt;Fruit&gt;) :</span><br><span class="line">    ArrayAdapter&lt;Fruit&gt;(activity, resourceId, <span class="keyword">data</span>) &#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">getView</span><span class="params">(position: <span class="type">Int</span>, convertView: <span class="type">View</span>?, parent: <span class="type">ViewGroup</span>)</span></span>: View &#123;</span><br><span class="line">        <span class="keyword">val</span> view = LayoutInflater.from(context).inflate(resourceId, parent, <span class="literal">false</span>)</span><br><span class="line">        <span class="keyword">val</span> fruitImage: ImageView = view.findViewById(R.id.fruitImage)</span><br><span class="line">        <span class="keyword">val</span> fruitName: TextView = view.findViewById(R.id.fruitName)</span><br><span class="line">        <span class="keyword">val</span> fruit = getItem(position)</span><br><span class="line">        <span class="keyword">if</span> (fruit != <span class="literal">null</span>) &#123;</span><br><span class="line">            fruitImage.setImageResource(fruit.img)</span><br><span class="line">            fruitName.text = fruit.name</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> view</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>FruitAdapter</strong>定义了一个主构造函数，用于将<strong>Activity</strong>的实例，<strong>ListView</strong>子项布局的<strong>id</strong>和数据源传递进来，同时重写了<strong>getView</strong>方法，这个方法会在每个子项被滚动到屏幕内的时候调用。</p><p>在<strong>getView</strong>方法中，我们需要使用<strong>LayoutInflater</strong>来为这个子项加载我们传入的布局。<strong>LayoutInflater</strong>的<strong>inflate</strong>方法接收<strong>3</strong>个参数，第三个参数指定为<strong>false</strong>，表示只让我们在父布局声明的<strong>layout</strong>属性生效。但不会为这个<strong>View</strong>添加父布局。</p><p>最后修改<strong>MainActivity</strong>中的代码</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> : <span class="type">AppCompatActivity</span></span>() &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> fruitList = ArrayList&lt;Fruit&gt;()</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> listView: ListView ?= <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCreate</span><span class="params">(savedInstanceState: <span class="type">Bundle</span>?)</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState)</span><br><span class="line">        setContentView(R.layout.activity_main)</span><br><span class="line">        listView = findViewById(R.id.listView)</span><br><span class="line">        initFruits()</span><br><span class="line">        <span class="keyword">val</span> adapter =FruitAdapter(<span class="keyword">this</span>,R.layout.fruit_layout,fruitList)</span><br><span class="line">        listView?.adapter = adapter</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">initFruits</span><span class="params">()</span></span> &#123;</span><br><span class="line">        repeat(<span class="number">2</span>)&#123;</span><br><span class="line">            fruitList.add(Fruit(<span class="string">&quot;apple&quot;</span>,R.drawable.apple_pic))</span><br><span class="line">            fruitList.add(Fruit(<span class="string">&quot;Banana&quot;</span>,R.drawable.banana_pic))</span><br><span class="line">            fruitList.add(Fruit(<span class="string">&quot;Orange&quot;</span>,R.drawable.orange_pic))</span><br><span class="line">            fruitList.add(Fruit(<span class="string">&quot;Watermelon&quot;</span>,R.drawable.watermelon_pic))</span><br><span class="line">            fruitList.add(Fruit(<span class="string">&quot;Pear&quot;</span>,R.drawable.pear_pic))</span><br><span class="line">            fruitList.add(Fruit(<span class="string">&quot;Grape&quot;</span>,R.drawable.grape_pic))</span><br><span class="line">            fruitList.add(Fruit(<span class="string">&quot;Pineapple&quot;</span>,R.drawable.pineapple_pic))</span><br><span class="line">            fruitList.add(Fruit(<span class="string">&quot;Strawberry&quot;</span>,R.drawable.strawberry_pic))</span><br><span class="line">            fruitList.add(Fruit(<span class="string">&quot;Cherry&quot;</span>,R.drawable.cherry_pic))</span><br><span class="line">            fruitList.add(Fruit(<span class="string">&quot;Mango&quot;</span>,R.drawable.mango_pic))</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="提升ListView的运行效率">提升ListView的运行效率</h3><p>因为<strong>FruitAdapter</strong>的<strong>getView</strong>方法中，每次都会将布局重写加载一遍，当<strong>ListView</strong>快速滚动时，这就会造成性能的瓶颈。而在<strong>getView</strong>方法中还有一个<strong>convertView</strong>参数，这个参数用于对之前加载好的布局进行缓存，一边之后进行重用。因此，我们可以优化代码如下：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> android.app.Activity</span><br><span class="line"><span class="keyword">import</span> android.view.LayoutInflater</span><br><span class="line"><span class="keyword">import</span> android.view.View</span><br><span class="line"><span class="keyword">import</span> android.view.ViewGroup</span><br><span class="line"><span class="keyword">import</span> android.widget.ArrayAdapter</span><br><span class="line"><span class="keyword">import</span> android.widget.ImageView</span><br><span class="line"><span class="keyword">import</span> android.widget.TextView</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FruitAdapter</span></span>(activity: Activity, <span class="keyword">val</span> resourceId: <span class="built_in">Int</span>, <span class="keyword">data</span>: List&lt;Fruit&gt;) :</span><br><span class="line">    ArrayAdapter&lt;Fruit&gt;(activity, resourceId, <span class="keyword">data</span>) &#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">getView</span><span class="params">(position: <span class="type">Int</span>, convertView: <span class="type">View</span>?, parent: <span class="type">ViewGroup</span>)</span></span>: View &#123;</span><br><span class="line">        <span class="keyword">val</span> view: View</span><br><span class="line">        <span class="keyword">if</span> (convertView == <span class="literal">null</span>) &#123;</span><br><span class="line">            view = LayoutInflater.from(context).inflate(resourceId, parent, <span class="literal">false</span>)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            view = convertView</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">val</span> fruitImage: ImageView = view.findViewById(R.id.fruitImage)</span><br><span class="line">        <span class="keyword">val</span> fruitName: TextView = view.findViewById(R.id.fruitName)</span><br><span class="line">        <span class="keyword">val</span> fruit = getItem(position)</span><br><span class="line">        <span class="keyword">if</span> (fruit != <span class="literal">null</span>) &#123;</span><br><span class="line">            fruitImage.setImageResource(fruit.img)</span><br><span class="line">            fruitName.text = fruit.name</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> view</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是，在上面代码中，每次在<strong>getView</strong>方法中依然会调用<strong>View</strong>的<strong>findViewById</strong>方法获取一次控件的实例，我们可以借助一个<strong>ViewHolder</strong>来进行优化，修改<strong>FruitAdapter</strong>如下：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FruitAdapter</span></span>(activity: Activity, <span class="keyword">val</span> resourceId: <span class="built_in">Int</span>, <span class="keyword">data</span>: List&lt;Fruit&gt;) :</span><br><span class="line">    ArrayAdapter&lt;Fruit&gt;(activity, resourceId, <span class="keyword">data</span>) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">inner</span> <span class="class"><span class="keyword">class</span> <span class="title">ViewHolder</span></span>(<span class="keyword">val</span> fruitImage: ImageView, <span class="keyword">val</span> fruitName: TextView)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">getView</span><span class="params">(position: <span class="type">Int</span>, convertView: <span class="type">View</span>?, parent: <span class="type">ViewGroup</span>)</span></span>: View &#123;</span><br><span class="line">        <span class="keyword">val</span> view: View</span><br><span class="line">        <span class="keyword">val</span> viewHolder: ViewHolder</span><br><span class="line">        <span class="keyword">if</span> (convertView == <span class="literal">null</span>) &#123;</span><br><span class="line">            view = LayoutInflater.from(context).inflate(resourceId, parent, <span class="literal">false</span>)</span><br><span class="line">            <span class="keyword">val</span> fruitImage: ImageView = view.findViewById(R.id.fruitImage)</span><br><span class="line">            <span class="keyword">val</span> fruitName: TextView = view.findViewById(R.id.fruitName)</span><br><span class="line">            viewHolder = ViewHolder(fruitImage, fruitName)</span><br><span class="line">            view.tag = viewHolder</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            view = convertView</span><br><span class="line">            viewHolder = view.tag <span class="keyword">as</span> ViewHolder</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">val</span> fruit = getItem(position)</span><br><span class="line">        <span class="keyword">if</span> (fruit != <span class="literal">null</span>) &#123;</span><br><span class="line">            viewHolder.fruitImage.setImageResource(fruit.img)</span><br><span class="line">            viewHolder.fruitName.text = fruit.name</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> view</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>新增了一个内部类<strong>ViewHolder</strong>，用于缓存<strong>ImageView</strong>和<strong>TextView</strong>的控件实例，当<strong>convertView</strong>为<strong>null</strong>。创建一个<strong>viewHolder</strong>对象，并将控件的实例存放在<strong>ViewHolder</strong>里，然后调用<strong>View</strong>的<strong>setTag</strong>方法将<strong>ViewHolder</strong>的对象存储在<strong>View</strong>中。当<strong>convertView</strong>不为<strong>null</strong>时，则调用<strong>View</strong>的<strong>getTag</strong>方法，把<strong>ViewHolder</strong>重新取出，这样所有的控件实例都缓存在了<strong>ViewHolder</strong>里，就没有必要每次通过<strong>findViewById</strong>来获取控件实例了。</p><h3 id="ListView的点击事件">ListView的点击事件</h3><p>修改MainActivity的代码如下：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> android.content.Intent</span><br><span class="line"><span class="keyword">import</span> android.net.Uri</span><br><span class="line"><span class="keyword">import</span> android.os.Binder</span><br><span class="line"><span class="keyword">import</span> androidx.appcompat.app.AppCompatActivity</span><br><span class="line"><span class="keyword">import</span> android.os.Bundle</span><br><span class="line"><span class="keyword">import</span> android.view.View</span><br><span class="line"><span class="keyword">import</span> android.widget.ArrayAdapter</span><br><span class="line"><span class="keyword">import</span> android.widget.Button</span><br><span class="line"><span class="keyword">import</span> android.widget.EditText</span><br><span class="line"><span class="keyword">import</span> android.widget.ImageView</span><br><span class="line"><span class="keyword">import</span> android.widget.ListView</span><br><span class="line"><span class="keyword">import</span> android.widget.ProgressBar</span><br><span class="line"><span class="keyword">import</span> android.widget.Toast</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> : <span class="type">AppCompatActivity</span></span>() &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> fruitList = ArrayList&lt;Fruit&gt;()</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> listView: ListView? = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCreate</span><span class="params">(savedInstanceState: <span class="type">Bundle</span>?)</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState)</span><br><span class="line">        setContentView(R.layout.activity_main)</span><br><span class="line">        listView = findViewById(R.id.listView)</span><br><span class="line">        initFruits()</span><br><span class="line">        <span class="keyword">val</span> adapter = FruitAdapter(<span class="keyword">this</span>, R.layout.fruit_layout, fruitList)</span><br><span class="line">        listView?.adapter = adapter</span><br><span class="line">        listView?.setOnItemClickListener &#123; parent, view, position, id -&gt;</span><br><span class="line">            <span class="keyword">val</span> fruit = fruitList[position]</span><br><span class="line">            Toast.makeText(<span class="keyword">this</span>, fruit.name, Toast.LENGTH_SHORT).show()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">initFruits</span><span class="params">()</span></span> &#123;</span><br><span class="line">        repeat(<span class="number">2</span>) &#123;</span><br><span class="line">            fruitList.add(Fruit(<span class="string">&quot;apple&quot;</span>, R.drawable.apple_pic))</span><br><span class="line">            fruitList.add(Fruit(<span class="string">&quot;Banana&quot;</span>, R.drawable.banana_pic))</span><br><span class="line">            fruitList.add(Fruit(<span class="string">&quot;Orange&quot;</span>, R.drawable.orange_pic))</span><br><span class="line">            fruitList.add(Fruit(<span class="string">&quot;Watermelon&quot;</span>, R.drawable.watermelon_pic))</span><br><span class="line">            fruitList.add(Fruit(<span class="string">&quot;Pear&quot;</span>, R.drawable.pear_pic))</span><br><span class="line">            fruitList.add(Fruit(<span class="string">&quot;Grape&quot;</span>, R.drawable.grape_pic))</span><br><span class="line">            fruitList.add(Fruit(<span class="string">&quot;Pineapple&quot;</span>, R.drawable.pineapple_pic))</span><br><span class="line">            fruitList.add(Fruit(<span class="string">&quot;Strawberry&quot;</span>, R.drawable.strawberry_pic))</span><br><span class="line">            fruitList.add(Fruit(<span class="string">&quot;Cherry&quot;</span>, R.drawable.cherry_pic))</span><br><span class="line">            fruitList.add(Fruit(<span class="string">&quot;Mango&quot;</span>, R.drawable.mango_pic))</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们为<strong>listView</strong>注册了一个监听器<strong>setOnItemClickListener</strong>，当用户点击了<strong>ListView</strong>中的任一个子项时，就会回调至<strong>lambda</strong>表达式中，我们可以通过<strong>position</strong>来判断点击的是哪一个水果，并通过<strong>Toast</strong>将水果的名字显示出来。</p><h3 id="RecyclerView：滚动控件">RecyclerView：滚动控件</h3><h4 id="添加依赖">添加依赖</h4><p>与上述控件不同，<strong>RecyclerView</strong>属于兄增控件，我们需要添加依赖才能够使用。</p><p>打开<strong>app/build.gradle</strong>文件，在dependencies闭包中添加如下内容：</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">implementation <span class="string">&#x27;androidx.recyclerview:recyclerview:1.3.0&#x27;</span></span><br></pre></td></tr></table></figure><p>上述代码即表示将<strong>RecyclerView</strong>引入我们的项目中，除了版本号可能发生改变，其他是不变的。然后点击<strong>Sync now</strong>，让<strong>gradle</strong>同步项目。</p><p>接下来修改<strong>activity.xml</strong>的代码：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:app</span>=<span class="string">&quot;http://schemas.android.com/apk/res-auto&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tools</span>=<span class="string">&quot;http://schemas.android.com/tools&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">tools:context</span>=<span class="string">&quot;.MainActivity&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">androidx.recyclerview.widget.RecyclerView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/recyclerView&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">androidx.recyclerview.widget.RecyclerView</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><p>接下来需要为<strong>RecycleView</strong>准备一个适配器，新建<strong>FruitAdapter</strong>类，让这个类继承自<strong>RecycleView.Adapter</strong>，并将泛型指定为<strong>FruitAdapter.ViewHolder</strong>。其中，<strong>ViewHolder</strong>是我们在<strong>FruitAdapter</strong>中定义的一个内部类。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FruitAdapter</span></span>(<span class="keyword">val</span> fruitList: List&lt;Fruit&gt;) :</span><br><span class="line"></span><br><span class="line">    RecyclerView.Adapter&lt;FruitAdapter.ViewHolder&gt;() &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">inner</span> <span class="class"><span class="keyword">class</span> <span class="title">ViewHolder</span></span>(view: View) : RecyclerView.ViewHolder(view) &#123;</span><br><span class="line">        <span class="keyword">val</span> fruitImage: ImageView = view.findViewById(R.id.fruitImage)</span><br><span class="line">        <span class="keyword">val</span> fruitName: TextView = view.findViewById(R.id.fruitName)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCreateViewHolder</span><span class="params">(parent: <span class="type">ViewGroup</span>, viewType: <span class="type">Int</span>)</span></span>: ViewHolder &#123;</span><br><span class="line">        <span class="keyword">val</span> view = LayoutInflater.from(parent.context)</span><br><span class="line">            .inflate(R.layout.fruit_layout, parent, <span class="literal">false</span>)</span><br><span class="line">        <span class="keyword">return</span> ViewHolder(view)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">getItemCount</span><span class="params">()</span></span>: <span class="built_in">Int</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> fruitList.size</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onBindViewHolder</span><span class="params">(holder: <span class="type">ViewHolder</span>, position: <span class="type">Int</span>)</span></span> &#123;</span><br><span class="line">        <span class="keyword">val</span> fruit = fruitList[position]</span><br><span class="line">        holder.fruitImage.setImageResource(fruit.img)</span><br><span class="line">        holder.fruitName.text = fruit.name</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先需要定义一个内部类<strong>ViewHolder</strong>，它需要继承自<strong>RecyclerView.ViewHolder</strong>。然后<strong>ViewHolder</strong>的主构造函数要传入一个<strong>View</strong>参数，这个参数通常就是<strong>RecyclerView</strong>子项的最外层布局，那么我们就可以通过<strong>findViewById</strong>方法来获取布局中<strong>ImageView</strong>和<strong>TextView</strong>的实例了。</p><p><strong>FruitAdapter</strong>中也有一个主构造函数，它用于把要展示的数据源传进来。</p><p>由于<strong>FruitAdapter</strong>继承了<strong>RecyclerView.Adapter</strong>，因此必须重写<strong>onCreateViewHolder</strong>，<strong>onBindViewHolder</strong>，<strong>getItemCount</strong>这三个方法。其中，<strong>onCreateViewHolder</strong>主要用于创建<strong>ViewHolder</strong>实例的。我们在该方法中将<strong>fruit_item</strong>布局加载进来，然后创建<strong>ViewHolder</strong>实例。最后将<strong>ViewHolder</strong>的实例返回。<strong>onBindViewHolder</strong>方法用于对<strong>RecyclerView</strong>子项的数据进行赋值。会在每个子项被滚动到屏幕内的时候执行。<strong>getItemCount</strong>方法用于告诉<strong>RecyclerView</strong>一共有多少子项。直接返回数据源的长度就可以了。</p><p>适配器准备好后，就可以使用<strong>RecyclerView</strong>了。修改<strong>MainActivity</strong>的代码如下：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> : <span class="type">AppCompatActivity</span></span>() &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> fruitList = ArrayList&lt;Fruit&gt;()</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> recyclerView: RecyclerView? = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCreate</span><span class="params">(savedInstanceState: <span class="type">Bundle</span>?)</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState)</span><br><span class="line">        setContentView(R.layout.activity_main)</span><br><span class="line">        initFruits()</span><br><span class="line">        recyclerView = findViewById(R.id.recyclerView)</span><br><span class="line">        <span class="keyword">val</span> layoutManager = LinearLayoutManager(<span class="keyword">this</span>)</span><br><span class="line">        recyclerView?.layoutManager = layoutManager</span><br><span class="line">        <span class="keyword">val</span> adapter = FruitAdapter(fruitList)</span><br><span class="line">        recyclerView?.adapter = adapter</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">initFruits</span><span class="params">()</span></span> &#123;</span><br><span class="line">        repeat(<span class="number">2</span>) &#123;</span><br><span class="line">            fruitList.add(Fruit(<span class="string">&quot;apple&quot;</span>, R.drawable.apple_pic))</span><br><span class="line">            fruitList.add(Fruit(<span class="string">&quot;Banana&quot;</span>, R.drawable.banana_pic))</span><br><span class="line">            fruitList.add(Fruit(<span class="string">&quot;Orange&quot;</span>, R.drawable.orange_pic))</span><br><span class="line">            fruitList.add(Fruit(<span class="string">&quot;Watermelon&quot;</span>, R.drawable.watermelon_pic))</span><br><span class="line">            fruitList.add(Fruit(<span class="string">&quot;Pear&quot;</span>, R.drawable.pear_pic))</span><br><span class="line">            fruitList.add(Fruit(<span class="string">&quot;Grape&quot;</span>, R.drawable.grape_pic))</span><br><span class="line">            fruitList.add(Fruit(<span class="string">&quot;Pineapple&quot;</span>, R.drawable.pineapple_pic))</span><br><span class="line">            fruitList.add(Fruit(<span class="string">&quot;Strawberry&quot;</span>, R.drawable.strawberry_pic))</span><br><span class="line">            fruitList.add(Fruit(<span class="string">&quot;Cherry&quot;</span>, R.drawable.cherry_pic))</span><br><span class="line">            fruitList.add(Fruit(<span class="string">&quot;Mango&quot;</span>, R.drawable.mango_pic))</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，我们在<strong>onCreate</strong>方法中先创建了一个<strong>LinearLayoutManager</strong>对象，并将它设置到<strong>RecyclerView</strong>中，<strong>LayoutManager</strong>用于指定<strong>RecyclerView</strong>的布局方式，这里使用的<strong>LinearLayoutManager</strong>是线性布局。接下来创建了<strong>FruitAdapter</strong>的实例，并将水果数据传入<strong>FruitAdapter</strong>的构造函数中，最后调用<strong>RecyclerView</strong>的<strong>setAdapter</strong>方法完成设置。</p><h4 id="实现横向滚动和瀑布流布局">实现横向滚动和瀑布流布局</h4><p>首先，如果要实现横向滚动，我们需要把<strong>fruit_item</strong>里的元素改为垂直排列，修改<strong>fruit_item.xml</strong>的代码如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:orientation</span>=<span class="string">&quot;vertical&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;80dp&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">ImageView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/fruitImage&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;40dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;40dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_gravity</span>=<span class="string">&quot;center_horizontal&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_marginTop</span>=<span class="string">&quot;10dp&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ImageView</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/fruitName&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_marginTop</span>=<span class="string">&quot;10dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_gravity</span>=<span class="string">&quot;center_horizontal&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">TextView</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后我们将<strong>ImageView</strong>和<strong>TextView</strong>都设置在了布局中水平居中，接着修改<strong>MainActivity</strong>中的代码</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> : <span class="type">AppCompatActivity</span></span>() &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> fruitList = ArrayList&lt;Fruit&gt;()</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> recyclerView: RecyclerView? = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCreate</span><span class="params">(savedInstanceState: <span class="type">Bundle</span>?)</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState)</span><br><span class="line">        setContentView(R.layout.activity_main)</span><br><span class="line">        initFruits()</span><br><span class="line">        recyclerView = findViewById(R.id.recyclerView)</span><br><span class="line">        <span class="keyword">val</span> layoutManager = LinearLayoutManager(<span class="keyword">this</span>)</span><br><span class="line">        layoutManager.orientation = LinearLayoutManager.HORIZONTAL</span><br><span class="line">        recyclerView?.layoutManager = layoutManager</span><br><span class="line">        <span class="keyword">val</span> adapter = FruitAdapter(fruitList)</span><br><span class="line">        recyclerView?.adapter = adapter</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">initFruits</span><span class="params">()</span></span> &#123;</span><br><span class="line">        repeat(<span class="number">2</span>) &#123;</span><br><span class="line">            fruitList.add(Fruit(<span class="string">&quot;apple&quot;</span>, R.drawable.apple_pic))</span><br><span class="line">            fruitList.add(Fruit(<span class="string">&quot;Banana&quot;</span>, R.drawable.banana_pic))</span><br><span class="line">            fruitList.add(Fruit(<span class="string">&quot;Orange&quot;</span>, R.drawable.orange_pic))</span><br><span class="line">            fruitList.add(Fruit(<span class="string">&quot;Watermelon&quot;</span>, R.drawable.watermelon_pic))</span><br><span class="line">            fruitList.add(Fruit(<span class="string">&quot;Pear&quot;</span>, R.drawable.pear_pic))</span><br><span class="line">            fruitList.add(Fruit(<span class="string">&quot;Grape&quot;</span>, R.drawable.grape_pic))</span><br><span class="line">            fruitList.add(Fruit(<span class="string">&quot;Pineapple&quot;</span>, R.drawable.pineapple_pic))</span><br><span class="line">            fruitList.add(Fruit(<span class="string">&quot;Strawberry&quot;</span>, R.drawable.strawberry_pic))</span><br><span class="line">            fruitList.add(Fruit(<span class="string">&quot;Cherry&quot;</span>, R.drawable.cherry_pic))</span><br><span class="line">            fruitList.add(Fruit(<span class="string">&quot;Mango&quot;</span>, R.drawable.mango_pic))</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样运行后就得到了横向滚动的<strong>RecyclerView</strong>。</p><p>除了<strong>LinearLayoutManager</strong>外，<strong>RecyclerView</strong>还给我们提供了<strong>GridLayoutManager</strong>和<strong>StaggeredGridLayoutManager</strong>这两种内置的布局排列方式。<strong>GridLayoutManager</strong>可以用于实现网格布局。<strong>StaggeredGridLayoutManager</strong>可以用于实现瀑布流布局。</p><p>本例主要示范瀑布流布局：</p><p>修改fruit_item.xml的布局如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:orientation</span>=<span class="string">&quot;vertical&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_margin</span>=<span class="string">&quot;5dp&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">ImageView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/fruitImage&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;40dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;40dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_gravity</span>=<span class="string">&quot;center_horizontal&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_marginTop</span>=<span class="string">&quot;10dp&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ImageView</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/fruitName&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_marginTop</span>=<span class="string">&quot;10dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_gravity</span>=<span class="string">&quot;left&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">TextView</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><p>接着修改MainActivity中的代码如下：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> : <span class="type">AppCompatActivity</span></span>() &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> fruitList = ArrayList&lt;Fruit&gt;()</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> recyclerView: RecyclerView? = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCreate</span><span class="params">(savedInstanceState: <span class="type">Bundle</span>?)</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState)</span><br><span class="line">        setContentView(R.layout.activity_main)</span><br><span class="line">        initFruits()</span><br><span class="line">        recyclerView = findViewById(R.id.recyclerView)</span><br><span class="line">        <span class="keyword">val</span> layoutManager = StaggeredGridLayoutManager(<span class="number">3</span>, StaggeredGridLayoutManager.VERTICAL)</span><br><span class="line">        recyclerView?.layoutManager = layoutManager</span><br><span class="line">        <span class="keyword">val</span> adapter = FruitAdapter(fruitList)</span><br><span class="line">        recyclerView?.adapter = adapter</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">initFruits</span><span class="params">()</span></span> &#123;</span><br><span class="line">        repeat(<span class="number">2</span>) &#123;</span><br><span class="line">            fruitList.add(Fruit(<span class="string">&quot;apple&quot;</span>, R.drawable.apple_pic))</span><br><span class="line">            fruitList.add(Fruit(<span class="string">&quot;Banana&quot;</span>, R.drawable.banana_pic))</span><br><span class="line">            fruitList.add(Fruit(<span class="string">&quot;Orange&quot;</span>, R.drawable.orange_pic))</span><br><span class="line">            fruitList.add(Fruit(<span class="string">&quot;Watermelon&quot;</span>, R.drawable.watermelon_pic))</span><br><span class="line">            fruitList.add(Fruit(<span class="string">&quot;Pear&quot;</span>, R.drawable.pear_pic))</span><br><span class="line">            fruitList.add(Fruit(<span class="string">&quot;Grape&quot;</span>, R.drawable.grape_pic))</span><br><span class="line">            fruitList.add(Fruit(<span class="string">&quot;Pineapple&quot;</span>, R.drawable.pineapple_pic))</span><br><span class="line">            fruitList.add(Fruit(<span class="string">&quot;Strawberry&quot;</span>, R.drawable.strawberry_pic))</span><br><span class="line">            fruitList.add(Fruit(<span class="string">&quot;Cherry&quot;</span>, R.drawable.cherry_pic))</span><br><span class="line">            fruitList.add(Fruit(<span class="string">&quot;Mango&quot;</span>, R.drawable.mango_pic))</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以发现，在<strong>onCreate</strong>方法中，我们创建了一个<strong>StaggeredGridLayoutManager</strong>，它的构造函数接收两个参数：第一个参数用于指定布局的列数，第二个用于指定布局的排列方向，传入<strong>StaggeredGridLayoutManager.VERTICAL</strong>表示会让布局纵向排列。</p><h4 id="RecyclerView的点击事件">RecyclerView的点击事件</h4><p><strong>RecyclerView</strong>和<strong>ListView</strong>不同的是，我们需要根据<strong>View</strong>去注册点击事件。</p><p>修改<strong>FruitAdapter</strong>中的代码如下：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FruitAdapter</span></span>(<span class="keyword">val</span> fruitList: List&lt;Fruit&gt;) :</span><br><span class="line"></span><br><span class="line">    RecyclerView.Adapter&lt;FruitAdapter.ViewHolder&gt;() &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">inner</span> <span class="class"><span class="keyword">class</span> <span class="title">ViewHolder</span></span>(view: View) : RecyclerView.ViewHolder(view) &#123;</span><br><span class="line">        <span class="keyword">val</span> fruitImage: ImageView = view.findViewById(R.id.fruitImage)</span><br><span class="line">        <span class="keyword">val</span> fruitName: TextView = view.findViewById(R.id.fruitName)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCreateViewHolder</span><span class="params">(parent: <span class="type">ViewGroup</span>, viewType: <span class="type">Int</span>)</span></span>: ViewHolder &#123;</span><br><span class="line">        <span class="keyword">val</span> view = LayoutInflater.from(parent.context)</span><br><span class="line">            .inflate(R.layout.fruit_layout, parent, <span class="literal">false</span>)</span><br><span class="line">        <span class="keyword">val</span> viewHolder = ViewHolder(view)</span><br><span class="line">        viewHolder.itemView.setOnClickListener &#123;</span><br><span class="line">            <span class="keyword">val</span> position = viewHolder.absoluteAdapterPosition</span><br><span class="line">            <span class="keyword">val</span> fruit = fruitList[position]</span><br><span class="line">            Toast.makeText(parent.context, <span class="string">&quot;you clicked view <span class="subst">$&#123;fruit.name&#125;</span>&quot;</span>, Toast.LENGTH_SHORT)</span><br><span class="line">                .show()</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        viewHolder.fruitImage.setOnClickListener &#123;</span><br><span class="line">            <span class="keyword">val</span> position = viewHolder.absoluteAdapterPosition</span><br><span class="line">            <span class="keyword">val</span> fruit = fruitList[position]</span><br><span class="line">            Toast.makeText(parent.context, <span class="string">&quot;you clicked image <span class="subst">$&#123;fruit.name&#125;</span>&quot;</span>, Toast.LENGTH_SHORT)</span><br><span class="line">                .show()</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> viewHolder</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">getItemCount</span><span class="params">()</span></span>: <span class="built_in">Int</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> fruitList.size</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onBindViewHolder</span><span class="params">(holder: <span class="type">ViewHolder</span>, position: <span class="type">Int</span>)</span></span> &#123;</span><br><span class="line">        <span class="keyword">val</span> fruit = fruitList[position]</span><br><span class="line">        holder.fruitImage.setImageResource(fruit.img)</span><br><span class="line">        holder.fruitName.text = fruit.name</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用RecyclerView-Java版本">使用RecyclerView(Java版本)</h3><p>然后就可以使用<strong>RecyclerView</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; mList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        initList();</span><br><span class="line">        RecyclerView mRecyclerView = (RecyclerView) <span class="keyword">this</span>.findViewById(R.id.id_recyclerview);</span><br><span class="line">        <span class="comment">// 设置布局管理器</span></span><br><span class="line">        mRecyclerView.setLayoutManager(<span class="keyword">new</span> LinearLayoutManager(<span class="keyword">this</span>));</span><br><span class="line">        <span class="comment">// 设置item增加和删除动画</span></span><br><span class="line">        mRecyclerView.setItemAnimator(<span class="keyword">new</span> DefaultItemAnimator());</span><br><span class="line">        HomeAdapter homeAdapter = <span class="keyword">new</span> HomeAdapter(<span class="keyword">this</span>, mList);</span><br><span class="line">        mRecyclerView.setAdapter(homeAdapter);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            mList.add(String.valueOf(i));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>需要注意的是，这里需要使用布局管理器来设置条目的排列模式(可以是纵向排列或者横向排列)。<br>在这里我们设置**setLayoutManager(new LinearLayoutManager(this))**表示条目是线性排列的（默认是纵向排列的）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">LinearLayoutManager</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>(context, RecyclerView.DEFAULT_ORIENTATION, <span class="keyword">false</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RecyclerView</span> <span class="keyword">extends</span> <span class="title">ViewGroup</span> <span class="keyword">implements</span> <span class="title">ScrollingView</span>,</span></span><br><span class="line"><span class="class">        <span class="title">NestedScrollingChild2</span>, <span class="title">NestedScrollingChild3</span> </span>&#123;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_ORIENTATION = VERTICAL;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果想要设置为横向排列，则可以按如下代码进行编写：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">LinearLayoutManager linearLayoutManager = <span class="keyword">new</span> LinearLayoutManager(<span class="keyword">this</span>);</span><br><span class="line">linearLayoutManager.setOrientation(LinearLayoutManager.HORIZONTAL);</span><br><span class="line">mRecyclerView.setItemAnimator(<span class="keyword">new</span> DefaultItemAnimator());</span><br></pre></td></tr></table></figure><p>此外，<strong>RecyclerView</strong>比<strong>ListView</strong>的设置复杂一些。主要是需要自己去自定义分割线。<br>首先定义<strong>activity_main.xml</strong>如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:app</span>=<span class="string">&quot;http://schemas.android.com/apk/res-auto&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tools</span>=<span class="string">&quot;http://schemas.android.com/tools&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:orientation</span>=<span class="string">&quot;vertical&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">tools:context</span>=<span class="string">&quot;.MainActivity&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">androidx.recyclerview.widget.RecyclerView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/id_recyclerview&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">androidx.recyclerview.widget.RecyclerView</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>Adapter</strong>最大的改进就是对<strong>ViewHolder</strong>进行了封装定义，我们只需要自定义一个<strong>ViewHolder</strong>继承<strong>RecyclerView.Adapter</strong>，并在<strong>onCreateViewHolder</strong>中加载布局，在<strong>onBindViewHolder</strong>中将视图与数据绑定。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HomeAdapter</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">Adapter</span>&lt;<span class="title">HomeAdapter</span>.<span class="title">MyViewHolder</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; mList;</span><br><span class="line">    <span class="keyword">private</span> Context mContext;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HomeAdapter</span><span class="params">(Context mContext, List&lt;String&gt; mList)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.mContext = mContext;</span><br><span class="line">        <span class="keyword">this</span>.mList = mList;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NonNull</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MyViewHolder <span class="title">onCreateViewHolder</span><span class="params">(<span class="meta">@NonNull</span> ViewGroup parent, <span class="keyword">int</span> viewType)</span> </span>&#123;</span><br><span class="line">        MyViewHolder myViewHolder = <span class="keyword">new</span> MyViewHolder(LayoutInflater.from(mContext).inflate(R.layout.item_recycler, parent, <span class="keyword">false</span>));</span><br><span class="line">        <span class="keyword">return</span> myViewHolder;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onBindViewHolder</span><span class="params">(<span class="meta">@NonNull</span> MyViewHolder holder, <span class="keyword">int</span> position)</span> </span>&#123;</span><br><span class="line">        holder.tv.setText(mList.get(position));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getItemCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mList.size();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">MyViewHolder</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">ViewHolder</span> </span>&#123;</span><br><span class="line">        TextView tv;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">MyViewHolder</span><span class="params">(View view)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">super</span>(view);</span><br><span class="line">            tv = (TextView) view.findViewById(R.id.tv_item);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后，设置条目的样式文件item_recycler。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">FrameLayout</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:background</span>=<span class="string">&quot;@color/white&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/tv_item&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;50dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:gravity</span>=<span class="string">&quot;center&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">TextView</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">FrameLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><p>我们可以使用**mRecyclerView.addItemDecoration()**来加入分隔线。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DividerItemDecoration</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">ItemDecoration</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span>[] ATTRS = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;</span><br><span class="line">            android.R.attr.listDivider</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> HORIZONTAL_LIST = LinearLayoutManager.HORIZONTAL;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> VERTICAL_LIST = LinearLayoutManager.VERTICAL;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Drawable mDivider;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mOrientation;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DividerItemDecoration</span><span class="params">(Context context, <span class="keyword">int</span> orientation)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> TypedArray a = context.obtainStyledAttributes(ATTRS);</span><br><span class="line">        mDivider = a.getDrawable(<span class="number">0</span>);</span><br><span class="line">        a.recycle();</span><br><span class="line">        setOrientation(orientation);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setOrientation</span><span class="params">(<span class="keyword">int</span> orientation)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (orientation != HORIZONTAL_LIST &amp;&amp; orientation != VERTICAL_LIST) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;invalid orientation&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        mOrientation = orientation;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDraw</span><span class="params">(<span class="meta">@NonNull</span> Canvas c, <span class="meta">@NonNull</span> RecyclerView parent, <span class="meta">@NonNull</span> RecyclerView.State state)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (mOrientation == VERTICAL_LIST) &#123;</span><br><span class="line">            drawVertical(c, parent);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            drawHorizontal(c, parent);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">drawHorizontal</span><span class="params">(Canvas c, RecyclerView parent)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> top = parent.getPaddingTop();</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> bottom = parent.getHeight() - parent.getPaddingBottom();</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> childCount = parent.getChildCount();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; childCount; i++) &#123;</span><br><span class="line">            <span class="keyword">final</span> View child = parent.getChildAt(i);</span><br><span class="line">            <span class="keyword">final</span> RecyclerView.LayoutParams params = (RecyclerView.LayoutParams) child.getLayoutParams();</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">int</span> left = child.getRight() + params.rightMargin;</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">int</span> right = left + mDivider.getIntrinsicWidth();</span><br><span class="line">            mDivider.setBounds(left, top, right, bottom);</span><br><span class="line">            mDivider.draw(c);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">drawVertical</span><span class="params">(Canvas c, RecyclerView parent)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> left = parent.getPaddingLeft();</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> right = parent.getWidth() - parent.getPaddingRight();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> childCount = parent.getChildCount();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; childCount; i++) &#123;</span><br><span class="line">            <span class="keyword">final</span> View child = parent.getChildAt(i);</span><br><span class="line">            <span class="keyword">final</span> RecyclerView.LayoutParams params = (RecyclerView.LayoutParams) child.getLayoutParams();</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">int</span> top = child.getBottom() + params.bottomMargin;</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">int</span> bottom = top + mDivider.getIntrinsicHeight();</span><br><span class="line">            mDivider.setBounds(left, top, right, bottom);</span><br><span class="line">            mDivider.draw(c);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getItemOffsets</span><span class="params">(<span class="meta">@NonNull</span> Rect outRect, <span class="meta">@NonNull</span> View view, <span class="meta">@NonNull</span> RecyclerView parent, <span class="meta">@NonNull</span> RecyclerView.State state)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (mOrientation == VERTICAL_LIST) &#123;</span><br><span class="line">            outRect.set(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, mDivider.getIntrinsicHeight());</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            outRect.set(<span class="number">0</span>, <span class="number">0</span>, mDivider.getIntrinsicWidth(), <span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="自定义点击事件">自定义点击事件</h4><p>在<strong>RecyclerView</strong>中设置点击事件：<br>我们可以在<strong>HomeAdapter</strong>中定义接口，并提供回调函数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HomeAdapter</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">Adapter</span>&lt;<span class="title">HomeAdapter</span>.<span class="title">MyViewHolder</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; mList;</span><br><span class="line">    <span class="keyword">private</span> Context mContext;</span><br><span class="line">    <span class="keyword">private</span> OnItemClickListener mOnItemClickListener;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">OnItemClickListener</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">onItemClick</span><span class="params">(View view, <span class="keyword">int</span> position)</span></span>;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">onItemLongClick</span><span class="params">(View view, <span class="keyword">int</span> position)</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setOnItemClickListener</span><span class="params">(OnItemClickListener mOnItemClickListener)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.mOnItemClickListener = mOnItemClickListener;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HomeAdapter</span><span class="params">(Context mContext, List&lt;String&gt; mList)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.mContext = mContext;</span><br><span class="line">        <span class="keyword">this</span>.mList = mList;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeData</span><span class="params">(<span class="keyword">int</span> position)</span> </span>&#123;</span><br><span class="line">        mList.remove(position);</span><br><span class="line">        notifyItemRemoved(position);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NonNull</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MyViewHolder <span class="title">onCreateViewHolder</span><span class="params">(<span class="meta">@NonNull</span> ViewGroup parent, <span class="keyword">int</span> viewType)</span> </span>&#123;</span><br><span class="line">        View view = LayoutInflater.from(mContext).inflate(R.layout.item_recycler, parent, <span class="keyword">false</span>);</span><br><span class="line">        MyViewHolder holder = <span class="keyword">new</span> MyViewHolder(view);</span><br><span class="line">        <span class="keyword">if</span> (mOnItemClickListener != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">//为ItemView设置监听器</span></span><br><span class="line">            holder.itemView.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">                    <span class="keyword">int</span> position = holder.getLayoutPosition(); <span class="comment">// 1</span></span><br><span class="line">                    mOnItemClickListener.onItemClick(holder.itemView, position); <span class="comment">// 2</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">            holder.itemView.setOnLongClickListener(<span class="keyword">new</span> View.OnLongClickListener() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onLongClick</span><span class="params">(View view)</span> </span>&#123;</span><br><span class="line">                    <span class="keyword">int</span> position = holder.getLayoutPosition(); <span class="comment">// 1</span></span><br><span class="line">                    mOnItemClickListener.onItemClick(holder.itemView, position); <span class="comment">// 2</span></span><br><span class="line">                    <span class="comment">// 表示消耗了事件，事件不会继续传递。</span></span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> holder;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onBindViewHolder</span><span class="params">(<span class="meta">@NonNull</span> MyViewHolder holder, <span class="keyword">int</span> position)</span> </span>&#123;</span><br><span class="line">        holder.tv.setText(mList.get(position));</span><br><span class="line">        <span class="keyword">if</span> (mOnItemClickListener != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">//为ItemView设置监听器</span></span><br><span class="line">            holder.itemView.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">                    <span class="keyword">int</span> position = holder.getLayoutPosition(); <span class="comment">// 1</span></span><br><span class="line">                    mOnItemClickListener.onItemClick(holder.itemView, position); <span class="comment">// 2</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">            holder.itemView.setOnLongClickListener(<span class="keyword">new</span> View.OnLongClickListener() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onLongClick</span><span class="params">(View view)</span> </span>&#123;</span><br><span class="line">                    <span class="keyword">int</span> position = holder.getLayoutPosition();</span><br><span class="line">                    mOnItemClickListener.onItemLongClick(holder.itemView, position);</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getItemCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mList.size();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">MyViewHolder</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">ViewHolder</span> </span>&#123;</span><br><span class="line">        TextView tv;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">MyViewHolder</span><span class="params">(View view)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">super</span>(view);</span><br><span class="line">            tv = (TextView) view.findViewById(R.id.tv_item);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后，在<strong>MainActivity</strong>中进行监听：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; mList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        initList();</span><br><span class="line">        RecyclerView mRecyclerView = (RecyclerView) <span class="keyword">this</span>.findViewById(R.id.id_recyclerview);</span><br><span class="line">        LinearLayoutManager linearLayoutManager = <span class="keyword">new</span> LinearLayoutManager(<span class="keyword">this</span>);</span><br><span class="line">        mRecyclerView.setLayoutManager(linearLayoutManager);</span><br><span class="line">        mRecyclerView.setItemAnimator(<span class="keyword">new</span> DefaultItemAnimator());</span><br><span class="line">        mRecyclerView.addItemDecoration(<span class="keyword">new</span> DividerItemDecoration(MainActivity.<span class="keyword">this</span>, DividerItemDecoration.VERTICAL_LIST));</span><br><span class="line">        HomeAdapter homeAdapter = <span class="keyword">new</span> HomeAdapter(<span class="keyword">this</span>, mList);</span><br><span class="line">        homeAdapter.setOnItemClickListener(<span class="keyword">new</span> HomeAdapter.OnItemClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onItemClick</span><span class="params">(View view, <span class="keyword">int</span> position)</span> </span>&#123;</span><br><span class="line">                Toast.makeText(MainActivity.<span class="keyword">this</span>, <span class="string">&quot;点击第&quot;</span> + (position + <span class="number">1</span>) + <span class="string">&quot;条&quot;</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onItemLongClick</span><span class="params">(View view, <span class="keyword">int</span> position)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">new</span> AlertDialog.Builder(MainActivity.<span class="keyword">this</span>)</span><br><span class="line">                        .setTitle(<span class="string">&quot;确认删除吗？&quot;</span>)</span><br><span class="line">                        .setNegativeButton(<span class="string">&quot;取消&quot;</span>, <span class="keyword">null</span>)</span><br><span class="line">                        .setPositiveButton(<span class="string">&quot;确认&quot;</span>, <span class="keyword">new</span> DialogInterface.OnClickListener() &#123;</span><br><span class="line">                            <span class="meta">@Override</span></span><br><span class="line">                            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(DialogInterface dialogInterface, <span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">                                homeAdapter.removeData(position);</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;).show();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        mRecyclerView.setAdapter(homeAdapter);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            mList.add(String.valueOf(i));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="编写一个聊天页面">编写一个聊天页面</h2><h3 id="制作9-Patch图片">制作9-Patch图片</h3><p>什么是<strong>9-Patch</strong>图片呢，它是一种经过特殊处理的图片，它能够指定哪些区域可以被拉伸，哪些区域不行。</p><p>首先修改我们的<strong>activity_main.xml</strong>中的代码</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:app</span>=<span class="string">&quot;http://schemas.android.com/apk/res-auto&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tools</span>=<span class="string">&quot;http://schemas.android.com/tools&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">tools:context</span>=<span class="string">&quot;.MainActivity&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">LinearLayout</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;50dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:background</span>=<span class="string">&quot;@drawable/message_left_original&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><p>由于<strong>message_left</strong>的宽度不足以占满整个屏幕，因此，整张图片被均匀的拉伸了，而展现的效果非常不好。</p><p>我们可以右键<strong>message_left_original.png</strong>，然后选择<strong>Create 9-Patch file</strong>，我们可以在图片的<strong>4</strong>个边框上绘制小黑点，在上边框和左边框绘制的部分表示当图片需要拉伸时就拉伸黑点标记的区域。</p><p><img src="C:%5CUsers%5C86185%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20230706092649641.png" alt="image-20230706092649641"></p><p>最后记得将原来的<strong>message.left.png</strong>照片删除。</p><p>修改<strong>activity_main.xml</strong>中的代码</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:app</span>=<span class="string">&quot;http://schemas.android.com/apk/res-auto&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tools</span>=<span class="string">&quot;http://schemas.android.com/tools&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:orientation</span>=<span class="string">&quot;vertical&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:background</span>=<span class="string">&quot;#d8e0e8&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">tools:context</span>=<span class="string">&quot;.MainActivity&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">androidx.recyclerview.widget.RecyclerView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/recyclerView&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;0dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_weight</span>=<span class="string">&quot;1&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">LinearLayout</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">EditText</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:id</span>=<span class="string">&quot;@+id/inputText&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_width</span>=<span class="string">&quot;0dp&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_weight</span>=<span class="string">&quot;1&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:hint</span>=<span class="string">&quot;Type something&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:maxLines</span>=<span class="string">&quot;2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">EditText</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:id</span>=<span class="string">&quot;@+id/send&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:text</span>=<span class="string">&quot;Send&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">Button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><p>我们在主页面中放置了一个<strong>RecycleView</strong>用于显示聊天内容。放置了一个<strong>EditView</strong>用于输入消息，放置了一个Button用于发送消息。</p><p>然后新建消息的实体类，新建<strong>Msg</strong>，代码如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Msg</span>(<span class="title">val</span> <span class="title">content</span>: <span class="title">String</span>, <span class="title">val</span> <span class="title">type</span>: <span class="title">Int</span>) </span>&#123;</span><br><span class="line">    companion object &#123;</span><br><span class="line">        <span class="keyword">const</span> val TYPE_RECEIVED = <span class="number">0</span></span><br><span class="line">        <span class="keyword">const</span> val TYPE_SENT = <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后编写<strong>RecycleView</strong>的子项布局，新建<strong>msg_item_left.xml</strong>，代码如下所示：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">FrameLayout</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:padding</span>=<span class="string">&quot;10dp&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">LinearLayout</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_gravity</span>=<span class="string">&quot;left&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:background</span>=<span class="string">&quot;@drawable/message_left_original&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">&quot;@+id/leftMsg&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_gravity</span>=<span class="string">&quot;center&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_margin</span>=<span class="string">&quot;10dp&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:textColor</span>=<span class="string">&quot;#fff&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">FrameLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><p>再编写一个发送消息的子项布局。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">FrameLayout</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:padding</span>=<span class="string">&quot;10dp&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">LinearLayout</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_gravity</span>=<span class="string">&quot;right&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:background</span>=<span class="string">&quot;@drawable/message_right&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">&quot;@+id/rightMsg&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_gravity</span>=<span class="string">&quot;center&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_margin</span>=<span class="string">&quot;10dp&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:textColor</span>=<span class="string">&quot;#000&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">FrameLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="MediaPlayer媒体播放器">MediaPlayer媒体播放器</h2><p>MediaPlayer源码位于</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/frameworks/base/media/java/android/media/MediaPlayer.java</span><br></pre></td></tr></table></figure><p>MediaPlayer有以下两种初始化方式</p><ul><li>MediaPlayer.create</li><li>new MediaPlayer();</li></ul><p>MediaPlayer的公开方法</p><table><thead><tr><th>方法名</th><th>含义</th></tr></thead><tbody><tr><td>create</td><td>创建实例</td></tr><tr><td>setDataSource</td><td>设置播放资源</td></tr><tr><td>start</td><td>开始或恢复播放</td></tr><tr><td>stop</td><td>停止播放</td></tr><tr><td>pause</td><td>暂停播放</td></tr><tr><td>getDuration</td><td>获取流媒体的总播放时长</td></tr><tr><td>getCurrentPosition</td><td>获取当前流媒体的播放的位置</td></tr><tr><td>seekTo</td><td>设置当前MediaPlayer的播放位置</td></tr><tr><td>setLooping</td><td>设置是否循环播放</td></tr><tr><td>isLooping</td><td>判断是否循环播放</td></tr><tr><td>isPlaying</td><td>判断是否正在播放</td></tr><tr><td>prepare</td><td>同步的方式装载流媒体文件</td></tr><tr><td>prepareAsync</td><td>异步的方式装在流媒体文件</td></tr><tr><td>release</td><td>同步流媒体资源</td></tr><tr><td>setAudioStreamType</td><td>设置播放流媒体类型</td></tr><tr><td>setWakeMode</td><td>设置CPU唤醒的状态</td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Android布局&quot;&gt;Android布局&lt;/h2&gt;
&lt;h3 id=&quot;如何不显示Android最上面的程序名称栏&quot;&gt;如何不显示Android最上面的程序名称栏&lt;/h3&gt;
&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td cla</summary>
      
    
    
    
    <category term="安卓开发" scheme="http://example.com/categories/%E5%AE%89%E5%8D%93%E5%BC%80%E5%8F%91/"/>
    
    
  </entry>
  
  <entry>
    <title>算法与数据结构基础课</title>
    <link href="http://example.com/2023/10/11/Acwing/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%9F%BA%E7%A1%80%E8%AF%BE/"/>
    <id>http://example.com/2023/10/11/Acwing/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%9F%BA%E7%A1%80%E8%AF%BE/</id>
    <published>2023-10-11T08:21:10.000Z</published>
    <updated>2023-10-11T14:08:09.326Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1>数据结构与算法</h1><h2 id="排序算法">排序算法</h2><h3 id="快速排序">快速排序</h3><p>思路：</p><p>基于分治算法。</p><p>1.确定分界点：<code>q[l]</code>，<code>q[(l+r)/2]</code>，<code>q[r]</code>。</p><p>2.调整区间，使得第一部分小于等于<code>x</code>，而第二部分大于等于<code>x</code>。</p><p>3.递归处理左右两端。</p><p>证明：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">quick_sort</span><span class="params">(<span class="keyword">int</span> q[], <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//递归的终止情况</span></span><br><span class="line">    <span class="keyword">if</span>(l &gt;= r) <span class="keyword">return</span>;</span><br><span class="line">    <span class="comment">//第一步：分成子问题</span></span><br><span class="line">    <span class="keyword">int</span> i = l - <span class="number">1</span>, j = r + <span class="number">1</span>, x = q[l + r &gt;&gt; <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">while</span>(i &lt; j)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">do</span> i++; <span class="keyword">while</span>(q[i] &lt; x);</span><br><span class="line">        <span class="keyword">do</span> j--; <span class="keyword">while</span>(q[j] &gt; x);</span><br><span class="line">        <span class="keyword">if</span>(i &lt; j) swap(q[i], q[j]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//第二步：递归处理子问题</span></span><br><span class="line">    quick_sort(q, l, j), quick_sort(q, j + <span class="number">1</span>, r);</span><br><span class="line">    <span class="comment">//第三步：子问题合并.快排这一步不需要操作，但归并排序的核心在这一步骤</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">作者：醉生梦死</span><br><span class="line">链接：https:<span class="comment">//www.acwing.com/solution/content/16777/</span></span><br><span class="line">来源：AcWing</span><br><span class="line">著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</span><br></pre></td></tr></table></figure><p>快速排序需要证明：</p><p>1.当<code>while</code>循环结束后，<code>q[l...j]&lt;=x</code>并且<code>q[j+1...r]&gt;=x</code></p><p>循环不变式：</p><p><code>q[l...i]&lt;=x</code>且<code>q[j...r]&gt;=x</code>。</p><p>我们从代码中可以得出，循环开始之前，<code>i=l-1</code>，<code>j=r+1</code>。因此，<code>[l,l-1]</code>集合为空，因此循环不等式恒成立。</p><p>而执行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(i &lt; j)</span><br><span class="line">&#123;</span><br><span class="line">   <span class="keyword">do</span> i++; <span class="keyword">while</span>(q[i] &lt; x); <span class="comment">//执行该语句之前可以保证q[l...i-1] &lt;= x</span></span><br><span class="line">    <span class="keyword">do</span> j--; <span class="keyword">while</span>(q[j] &gt; x); <span class="comment">//执行该语句之前吗可以保证q[j+1...r] &gt;= x</span></span><br><span class="line">    <span class="keyword">if</span>(i &lt; j) swap(q[i], q[j]); <span class="comment">//执行此语句之后，就可以保证q[l...i]&lt;=x，q[j...r]&gt;=x</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>完整代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">int</span> n = sc.nextInt();</span><br><span class="line">        <span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;arr.length;i++)&#123;</span><br><span class="line">            arr[i] = sc.nextInt();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        quick_sort(arr,<span class="number">0</span>,arr.length-<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;arr.length;i++)&#123;</span><br><span class="line">            System.out.print(arr[i]+<span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">quick_sort</span><span class="params">(<span class="keyword">int</span>[] arr,<span class="keyword">int</span> start,<span class="keyword">int</span> end)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(start &gt;= end)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> i = start-<span class="number">1</span>,j = end+<span class="number">1</span>,x=arr[start+(end-start)/<span class="number">2</span>];</span><br><span class="line">        <span class="comment">// 这里需要注意</span></span><br><span class="line">        <span class="keyword">while</span>(i&lt;j)&#123;</span><br><span class="line">            <span class="keyword">do</span> i++; <span class="keyword">while</span>(arr[i]&lt;x);</span><br><span class="line">            <span class="keyword">do</span> j--; <span class="keyword">while</span>(arr[j]&gt;x);</span><br><span class="line">            <span class="keyword">if</span>(i&lt;j)&#123;</span><br><span class="line">                <span class="keyword">int</span> temp = arr[i];</span><br><span class="line">                arr[i] = arr[j];</span><br><span class="line">                arr[j] = temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        quick_sort(arr,start,j);</span><br><span class="line">        quick_sort(arr,j+<span class="number">1</span>,end);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="归并排序">归并排序</h3><h2 id="前缀和数组">前缀和数组</h2><p>1.什么是前缀和数组</p><p>​前缀和数组是数组的前<code>i</code>项和。例如</p><p>​<code>S[i] = a[1]+a[2]+...+a[i]</code>。</p><p>2.前缀和的数组下标从什么开始？</p><p>​前缀和的数组下标一定要从<code>1</code>开始，以此避免下标的转换。</p><p>3.如何求出数组中下标从<code>l</code>到<code>r</code>的元素</p><p>​<code>sum[l..r] = prefix[r] - prefix[l-1]</code></p><h3 id="例题I">例题I</h3><p>输入一个长度为 <code>n</code> 的整数序列。</p><p>接下来再输入 <code>m</code> 个询问，每个询问输入一对 <code>l</code>，<code>r</code>。</p><p>对于每个询问，输出原序列中从第 <code>l</code> 个数到第 <code>r</code> 个数的和。</p><p>·</p><blockquote><p>输入格式</p></blockquote><p>第一行包含两个整数 <code>n</code> 和 <code>m</code>。</p><p>第二行包含 <code>n</code> 个整数，表示整数数列。</p><p>接下来 <code>m</code> 行，每行包含两个整数 <code>l</code> 和 <code>r</code>，表示一个询问的区间范围。</p><blockquote><p>输出格式</p></blockquote><p>共 <code>m</code> 行，每行输出一个询问的结果。</p><blockquote><p>输入样例：</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">5 3</span><br><span class="line">2 1 3 6 4</span><br><span class="line">1 2</span><br><span class="line">1 3</span><br><span class="line">2 4</span><br></pre></td></tr></table></figure><blockquote><p>输出样例：</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">3</span><br><span class="line">6</span><br><span class="line">10</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">int</span> m = sc.nextInt();</span><br><span class="line">        <span class="keyword">int</span> n = sc.nextInt();</span><br><span class="line">        <span class="keyword">int</span>[] nums = <span class="keyword">new</span> <span class="keyword">int</span>[m];</span><br><span class="line">        <span class="keyword">int</span>[] prefix = <span class="keyword">new</span> <span class="keyword">int</span>[m + <span class="number">1</span>];</span><br><span class="line">        prefix[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">            nums[i] = sc.nextInt();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; prefix.length; i++) &#123;</span><br><span class="line">            prefix[i] = prefix[i - <span class="number">1</span>] + nums[i-<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> start = sc.nextInt();</span><br><span class="line">            <span class="keyword">int</span> end = sc.nextInt();</span><br><span class="line">            System.out.println(prefix[end] - prefix[start-<span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">作者：THYLOVEZJ</span><br><span class="line">链接：https:<span class="comment">//www.acwing.com/activity/content/code/content/4202971/</span></span><br><span class="line">来源：AcWing</span><br><span class="line">著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</span><br></pre></td></tr></table></figure><h2 id="链表">链表</h2><h3 id="双链表">双链表</h3><p>实现一个双链表，双链表初始为空，支持 <code>5</code> 种操作：</p><ol><li>在最左侧插入一个数；</li><li>在最右侧插入一个数；</li><li>将第 <code>k</code> 个插入的数删除；</li><li>在第 <code>k</code> 个插入的数左侧插入一个数；</li><li>在第 <code>k</code> 个插入的数右侧插入一个数</li></ol><p>现在要对该链表进行 <code>M</code> 次操作，进行完所有操作后，从左到右输出整个链表。</p><p><strong>注意</strong>:题目中第 <code>k</code> 个插入的数并不是指当前链表的第 <code>k</code> 个数。例如操作过程中一共插入了 <code>n</code> 个数，则按照插入的时间顺序，这 <code>n</code> 个数依次为：第 <code>1</code>个插入的数，第 <code>2</code> 个插入的数，…第 <code>n</code> 个插入的数。</p><blockquote><p>输入格式</p></blockquote><p>第一行包含整数 <code>M</code>，表示操作次数。</p><p>接下来 <code>M</code> 行，每行包含一个操作命令，操作命令可能为以下几种：</p><ol><li><code>L x</code>，表示在链表的最左端插入数 <code>x</code>。</li><li><code>R x</code>，表示在链表的最右端插入数 <code>x</code>。</li><li><code>D k</code>，表示将第 <code>k</code> 个插入的数删除。</li><li><code>IL k x</code>，表示在第 <code>k</code> 个插入的数左侧插入一个数。</li><li><code>IR k x</code>，表示在第 <code>k</code> 个插入的数右侧插入一个数。</li></ol><blockquote><p>输出格式</p></blockquote><p>共一行，将整个链表从左到右输出。</p><blockquote><p>输入样例：</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">10</span><br><span class="line">R 7</span><br><span class="line">D 1</span><br><span class="line">L 3</span><br><span class="line">IL 2 10</span><br><span class="line">D 3</span><br><span class="line">IL 2 7</span><br><span class="line">L 8</span><br><span class="line">R 9</span><br><span class="line">IL 4 7</span><br><span class="line">IR 2 2</span><br></pre></td></tr></table></figure><blockquote><p>输出样例：</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">8 7 7 3 2 9</span><br></pre></td></tr></table></figure><img src="D:\thy123\source\img\NewCanvas1.jpg" alt="NewCanvas1" style="zoom: 50%;" /><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> N = <span class="number">100010</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] l = <span class="keyword">new</span> <span class="keyword">int</span>[N];</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] r = <span class="keyword">new</span> <span class="keyword">int</span>[N];</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] e = <span class="keyword">new</span> <span class="keyword">int</span>[N];</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> idx = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">add_left</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        e[++idx] = x;</span><br><span class="line">        l[r[<span class="number">0</span>]] = idx;</span><br><span class="line">        r[idx] = r[<span class="number">0</span>];</span><br><span class="line">        r[<span class="number">0</span>] = idx;</span><br><span class="line">        l[idx] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">add_right</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        e[++idx] = x;</span><br><span class="line">        r[l[<span class="number">1</span>]] = idx;</span><br><span class="line">        l[idx] = l[<span class="number">1</span>];</span><br><span class="line">        l[<span class="number">1</span>] = idx;</span><br><span class="line">        r[idx] = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">(<span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        r[l[k]] = r[k];</span><br><span class="line">        l[r[k]] = l[k];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">insert_left</span><span class="params">(<span class="keyword">int</span> k, <span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        e[++idx] = x;</span><br><span class="line">        r[l[k]] = idx;</span><br><span class="line">        l[idx] = l[k];</span><br><span class="line">        r[idx] = k;</span><br><span class="line">        l[k] = idx;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">insert_right</span><span class="params">(<span class="keyword">int</span> k, <span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        e[++idx] = x;</span><br><span class="line">        l[r[k]] = idx;</span><br><span class="line">        r[idx] = r[k];</span><br><span class="line">        l[idx] = k;</span><br><span class="line">        r[k] = idx;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        r[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        l[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> M = sc.nextInt();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; M; i++) &#123;</span><br><span class="line">            String s = sc.next();</span><br><span class="line">            <span class="keyword">if</span> (s.equals(<span class="string">&quot;L&quot;</span>)) &#123;</span><br><span class="line">                <span class="keyword">int</span> a = sc.nextInt();</span><br><span class="line">                add_left(a);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (s.equals(<span class="string">&quot;R&quot;</span>)) &#123;</span><br><span class="line">                <span class="keyword">int</span> a = sc.nextInt();</span><br><span class="line">                add_right(a);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (s.equals(<span class="string">&quot;D&quot;</span>)) &#123;</span><br><span class="line">                <span class="keyword">int</span> k = sc.nextInt();</span><br><span class="line">                delete(k + <span class="number">1</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (s.equals(<span class="string">&quot;IL&quot;</span>)) &#123;</span><br><span class="line">                <span class="keyword">int</span> k = sc.nextInt();</span><br><span class="line">                <span class="keyword">int</span> a = sc.nextInt();</span><br><span class="line">                insert_left(k + <span class="number">1</span>, a);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">int</span> k = sc.nextInt();</span><br><span class="line">                <span class="keyword">int</span> a = sc.nextInt();</span><br><span class="line">                insert_right(k + <span class="number">1</span>, a);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = r[<span class="number">0</span>]; i != <span class="number">1</span>; i = r[i]) &#123;</span><br><span class="line">            System.out.print(e[i] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h1&gt;数据结构与算法&lt;/h1&gt;
&lt;h2 id=&quot;排序算法&quot;&gt;排序算法&lt;/h2&gt;
&lt;h3 id=&quot;快速排序&quot;&gt;快速排序&lt;/h3&gt;
&lt;p&gt;思路：&lt;/p&gt;
&lt;p&gt;基于分治算法。&lt;/p&gt;
&lt;p&gt;1.确定分界点：&lt;code&gt;q[l]&lt;/code&gt;，&lt;code&gt;q</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>maven</title>
    <link href="http://example.com/2023/09/29/maven/"/>
    <id>http://example.com/2023/09/29/maven/</id>
    <published>2023-09-29T04:21:08.000Z</published>
    <updated>2023-09-30T01:42:13.017Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1>Maven</h1><h2 id="Maven的声明周期">Maven的声明周期</h2><p>构建项目是从敲代码的第一个字母到项目交付运行的完整过程。主要包含清理项目中无用的文件，编译，测试，打包，部署等环节。而由于每个公司或每个项目在管理软件声明周期时都有不同的处理方式，比如A公司使用手动编译，B公司使用工具自动化编译，为了将该过程进行标准化和统一化，Maven抽象出了软件声明周期的环节，包含：项目的清理，初始化，编译，测试，打包，集成测试，验证，部署等环节。</p><p>由于Maven的声明周期是抽象的，因此，具体执行是由插件进行的，即实现可插拔式的模块的组装，如清理功能由如下插件进行处理。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-clean-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Maven的聚合和继承">Maven的聚合和继承</h2><p>为了便于代码后期维护，大型项目往往会被拆分为多个子模块，而在Maven中将多个子模块整合到一起的过程称为聚合。聚合是为了多个项目进行统一构建。</p><p>父项目集中处理公共配置，子项目可以复用，这在Maven中被称为继承。</p><h3 id="项目的聚合">项目的聚合</h3><h3 id="新建父模块">新建父模块</h3><p><img src="C:%5CUsers%5C86185%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20230929130137267.png" alt="image-20230929130137267"></p><p>创建一个空的项目。</p><h3 id="新建DAO模块">新建DAO模块</h3><p>如下图新建一个DAO：</p><p><img src="C:%5CUsers%5C86185%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20230929130420856.png" alt="image-20230929130420856"></p><h3 id="新建Service模块">新建Service模块</h3><p><img src="C:%5CUsers%5C86185%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20230929132725269.png" alt="image-20230929132725269"></p><p>如何在Service模块引入DAO的依赖呢？</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependencies&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;org.example&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;Bilibili-Dao&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</span><br><span class="line">      &lt;scope&gt;compile&lt;/scope&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">  &lt;/dependencies&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h1&gt;Maven&lt;/h1&gt;
&lt;h2 id=&quot;Maven的声明周期&quot;&gt;Maven的声明周期&lt;/h2&gt;
&lt;p&gt;构建项目是从敲代码的第一个字母到项目交付运行的完整过程。主要包含清理项目中无用的文件，编译，测试，打包，部署等环节。而由于每个公司或每个项目在管理</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Junit和Mockito</title>
    <link href="http://example.com/2023/09/26/Junit%E5%92%8CMockito/"/>
    <id>http://example.com/2023/09/26/Junit%E5%92%8CMockito/</id>
    <published>2023-09-26T14:02:04.000Z</published>
    <updated>2023-09-30T01:42:09.334Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1>Junit</h1><p>例如：我们要测试以下代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.thylovecode.juintdemo</span><br><span class="line">    </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoUtils</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">       <span class="keyword">return</span> a + b;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一.添加Maven依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.junit.jupiter<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit-jupiter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.8.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>二.创建测试代码所在的包</p><ul><li><p>我们的代码在下面的包中：</p><ul><li>com.thylovecode.junitdemo</li></ul></li><li><p>我们的测试代码所在目录必须在相同目录下</p></li></ul><p>三.创建单元测试</p><p>创建单元测试用例通常分为以下三步：</p><ol><li>创建测试类的实例</li><li>调用你想要测试的方法</li><li>检查结果并证明它是预期的结果</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">package com.thylovecode.juintdemo</span><br><span class="line">import ... // 省略导入</span><br><span class="line">    </span><br><span class="line">public class DemoUtilsTest&#123;</span><br><span class="line">   </span><br><span class="line">   @Test</span><br><span class="line">   public int testEqualsAndNotEquals()&#123;</span><br><span class="line">       DemoUtils demoUtils = new DemoUtils();</span><br><span class="line">       int expected = 6;</span><br><span class="line">       int actual = demoUtils.add(2,4);</span><br><span class="line">       Assertions.assertEquals(expected, actual, &quot;2+4 must be 6&quot;);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>四.运行测试用例</p><h2 id="Junit断言">Junit断言</h2><ul><li>Junit有一系列的断言</li><li>它们主要在org.junit.jupiter.api.Assertions</li></ul><table><thead><tr><th>方法名</th><th>描述</th></tr></thead><tbody><tr><td>assertEquals</td><td>断言两个值相等</td></tr><tr><td>assertNotEquals</td><td>断言两个值不相等</td></tr><tr><td>assertNull</td><td>断言值为null</td></tr><tr><td>assertNotNull</td><td>断言值不为null</td></tr><tr><td>…</td><td>…</td></tr></tbody></table><h3 id="静态引入">静态引入</h3><ul><li>静态引入：是引用静态方法和字段的快捷方式</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.junit.jupiter.api.Assertions.assertEquals;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.junit.jupiter.api.Assertions.assertNotEquals;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line">    assertEquals(expected, actual, <span class="string">&quot;2 + 4 must be 6&quot;</span>)</span><br><span class="line">    assertNotEquals(unexpected, actual, <span class="string">&quot;2 + 4 not be 6&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="Junit声明周期方法">Junit声明周期方法</h2><ul><li>当我们创建测试用例时，我们可能需要进行一些常见的操作。</li><li>在每次测试时<ul><li>创建对象，设置测试数据</li></ul></li><li>在每次测试后<ul><li>释放资源，清除测试数据</li></ul></li></ul><p>Junit提供了声明周期方法注释：</p><table><thead><tr><th>注解</th><th>描述</th></tr></thead><tbody><tr><td>@BeforeEach</td><td>在每个测试方法前执行，在编写相同代码时使用：  <br />例如创建对象，设置测试数据</td></tr><tr><td>@AfterEach</td><td>在每个测试方法后执行：<br />例如释放资源，清理测试数据</td></tr><tr><td>…</td><td>…</td></tr></tbody></table><p>下面是一个使用该方法的实例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DemoUtilsTest</span></span>&#123;</span><br><span class="line">    DemoUtils demoUtils;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@BeforeEach</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setupBeforeEach</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">// set up</span></span><br><span class="line">        demoUtils = <span class="keyword">new</span> DemoUtils();</span><br><span class="line">        System.out.println(<span class="string">&quot;@BeforeEach executes before the execution of each test method&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">testEqualsAndNotEquals</span><span class="params">()</span></span>&#123;</span><br><span class="line">        assertEquals(<span class="number">6</span>, demoUtils.add(<span class="number">2</span>, <span class="number">4</span>), <span class="string">&quot;2 + 4 must be 6&quot;</span>);</span><br><span class="line">        assertEquals(<span class="number">8</span>, demoUtils.add(<span class="number">1</span>, <span class="number">9</span>), <span class="string">&quot;1 + 9 must not be 8&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@AfterEach</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">tearDownAfterEach</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Running @AfterEach\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>当我们开发测试用例时，我们可能有只需要执行一次的代码：</li><li>例如在所有测试前执行一次的方法<ul><li>获取数据库连接，连接远程服务器</li></ul></li><li>在所有测试后执行一次<ul><li>释放数据库连接，断开远程连接</li></ul></li></ul><table><thead><tr><th>注解</th><th>描述</th></tr></thead><tbody><tr><td>@BeforeAll</td><td>在所有测试用例执行前，只执行一次的方法<br />创建数据库连接，连接远程服务器</td></tr><tr><td>@AfterAll</td><td>只执行一次的方法，在所有的测试方法执行完后，<br />用来释放数据库连接，断开服务器连接</td></tr><tr><td>…</td><td>…</td></tr></tbody></table><h2 id="自定义显示名">自定义显示名</h2><ul><li>当前方法的名称被列在测试结果中</li><li>我们想要去设置自定义显示名<ul><li>想要给测试具有描述性的命名</li><li>去向产品管理非技术人员展示</li></ul></li></ul><table><thead><tr><th>注解</th><th>描述</th></tr></thead><tbody><tr><td>@DisplayName</td><td>自定义显示名</td></tr></tbody></table><h1>Mockito</h1><p>主项目架构<br><img src="https://img-blog.csdnimg.cn/54790106ec0c4bf0a9ea303f7cf8e556.png" alt="在这里插入图片描述"></p><p>我们怎么测试服务，我们只想用最小的依赖配置来测试服务。</p><p>我们可以使用Dao对象的替身<br><img src="https://img-blog.csdnimg.cn/58f3e247c18c4de489f8978fb408fb45.png" alt="在这里插入图片描述"><br>运用替身的技术被称为“Mocking”。</p><h2 id="Mocking的优点">Mocking的优点</h2><ul><li>允许我们去独立测试一个类</li><li>测试所给定类和其依赖之间的联系</li><li>减少配置/使用依赖</li><li>例如在DAO，DB，REST API 等<ul><li>我们可以mock DAO来给出响应</li><li>我们可以mock 一个REST API 去给出响应</li></ul></li></ul><h2 id="Mocking-Frameworks">Mocking Frameworks</h2><ul><li>Java生态系统包含一系列的Mocking框架</li><li>这些Mocking框架提供了下述功能：<ul><li>减少Mock的硬编码</li><li>设置Mock响应的期望</li><li>验证调用方法包括调用次数</li><li>支持程序抛出异常</li></ul></li></ul><h2 id="Mock框架">Mock框架</h2><table><thead><tr><th>名称</th><th>网站</th></tr></thead><tbody><tr><td>Mockito</td><td><a href="http://site.mockito.org">site.mockito.org</a></td></tr><tr><td>EasyMock</td><td><a href="http://www.easymock.org">www.easymock.org</a></td></tr><tr><td>JMockit</td><td><a href="http://jmockit.github.io">jmockit.github.io</a></td></tr></tbody></table><h2 id="使用Mocks进行单元测试">使用Mocks进行单元测试</h2><ul><li>使用Mocks进行单元测试具有以下结构。</li></ul><p><img src="https://img-blog.csdnimg.cn/02c83f9f6c3243fb912003be0c947ae6.png" alt="在这里插入图片描述"></p><h2 id="开发流程">开发流程</h2><ol><li>创建DAO的Mock</li><li>将Mock注入到Service层</li><li>设置期望</li><li>调用方法并设置断言</li><li>验证方法调用</li></ol><p>一.创建DAO的Mock</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.mockito.Mock;</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootTest(classes = MvcTestingExampleApplication.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MockAnnotationTest</span></span>&#123;</span><br><span class="line"><span class="meta">@Mock</span></span><br><span class="line"><span class="keyword">private</span> ApplicationDao applicationDao;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>二.将Mock注入到Service中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.mockito.Mock;</span><br><span class="line"><span class="keyword">import</span> org.mockito.InjectMocks;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootTest(classes = MvcTestingExampleApplication.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MockAnnotationTest</span></span>&#123;</span><br><span class="line"><span class="meta">@Mock</span></span><br><span class="line"><span class="keyword">private</span> ApplicationDao applicationDao;</span><br><span class="line"></span><br><span class="line"><span class="meta">@InjectMocks</span></span><br><span class="line"><span class="keyword">private</span> ApplicationService applicationService;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注释：这里只会注入用@Mock或者@Spy注解引入的依赖</p><p>三.设置期望</p><p>当&quot;doSomeWork()&quot;方法被执行，返回&quot;I am finished &quot;</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.mockito.Mockito.when;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">String aResponse = <span class="string">&quot;I am finished&quot;</span>;</span><br><span class="line">when( doSomeWork() ).thenReturn( aResponse );</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.mockito.Mockito.when;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.junit.jupiter.api.Assertions.assertEquals;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootTest(classes=MvcTestingExampleApplication.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MockAnnotationTest</span></span>&#123;</span><br><span class="line"><span class="meta">@Mock</span></span><br><span class="line"><span class="keyword">private</span> ApplicationDao applicationDao;</span><br><span class="line"></span><br><span class="line"><span class="meta">@InjectMocks</span></span><br><span class="line"><span class="keyword">private</span> ApplicationService applicationService;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> CollegeStudent studentOne;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> StudentGrades studentGrades;</span><br><span class="line"></span><br><span class="line"><span class="meta">@DisplayName(&quot;when &amp; verify&quot;)</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">assertEqualsTestAddGrades</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h1&gt;Junit&lt;/h1&gt;
&lt;p&gt;例如：我们要测试以下代码：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/spa</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>用户中心项目</title>
    <link href="http://example.com/2023/09/24/%E7%94%A8%E6%88%B7%E4%B8%AD%E5%BF%83%E9%A1%B9%E7%9B%AE/"/>
    <id>http://example.com/2023/09/24/%E7%94%A8%E6%88%B7%E4%B8%AD%E5%BF%83%E9%A1%B9%E7%9B%AE/</id>
    <published>2023-09-24T13:18:00.000Z</published>
    <updated>2023-10-18T14:42:36.911Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h2 id="node-js的安装">node.js的安装</h2><p>node.js安装网址如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://nodejs.org/en</span><br></pre></td></tr></table></figure><p>node.js下载好后需要在node的安装目录下配置两个文件夹 <code>node_global</code>和<code>node_cache</code></p><p><img src="https://cdn.nlark.com/yuque/0/2022/png/26770555/1657948370665-3888fe52-ec6d-41e8-84ca-42f8ff4e5707.png" alt="image.png"></p><p>并执行这两段代码</p><p><strong>注意：确保一定成功，请用管理员cmd运行，在此之前需要设置一下文件的可读权限</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm config set prefix &quot;D:\nodejs\node_global&quot;</span><br><span class="line"></span><br><span class="line">npm config set cache &quot;D:\nodejs\node_cache&quot;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2022/png/26770555/1657948649881-cd75e306-9093-442b-9b94-953fdf887f3e.png?x-oss-process=image%2Fresize%2Cw_640%2Climit_0" alt="image.png"></p><p><strong>还有外面的nodejs文件也需要设置文件权限，可以避免后面报错。</strong></p><p><img src="https://cdn.nlark.com/yuque/0/2022/png/26770555/1657948754238-131219aa-f9dd-452b-a0b7-549024e3a945.png?x-oss-process=image%2Fresize%2Cw_640%2Climit_0" alt="image.png"></p><h2 id="Ant-Design-Pro的创建">Ant Design Pro的创建</h2><p>需要创建一个新的文件夹，通过cmd打开命令行窗口</p><p><img src="https://cdn.nlark.com/yuque/0/2022/png/26770555/1657944203538-3dae7833-e53b-48dc-9317-68fffa220792.png" alt="image.png"></p><p>然后再命令窗口中输入官网的创建Ant Design Pro的命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 使用 npm</span><br><span class="line">npm i @ant-design/pro-cli -g</span><br><span class="line">pro create myapp</span><br></pre></td></tr></table></figure><h2 id="数据库设计">数据库设计</h2><p>什么是数据库？存数据</p><p>数据库有什么？数据表 （理解为excel表格）</p><p>java 操作数据库？ 代替人工</p><p>什么是设计数据库表？</p><p>有哪些表（模型）？表中有哪些字段？字段的类型？数据库字段添加索引？</p><p>表与表之间的关联 ？</p><p>问：性别是否需要加索引</p><p>用户表：</p><table><thead><tr><th>字段</th><th>名称</th><th>属性</th></tr></thead><tbody><tr><td>id</td><td>名称</td><td>bigint</td></tr><tr><td>userName</td><td>昵称</td><td>varchar</td></tr><tr><td>gender</td><td>性别</td><td>tinyint</td></tr><tr><td>userAccount</td><td>用户账号</td><td>varchar</td></tr><tr><td>phone</td><td>电话</td><td>varchar</td></tr><tr><td>email</td><td>邮箱</td><td>varchar</td></tr><tr><td>userStatus</td><td>是否有效(比如被封号)</td><td>int</td></tr><tr><td>avatarUrl</td><td>头像</td><td>varchar</td></tr><tr><td>createTime</td><td>创建时间</td><td>datetime</td></tr><tr><td>updateTime</td><td>更新时间</td><td>datetime</td></tr><tr><td>isDelete</td><td>是否删除（逻辑删除）</td><td>tinyint</td></tr></tbody></table><h2 id="规整项目目录">规整项目目录</h2><p>新建项目文件夹如下所示：</p><p><img src="C:%5CUsers%5C86185%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20230929134220149.png" alt="image-20230929134220149"></p><h2 id="编写基本的数据库操作">编写基本的数据库操作</h2><p>我们需要将entity中的User类对象与数据库字段关联，自动生成。</p><p>下载MyBatisX插件：</p><p><img src="C:%5CUsers%5C86185%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20230929134912903.png" alt="image-20230929134912903"></p><p>安装好后，我们就可以使用它生成一些实体类了：</p><p><img src="C:%5CUsers%5C86185%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20230929143302661.png" alt="image-20230929143302661"></p><h2 id="注册逻辑">注册逻辑</h2><ol><li>用户在前端输入账户和密码，以及校验码</li><li>校验用户的账户，密码，校验密码，是否符合要求<ol><li>账户不小于 6 位</li><li>密码大于等于 8 位</li><li>账户不能重复</li><li>密码和校验密码相同</li></ol></li><li>对密码进行加密，（密码千万不要以明文直接存储到数据库中）</li><li>向数据库插入用户数据</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.thylovezq.usercenter.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;</span><br><span class="line"><span class="keyword">import</span> com.thylovezq.usercenter.entity.domain.User;</span><br><span class="line"><span class="keyword">import</span> com.thylovezq.usercenter.service.UserService;</span><br><span class="line"><span class="keyword">import</span> com.thylovezq.usercenter.mapper.UserMapper;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.lang3.StringUtils;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.DigestUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> thy</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 针对表【user(用户表)】的数据库操作Service实现</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@createDate</span> 2023-09-29 14:00:00</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">extends</span> <span class="title">ServiceImpl</span>&lt;<span class="title">UserMapper</span>, <span class="title">User</span>&gt;</span></span><br><span class="line"><span class="class">        <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">userRegister</span><span class="params">(String userAccount, String userPassword, String checkPassword)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> x = checkRegisterValidate(userAccount, userPassword, checkPassword);</span><br><span class="line">        <span class="keyword">return</span> x == -<span class="number">1</span> ? -<span class="number">1</span> : <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">long</span> <span class="title">checkRegisterValidate</span><span class="params">(String userAccount, String userPassword, String checkPassword)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 1. 校验</span></span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isAnyBlank(userAccount, userPassword, checkPassword)) &#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (userAccount.length() &lt; <span class="number">4</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (userPassword.length() &lt; <span class="number">8</span> || checkPassword.length() &lt; <span class="number">8</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!userPassword.equals(checkPassword)) &#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">long</span> count = <span class="keyword">this</span>.count(<span class="keyword">new</span> QueryWrapper&lt;User&gt;().eq(<span class="string">&quot;userAccount&quot;</span>, userAccount));</span><br><span class="line">        <span class="keyword">if</span> (count &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 2. 加密</span></span><br><span class="line">        <span class="keyword">final</span> String SALT = <span class="string">&quot;thy20230930&quot;</span>;</span><br><span class="line">        String encryptPassword = DigestUtils.md5DigestAsHex((SALT + userPassword).getBytes());</span><br><span class="line">        <span class="comment">// 3. 向用户数据库插入数据</span></span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        user.setUserAccount(userAccount);</span><br><span class="line">        user.setUserPassword(encryptPassword);</span><br><span class="line">        <span class="keyword">boolean</span> saveResult = <span class="keyword">this</span>.save(user);</span><br><span class="line">        <span class="keyword">if</span> (!saveResult) &#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> user.getId();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>单元测试用例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">userRegister</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    String userAccount = <span class="string">&quot;thy&quot;</span>;</span><br><span class="line">    String userPassword = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    String checkPassword = <span class="string">&quot;123456&quot;</span>;</span><br><span class="line">    <span class="keyword">long</span> l = userService.userRegister(userAccount, userPassword, checkPassword);</span><br><span class="line">    Assertions.assertEquals(l, -<span class="number">1</span>, <span class="string">&quot;数据库新增插入失败&quot;</span>);</span><br><span class="line">    userAccount = <span class="string">&quot;th&quot;</span>;</span><br><span class="line">    userPassword = <span class="string">&quot;123456&quot;</span>;</span><br><span class="line">    checkPassword = <span class="string">&quot;123456&quot;</span>;</span><br><span class="line">    l = userService.userRegister(userAccount, userPassword, checkPassword);</span><br><span class="line">    Assertions.assertEquals(l, -<span class="number">1</span>, <span class="string">&quot;数据库新增插入失败&quot;</span>);</span><br><span class="line">    userAccount = <span class="string">&quot;123&quot;</span>;</span><br><span class="line">    userPassword = <span class="string">&quot;123456&quot;</span>;</span><br><span class="line">    checkPassword = <span class="string">&quot;123456&quot;</span>;</span><br><span class="line">    l = userService.userRegister(userAccount, userPassword, checkPassword);</span><br><span class="line">    Assertions.assertEquals(l, -<span class="number">1</span>, <span class="string">&quot;数据库新增插入失败&quot;</span>);</span><br><span class="line">    userAccount = <span class="string">&quot;thy123&quot;</span>;</span><br><span class="line">    userPassword = <span class="string">&quot;12345678&quot;</span>;</span><br><span class="line">    checkPassword = <span class="string">&quot;12345678&quot;</span>;</span><br><span class="line">    l = userService.userRegister(userAccount, userPassword, checkPassword);</span><br><span class="line">    Assertions.assertNotEquals(l, -<span class="number">1</span>, <span class="string">&quot;数据库新增插入成功&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="登录逻辑">登录逻辑</h2><p>接收参数：用户账户，密码</p><p>请求类型：POST请求</p><p>请求体：JSON格式的数据</p><blockquote><p>请求参数很长时，不建议使用GET请求</p></blockquote><p>返回值：用户信息（脱敏）</p><p>请求体：JSON格式</p><h3 id="登录流程">登录流程</h3><ol><li>校验用户账户和密码是否合法<ol><li>账户不小于 6 位</li><li>密码大于等于 8 位</li><li>账户不能重复</li><li>密码和校验密码相同</li></ol></li><li>校验密码是否输入正确，要和数据库中的密文进行对比</li><li>返回用户信息（脱敏）</li><li>我们要记录用户的登录态（Session），将其存到服务器上（用后端SprintBoot框架封装的服务器Tomcat去记录）</li></ol><p>如何知道是哪个用户登录了？</p><ol><li>连接服务端后，得到一个session状态（匿名会话），返回给前端。</li><li>登录成功后，得到了登录成功的session，并且给session设置一些值，返回给前端一个设置Cookie的命令。</li><li>前端接收到后端的命令后，保存到浏览器内</li><li>前端再次请求后端的时候（相同的域名），在请求头中带上Cookie去请求</li><li>后端拿到前端传来的cookie，找到对应的session存储的变量，可能是用户的登录信息</li></ol><h2 id="开发后端用户的管理接口">开发后端用户的管理接口</h2><h3 id="查询用户">查询用户</h3><ol><li>允许根据用户名查询</li><li>删除用户</li></ol><h3 id="删除用户">删除用户</h3><h4 id="如何使用mybatis-plus进行逻辑删除">如何使用mybatis-plus进行逻辑删除</h4><ol><li><strong>配置实体类</strong>：在你的实体类中，需要添加一个用于表示逻辑删除状态的字段，通常是一个枚举类型或整数，表示记录是否被逻辑删除。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="meta">@TableName(&quot;your_table_name&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">YourEntity</span> </span>&#123;</span><br><span class="line">    <span class="meta">@TableId(type = IdType.AUTO)</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="comment">// 其他字段</span></span><br><span class="line">    </span><br><span class="line">    <span class="meta">@TableLogic</span></span><br><span class="line">    <span class="keyword">private</span> Integer deleted; <span class="comment">// 逻辑删除标志字段</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// getter 和 setter 方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li><strong>配置 MyBatis Plus</strong>：在配置文件中，需要开启 MyBatis Plus 的逻辑删除功能。<ul><li>对于 Spring Boot 项目，可以在 <code>application.properties</code> 或 <code>application.yml</code> 中添加如下配置：</li></ul></li></ol><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="comment"># 开启逻辑删除</span></span><br><span class="line">  <span class="attr">global-config:</span></span><br><span class="line">    <span class="attr">db-config:</span></span><br><span class="line">      <span class="attr">logic-delete-value:</span> <span class="number">1</span> <span class="comment"># 逻辑已删除值</span></span><br><span class="line">      <span class="attr">logic-not-delete-value:</span> <span class="number">0</span> <span class="comment"># 逻辑未删除值</span></span><br><span class="line">      <span class="attr">logic-delete-field:</span> <span class="string">isDelete</span> <span class="comment"># 全局逻辑删除字段</span></span><br></pre></td></tr></table></figure><h2 id="开发前端用户登录注册">开发前端用户登录注册</h2><h4 id="如何在Ant-design-pro中配置BASE-URL">如何在Ant design pro中配置BASE_URL</h4><p>我们可以在app.tsx中配置：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> request: RequestConfig = &#123;</span><br><span class="line">  <span class="attr">timeout</span>: <span class="number">1000</span>,</span><br><span class="line">  <span class="attr">prefix</span>: <span class="string">&#x27;http://localhost:8080&#x27;</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="前端跨域解决">前端跨域解决</h4><p>正向代理：替客户端向服务端发送请求</p><p>反向代理：替服务器接收请求，你有三台服务器，</p><p>怎么搞代理？</p><p>Nginx服务器</p><p>Node.js服务器</p><h4 id="如何使用Ant-Design-Pro去代理HTTP请求">如何使用Ant Design Pro去代理HTTP请求</h4><p>我们可以在<code>proxy.ts</code>文件中配置：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">dev: &#123;</span><br><span class="line">    <span class="comment">// localhost:8000/api/** -&gt; https://preview.pro.ant.design/api/**</span></span><br><span class="line">    <span class="string">&#x27;/api/&#x27;</span>: &#123;</span><br><span class="line">      <span class="comment">// 要代理的地址</span></span><br><span class="line">      <span class="attr">target</span>: <span class="string">&#x27;http://localhost:8080/&#x27;</span>,</span><br><span class="line">      <span class="comment">// 配置了这个可以从 http 代理到 https</span></span><br><span class="line">      <span class="comment">// 依赖 origin 的功能可能需要这个，比如 cookie</span></span><br><span class="line">      <span class="attr">changeOrigin</span>: <span class="literal">true</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><p>然后在后端配置：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line">  <span class="attr">servlet:</span></span><br><span class="line">    <span class="attr">context-path:</span> <span class="string">/api</span></span><br></pre></td></tr></table></figure><p>然后，删除前面配置的<code>prefix</code>：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> request: RequestConfig = &#123;</span><br><span class="line">  <span class="attr">timeout</span>: <span class="number">1000</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>在每次向后端请求时，都要加上<code>/api</code>前缀：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">login</span>(<span class="params">body: API.LoginParams, options?: &#123; [key: string]: any &#125;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> request&lt;API.LoginResult&gt;(<span class="string">&#x27;/api/user/login&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">    <span class="attr">headers</span>: &#123;</span><br><span class="line">      <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">data</span>: body,</span><br><span class="line">    ...(options || &#123;&#125;),</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="开发前端用户登录">开发前端用户登录</h2><p>复制粘贴<code>Login</code>文件夹</p><p>在<code>Routes.ts</code>文件中添加<code>/user/register</code>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    path: &#x27;/user&#x27;,</span><br><span class="line">    layout: false,</span><br><span class="line">    routes: [</span><br><span class="line">      &#123;name: &#x27;登录&#x27;, path: &#x27;/user/login&#x27;, component: &#x27;./user/Login&#x27;&#125;,</span><br><span class="line">      &#123;name: &#x27;注册&#x27;, path: &#x27;/user/register&#x27;, component: &#x27;./user/Register&#x27;&#125;,</span><br><span class="line">      &#123;component: &#x27;./404&#x27;&#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><p>然后，我们访问<code>http://localhost:8000/user/register</code>，发现网页重定向到了<code>/user/login</code>。这是由于<code>app.ts</code>中做了重定向逻辑，我们可以修改<code>app.ts</code>如下：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">onPageChange: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123;location&#125; = history;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> whiteList = [loginPath, <span class="string">&quot;/user/register&quot;</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (whiteList.includes(location.pathname)) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 如果没有登录，重定向到 login</span></span><br><span class="line">    <span class="keyword">if</span> (!initialState?.currentUser) &#123;</span><br><span class="line">        history.push(loginPath);</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h3 id="更改注册按钮：">更改注册按钮：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;LoginForm</span><br><span class="line">    submitter=&#123;&#123;</span><br><span class="line">    searchConfig: &#123;</span><br><span class="line">    submitText: &quot;注册&quot;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;&#125;</span><br><span class="line">...</span><br><span class="line">&lt;/LoginForm&gt;</span><br></pre></td></tr></table></figure><h3 id="获取用户登录态">获取用户登录态</h3>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h2 id=&quot;node-js的安装&quot;&gt;node.js的安装&lt;/h2&gt;
&lt;p&gt;node.js安装网址如下：&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pr</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>nginx</title>
    <link href="http://example.com/2023/09/21/nginx/"/>
    <id>http://example.com/2023/09/21/nginx/</id>
    <published>2023-09-21T14:05:13.000Z</published>
    <updated>2023-09-21T14:31:53.539Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1>Nginx</h1><h2 id="Nginx的版本">Nginx的版本</h2><ul><li>Nginx的常用版本有四个：</li><li>Nginx开源版<ul><li><a href="http://nginx.org">http://nginx.org</a></li></ul></li><li>Nginx plus 商业版<ul><li><a href="http://www.nginx.com">http://www.nginx.com</a></li></ul></li><li>Openresty<ul><li><a href="http://openresty.org">http://openresty.org</a></li></ul></li><li>Tengine<ul><li><a href="http://tengine.taobao.org">http://tengine.taobao.org</a></li></ul></li></ul><h2 id="Nginx开源版安装">Nginx开源版安装</h2><ul><li>下载</li><li>编译安装与依赖检查</li><li>Nginx启停</li><li>关闭防火墙</li><li>安装成系统服务</li></ul><p>将下载好的nginx-1.22.1.tar.gz放到/usr/local/目录下</p><p>输入下面的命令解压缩：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf  nginx-1.22.1.tar.gz</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h1&gt;Nginx&lt;/h1&gt;
&lt;h2 id=&quot;Nginx的版本&quot;&gt;Nginx的版本&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Nginx的常用版本有四个：&lt;/li&gt;
&lt;li&gt;Nginx开源版
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://nginx.org&quot;&gt;ht</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>JVM</title>
    <link href="http://example.com/2023/09/21/Java%E5%9F%BA%E7%A1%80/JVM/"/>
    <id>http://example.com/2023/09/21/Java%E5%9F%BA%E7%A1%80/JVM/</id>
    <published>2023-09-21T13:52:10.000Z</published>
    <updated>2023-09-21T13:53:11.222Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1>JVM</h1><h2 id="什么是JVM">什么是JVM</h2><p>定义：<br>Java Virtual Machine -java 程序的运行环境（java二进制字节码的运行环境）<br>好处：</p><ul><li>JVM是Java程序一次编写，到处运行的基石。</li><li>自动内存管理，垃圾回收功能。</li><li>数组下标越界检查</li><li>多态</li></ul><h2 id="JVM学习路线">JVM学习路线</h2><p><img src="https://img-blog.csdnimg.cn/88d63e529af04fefa77ac6bb0f1d9564.png" alt="在这里插入图片描述"></p><h2 id="内存结构">内存结构</h2><p>Program Counter Register 程序计数器（寄存器）</p><ul><li>作用：记住下一条指令的执行地址。</li><li>特点<ul><li>是线程私有的</li><li>不会存在内存溢出</li></ul></li></ul><h2 id="虚拟机栈定义">虚拟机栈定义</h2><p>Java Virtual Machine Stacks（虚拟机栈）</p><ul><li>每个线程运行所需要的内存，称为虚拟机栈。</li><li>每个栈由多个栈帧组成，对应着每次方法调用时所占用的内存</li><li>每个线程只能有一个活动栈帧，对应着当前执行的那个方法</li></ul><p>问题辨析：<br>1.垃圾回收是否设计栈内存：<br>不涉及，因为栈内存无非就是一次次的方法调用，而每一次方法结束后，都会弹出栈，因此垃圾回收不需要回收栈内存。</p><p>2.栈内存的分配越大越好吗<br>栈内存越大，线程数会越少。<br>栈内存可以通过设置-Xss来指定：<br>默认情况下：</p><ul><li>Linux: 1024KB</li><li>macOS: 1024KB</li><li>Oracle Solaris: 1024KB<br>而提升栈内存只能够提升最大的递归调用。</li></ul><p>3.方法内的局部变量是否线程安全<br>是线程安全的。</p><h2 id="练习：判断下列方法是否为线程安全？">练习：判断下列方法是否为线程安全？</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">m1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        sb.append(<span class="number">1</span>);</span><br><span class="line">        sb.append(<span class="number">2</span>);</span><br><span class="line">        sb.append(<span class="number">3</span>);</span><br><span class="line">        System.out.println(sb.toString());</span><br><span class="line">        sb.delete(<span class="number">0</span>,sb.length());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">m2</span><span class="params">(StringBuilder sb)</span> </span>&#123;</span><br><span class="line">        sb.append(<span class="number">1</span>);</span><br><span class="line">        sb.append(<span class="number">2</span>);</span><br><span class="line">        sb.append(<span class="number">3</span>);</span><br><span class="line">        System.out.println(sb.toString());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> StringBuilder <span class="title">m2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        sb.append(<span class="number">1</span>);</span><br><span class="line">        sb.append(<span class="number">2</span>);</span><br><span class="line">        sb.append(<span class="number">3</span>);</span><br><span class="line">        <span class="keyword">return</span> sb;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>答案：第一个方法里的变量是线程安全的，而第二个和第三个是线程不安全的。<br>结论：</p><ul><li>如果方法内局部变量没有逃离方法的作用范围，它就是线程安全的，反之它就不是线程安全的。</li><li>如果是局部变量引用了对象，并逃离方法的作用范围，需要考虑线程的安全。</li></ul><h2 id="栈内存溢出">栈内存溢出</h2><ul><li>栈帧过多导致栈内存溢出。</li><li>栈帧过大导致栈内存溢出。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> count;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            method1();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            System.out.println(count);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        count++;</span><br><span class="line">        method1();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述代码就会发生<code>java.lang.StackOverflowError</code>错误。</p><h2 id="线程运行诊断">线程运行诊断</h2><p>案例一：CPU占用过多</p><p>首先：<br>我们需要定位占用CPU多的进程，可以使用以下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">top</span><br></pre></td></tr></table></figure><p>但是此时无法定位出进程中的哪个线程占用CPU较高，可以采用以下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps H -eo pid,tid,%cpu</span><br></pre></td></tr></table></figure><p>jstack命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jstack 进程id</span><br></pre></td></tr></table></figure><ul><li>jstack可以根据线程id找到有问题的线程，进一步定位到问题代码的源码行号。</li></ul><p>案例二：程序运行很长时间没有结果<br>可以使用jstack进行诊断：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Object A = <span class="keyword">new</span> Object();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Object B = <span class="keyword">new</span> Object();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (A) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;获取到了A对象的锁&quot;</span>);</span><br><span class="line">                    Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">                    <span class="keyword">synchronized</span> (B) &#123;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line">        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (B) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;获取到了B对象的锁&quot;</span>);</span><br><span class="line">                <span class="keyword">synchronized</span> (A) &#123;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="本地方法栈">本地方法栈</h2><h2 id="堆">堆</h2><p>Heap 堆</p><ul><li>通过new关键字，创建对象都会使用堆内存。<br>特点：</li><li>它是线程共享的，堆中对象都需要考虑到线程安全的问题。</li><li>有垃圾回收机制</li></ul><h3 id="堆内存的溢出问题">堆内存的溢出问题</h3><p>请查看以下代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">            String s = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">                list.add(s);</span><br><span class="line">                s = s + s;</span><br><span class="line">                cnt++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            System.out.println(cnt);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述代码运行后会发生如下报错：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java.lang.OutOfMemoryError: Java heap space</span><br></pre></td></tr></table></figure><p>在Java虚拟机中，我们可以设置JVM堆内存的大小，在前面的代码中，我们在堆内存溢出前总共进行了27次add操作：<br>而当我们使用下述语句调小堆内存后，我们只会进行17次add操作：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-Xmx8m</span><br></pre></td></tr></table></figure><h2 id="堆内存诊断">堆内存诊断</h2><p>1.jps工具：</p><ul><li>查看当前系统中有哪些java进程<br>2.jmap工具：</li><li>查看堆内存占用情况<br>这里需要注意，如果报错的话，记得查看是否是相同版本的Java编译器。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jmap -heap 进程id</span><br></pre></td></tr></table></figure><p>3.jconsole工具：</p><ul><li>图形界面的，多功能的监测工具，可以连续监测</li></ul><p>我们使用如下案例演示堆内存诊断：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;1.---&quot;</span>);</span><br><span class="line">        Thread.sleep(<span class="number">30000</span>);</span><br><span class="line">        <span class="keyword">byte</span>[] array = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span> * <span class="number">1024</span> * <span class="number">10</span>];</span><br><span class="line">        System.out.println(<span class="string">&quot;2.---&quot;</span>);</span><br><span class="line">        Thread.sleep(<span class="number">30000</span>);</span><br><span class="line">        array = <span class="keyword">null</span>;</span><br><span class="line">        System.gc();</span><br><span class="line">        System.out.println(<span class="string">&quot;3.---&quot;</span>);</span><br><span class="line">        Thread.sleep(<span class="number">1000000L</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>案例：</p><ul><li>垃圾回收后，内存占用仍然很高<br>可以使用<code>jvisualvm</code>定位排查</li></ul><h2 id="方法区">方法区</h2><p>JVM规范-方法区定义<br>方法区是所有JVM虚拟机线程共享的区域。它存储了跟类相关的信息，例如：类的成员变量，方法数据，成员方法和构造器方法的代码。<br>方法区是在虚拟机启动时被创建。方法区逻辑上是堆的组成部分。<br>什么是逻辑上呢：<br>因为不同厂商不一定会遵循JVM的定义。<br>例如在JDK1.8时，Oracle的hotspot虚拟机在JDK8之前方法区叫做永久代，其就是堆内存的一部分，而在JDK1.8之后，将堆内存移除了。换了一种实现，叫做元空间。而元空间使用的则是本地内存。</p><p>如果方法区的内存不足了，Java虚拟机也会抛出一个OutOfMemoryError。<br><img src="https://img-blog.csdnimg.cn/2d5cadb92a17406fb36b9f5ffbd42a09.png" alt="在这里插入图片描述"></p><h3 id="方法区的内存溢出">方法区的内存溢出</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> <span class="keyword">extends</span> <span class="title">ClassLoader</span> </span>&#123; <span class="comment">// 可以用来记载类的二进制字节码</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123; </span><br><span class="line">        <span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Main test = <span class="keyword">new</span> Main();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++, j++) &#123;</span><br><span class="line">            <span class="comment">// ClassWriter:作用是生成二进制字节码</span></span><br><span class="line">                ClassWriter cw = <span class="keyword">new</span> ClassWriter(<span class="number">0</span>);</span><br><span class="line">                <span class="comment">// 版本号，访问修饰符，类名，包名，父类，实现接口名称</span></span><br><span class="line">                cw.visit(Opcodes.V1_8, Opcodes.ACC_PUBLIC, <span class="string">&quot;Class&quot;</span> + i, <span class="keyword">null</span>, <span class="string">&quot;java/lang/Object&quot;</span>, <span class="keyword">null</span>);</span><br><span class="line">                <span class="comment">// 返回byte[]</span></span><br><span class="line">                <span class="keyword">byte</span>[] code = cw.toByteArray();</span><br><span class="line">                <span class="comment">// 加载类，执行了类的加载</span></span><br><span class="line">                test.defineClass(<span class="string">&quot;Class&quot;</span> + i, code, <span class="number">0</span>, code.length);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            System.out.println(j);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可以设置元空间的大小：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-XX:MaxMetaspaceSize=8m</span><br></pre></td></tr></table></figure><h3 id="运行时常量池">运行时常量池</h3><p><img src="https://img-blog.csdnimg.cn/ce3a9583a66f4813bf0fbad3b4dd1089.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/aec8f7000ff44310953b56b1f95bb836.png" alt="在这里插入图片描述"></p><h3 id="方法区常量池">方法区常量池</h3><p>我们可以cd到class文件的文件夹下，输入以下指令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">javap -v Main.class</span><br></pre></td></tr></table></figure><p>可以得到如下信息：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line">Classfile /D:/java-proj/javase-proj/out/production/javase-proj/Main.class</span><br><span class="line">  Last modified 2023年9月8日; size 568 bytes</span><br><span class="line">  SHA-256 checksum 8f4d3504ddfc7496a0445eb4bf581c4b45b58b99b8161aa82972d2c25b3412ba</span><br><span class="line">  Compiled from &quot;Main.java&quot;</span><br><span class="line">public class Main</span><br><span class="line">  minor version: 0</span><br><span class="line">  major version: 52</span><br><span class="line">  flags: (0x0021) ACC_PUBLIC, ACC_SUPER</span><br><span class="line">  this_class: #5                          // Main</span><br><span class="line">  super_class: #6                         // java/lang/Object</span><br><span class="line">  interfaces: 0, fields: 0, methods: 2, attributes: 1</span><br><span class="line">Constant pool:</span><br><span class="line">   #1 = Methodref          #6.#22         // java/lang/Object.&quot;&lt;init&gt;&quot;:()V</span><br><span class="line">   #2 = Fieldref           #23.#24        // java/lang/System.out:Ljava/io/PrintStream;</span><br><span class="line">   #3 = String             #25            // hello</span><br><span class="line">   #4 = Methodref          #26.#27        // java/io/PrintStream.println:(Ljava/lang/String;)V</span><br><span class="line">   #5 = Class              #28            // Main</span><br><span class="line">   #6 = Class              #29            // java/lang/Object</span><br><span class="line">   #7 = Utf8               &lt;init&gt;</span><br><span class="line">   #8 = Utf8               ()V</span><br><span class="line">   #9 = Utf8               Code</span><br><span class="line">  #10 = Utf8               LineNumberTable</span><br><span class="line">  #11 = Utf8               LocalVariableTable</span><br><span class="line">  #12 = Utf8               this</span><br><span class="line">  #13 = Utf8               LMain;</span><br><span class="line">  #14 = Utf8               main</span><br><span class="line">  #15 = Utf8               ([Ljava/lang/String;)V</span><br><span class="line">  #16 = Utf8               args</span><br><span class="line">  #17 = Utf8               [Ljava/lang/String;</span><br><span class="line">  #18 = Utf8               Exceptions</span><br><span class="line">  #19 = Class              #30            // java/lang/InterruptedException</span><br><span class="line">  #20 = Utf8               SourceFile</span><br><span class="line">  #21 = Utf8               Main.java</span><br><span class="line">  #22 = NameAndType        #7:#8          // &quot;&lt;init&gt;&quot;:()V</span><br><span class="line">  #23 = Class              #31            // java/lang/System</span><br><span class="line">  #24 = NameAndType        #32:#33        // out:Ljava/io/PrintStream;</span><br><span class="line">  #25 = Utf8               hello</span><br><span class="line">  #26 = Class              #34            // java/io/PrintStream</span><br><span class="line">  #27 = NameAndType        #35:#36        // println:(Ljava/lang/String;)V</span><br><span class="line">  #28 = Utf8               Main</span><br><span class="line">  #29 = Utf8               java/lang/Object</span><br><span class="line">  #30 = Utf8               java/lang/InterruptedException</span><br><span class="line">  #31 = Utf8               java/lang/System</span><br><span class="line">  #32 = Utf8               out</span><br><span class="line">  #33 = Utf8               Ljava/io/PrintStream;</span><br><span class="line">  #34 = Utf8               java/io/PrintStream</span><br><span class="line">  #35 = Utf8               println</span><br><span class="line">  #36 = Utf8               (Ljava/lang/String;)V</span><br><span class="line">&#123;</span><br><span class="line">  // 构造方法</span><br><span class="line">  public Main();</span><br><span class="line">    descriptor: ()V</span><br><span class="line">    flags: (0x0001) ACC_PUBLIC</span><br><span class="line">    Code:</span><br><span class="line">      stack=1, locals=1, args_size=1</span><br><span class="line">         0: aload_0</span><br><span class="line">         1: invokespecial #1                  // Method java/lang/Object.&quot;&lt;init&gt;&quot;:()V</span><br><span class="line">         4: return</span><br><span class="line">      LineNumberTable:</span><br><span class="line">        line 1: 0</span><br><span class="line">      LocalVariableTable:</span><br><span class="line">        Start  Length  Slot  Name   Signature</span><br><span class="line">            0       5     0  this   LMain;</span><br><span class="line"></span><br><span class="line">  public static void main(java.lang.String[]) throws java.lang.InterruptedException;</span><br><span class="line">    descriptor: ([Ljava/lang/String;)V</span><br><span class="line">    flags: (0x0009) ACC_PUBLIC, ACC_STATIC</span><br><span class="line">    Code:</span><br><span class="line">      stack=2, locals=1, args_size=1</span><br><span class="line">         0: getstatic     #2                  // Field java/lang/System.out:Ljava/io/PrintStream;</span><br><span class="line">         3: ldc           #3                  // String hello</span><br><span class="line">         // 虚方法调用</span><br><span class="line">         5: invokevirtual #4                  // Method java/io/PrintStream.println:(Ljava/lang/String;)V</span><br><span class="line">         8: return</span><br><span class="line">      LineNumberTable:</span><br><span class="line">        line 3: 0</span><br><span class="line">        line 4: 8</span><br><span class="line">      LocalVariableTable:</span><br><span class="line">        Start  Length  Slot  Name   Signature</span><br><span class="line">            0       9     0  args   [Ljava/lang/String;</span><br><span class="line">    Exceptions:</span><br><span class="line">      throws java.lang.InterruptedException</span><br><span class="line">&#125;</span><br><span class="line">SourceFile: &quot;Main.java&quot;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="运行时常量池-2">运行时常量池</h3><ul><li>常量池，就是一张表，虚拟机指令根据这张常量表找到要执行的类名，方法名，参数类型，字面量等信息。</li><li>运行时常量池，常量池是*.class文件中的，当该类被加载，它的常量池信息就会放入运行时常量池，并把里面的符号地址变为真实地址。</li></ul><h3 id="StringTable">StringTable</h3><p>先看几道面试题</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String s1 = <span class="string">&quot;a&quot;</span>;</span><br><span class="line">        String s2 = <span class="string">&quot;b&quot;</span>;</span><br><span class="line">        String s3 = <span class="string">&quot;a&quot;</span> + <span class="string">&quot;b&quot;</span>;</span><br><span class="line">        String s4 = s1 + s2;</span><br><span class="line">        String s5 = <span class="string">&quot;ab&quot;</span>;</span><br><span class="line">        String s6 = s4.intern();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 问</span></span><br><span class="line">        System.out.println(s3 == s4);</span><br><span class="line">        System.out.println(s3 == s5);</span><br><span class="line">        System.out.println(s3 == s6);</span><br><span class="line"></span><br><span class="line">        String x2 = <span class="keyword">new</span> String(<span class="string">&quot;c&quot;</span>) + <span class="keyword">new</span> String(<span class="string">&quot;d&quot;</span>);</span><br><span class="line">        String x1 = <span class="string">&quot;cd&quot;</span>;</span><br><span class="line">        x2.intern();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 问，如果调换了【最后两行代码】的位置呢，如果是jdk1.6呢</span></span><br><span class="line">        System.out.println(x1 == x2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为了解决上述问题，我们将以下代码编译为字节码文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String s1 = <span class="string">&quot;a&quot;</span>;</span><br><span class="line">        String s2 = <span class="string">&quot;b&quot;</span>;</span><br><span class="line">        String s3 = <span class="string">&quot;ab&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line">  Last modified 2023年9月8日; size 464 bytes</span><br><span class="line">  SHA-256 checksum 4496bf1cc073203808e276452fbdf842aa5da9b1e060aae2d68028d106048cbb</span><br><span class="line">  Compiled from &quot;Main.java&quot;</span><br><span class="line">public class Main</span><br><span class="line">  minor version: 0</span><br><span class="line">  major version: 52</span><br><span class="line">  flags: (0x0021) ACC_PUBLIC, ACC_SUPER</span><br><span class="line">  this_class: #5                          // Main</span><br><span class="line">  super_class: #6                         // java/lang/Object</span><br><span class="line">  interfaces: 0, fields: 0, methods: 2, attributes: 1</span><br><span class="line">Constant pool:</span><br><span class="line">   #1 = Methodref          #6.#24         // java/lang/Object.&quot;&lt;init&gt;&quot;:()V</span><br><span class="line">   #2 = String             #25            // a</span><br><span class="line">   #3 = String             #26            // b</span><br><span class="line">   #4 = String             #27            // ab</span><br><span class="line">   #5 = Class              #28            // Main</span><br><span class="line">   #6 = Class              #29            // java/lang/Object</span><br><span class="line">   #7 = Utf8               &lt;init&gt;</span><br><span class="line">   #8 = Utf8               ()V</span><br><span class="line">   #9 = Utf8               Code</span><br><span class="line">  #10 = Utf8               LineNumberTable</span><br><span class="line">  #11 = Utf8               LocalVariableTable</span><br><span class="line">  #12 = Utf8               this</span><br><span class="line">  #13 = Utf8               LMain;</span><br><span class="line">  #14 = Utf8               main</span><br><span class="line">  #15 = Utf8               ([Ljava/lang/String;)V</span><br><span class="line">  #16 = Utf8               args</span><br><span class="line">  #17 = Utf8               [Ljava/lang/String;</span><br><span class="line">  #18 = Utf8               s1</span><br><span class="line">  #19 = Utf8               Ljava/lang/String;</span><br><span class="line">  #20 = Utf8               s2</span><br><span class="line">  #21 = Utf8               s3</span><br><span class="line">  #22 = Utf8               SourceFile</span><br><span class="line">  #23 = Utf8               Main.java</span><br><span class="line">  #24 = NameAndType        #7:#8          // &quot;&lt;init&gt;&quot;:()V</span><br><span class="line">  #25 = Utf8               a</span><br><span class="line">  #26 = Utf8               b</span><br><span class="line">  #27 = Utf8               ab</span><br><span class="line">  #28 = Utf8               Main</span><br><span class="line">  #29 = Utf8               java/lang/Object</span><br><span class="line">&#123;</span><br><span class="line">  public Main();</span><br><span class="line">    descriptor: ()V</span><br><span class="line">    flags: (0x0001) ACC_PUBLIC</span><br><span class="line">    Code:</span><br><span class="line">      stack=1, locals=1, args_size=1</span><br><span class="line">         0: aload_0</span><br><span class="line">         1: invokespecial #1                  // Method java/lang/Object.&quot;&lt;init&gt;&quot;:()V</span><br><span class="line">         4: return</span><br><span class="line">      LineNumberTable:</span><br><span class="line">        line 1: 0</span><br><span class="line">      LocalVariableTable:</span><br><span class="line">        Start  Length  Slot  Name   Signature</span><br><span class="line">            0       5     0  this   LMain;</span><br><span class="line"></span><br><span class="line">  public static void main(java.lang.String[]);</span><br><span class="line">    descriptor: ([Ljava/lang/String;)V</span><br><span class="line">    flags: (0x0009) ACC_PUBLIC, ACC_STATIC</span><br><span class="line">    Code:</span><br><span class="line">      stack=1, locals=4, args_size=1</span><br><span class="line">         0: ldc           #2                  // String a</span><br><span class="line">         2: astore_1</span><br><span class="line">         3: ldc           #3                  // String b</span><br><span class="line">         5: astore_2</span><br><span class="line">         6: ldc           #4                  // String ab</span><br><span class="line">         8: astore_3</span><br><span class="line">         9: return</span><br><span class="line">      LineNumberTable:</span><br><span class="line">        line 3: 0</span><br><span class="line">        line 4: 3</span><br><span class="line">        line 5: 6</span><br><span class="line">        line 6: 9</span><br><span class="line">      LocalVariableTable:</span><br><span class="line">        Start  Length  Slot  Name   Signature</span><br><span class="line">            0      10     0  args   [Ljava/lang/String;</span><br><span class="line">            3       7     1    s1   Ljava/lang/String;</span><br><span class="line">            6       4     2    s2   Ljava/lang/String;</span><br><span class="line">            9       1     3    s3   Ljava/lang/String;</span><br><span class="line">&#125;</span><br><span class="line">SourceFile: &quot;Main.java&quot;</span><br></pre></td></tr></table></figure><p>从上面的代码我们可以看出：<br>先开始时，常量池中的信息，都会被加载到运行时常量池中，这时a, b, ab都是常量池中的符号，还没有变为java中的字符串对象，当执行ldc #2 会把a符号变为&quot;a&quot;字符串对象，执行ldc #3 会把b符号变为&quot;b&quot;字符串对象，执行ldc #4 会把ab符号变为&quot;ab&quot;字符串对象。</p><p>当我们新增如下语句后:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String s4 = s1 + s2;</span><br></pre></td></tr></table></figure><p>再次执行<code>javap</code>命令后可以得到：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line">  Last modified 2023年9月8日; size 648 bytes</span><br><span class="line">  SHA-256 checksum c92c29033e0314bf1f54749fd7739131b7ba7cd61d162f0bfb8cd6d2b129b2f4</span><br><span class="line">  Compiled from &quot;Main.java&quot;</span><br><span class="line">public class Main</span><br><span class="line">  minor version: 0</span><br><span class="line">  major version: 52</span><br><span class="line">  flags: (0x0021) ACC_PUBLIC, ACC_SUPER</span><br><span class="line">  this_class: #9                          // Main</span><br><span class="line">  super_class: #10                        // java/lang/Object</span><br><span class="line">  interfaces: 0, fields: 0, methods: 2, attributes: 1</span><br><span class="line">Constant pool:</span><br><span class="line">   #1 = Methodref          #10.#29        // java/lang/Object.&quot;&lt;init&gt;&quot;:()V</span><br><span class="line">   #2 = String             #30            // a</span><br><span class="line">   #3 = String             #31            // b</span><br><span class="line">   #4 = String             #32            // ab</span><br><span class="line">   #5 = Class              #33            // java/lang/StringBuilder</span><br><span class="line">   #6 = Methodref          #5.#29         // java/lang/StringBuilder.&quot;&lt;init&gt;&quot;:()V</span><br><span class="line">   #7 = Methodref          #5.#34         // java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;</span><br><span class="line">   #8 = Methodref          #5.#35         // java/lang/StringBuilder.toString:()Ljava/lang/String;</span><br><span class="line">   #9 = Class              #36            // Main</span><br><span class="line">  #10 = Class              #37            // java/lang/Object</span><br><span class="line">  #11 = Utf8               &lt;init&gt;</span><br><span class="line">  #12 = Utf8               ()V</span><br><span class="line">  #13 = Utf8               Code</span><br><span class="line">  #14 = Utf8               LineNumberTable</span><br><span class="line">  #15 = Utf8               LocalVariableTable</span><br><span class="line">  #16 = Utf8               this</span><br><span class="line">  #17 = Utf8               LMain;</span><br><span class="line">  #18 = Utf8               main</span><br><span class="line">  #19 = Utf8               ([Ljava/lang/String;)V</span><br><span class="line">  #20 = Utf8               args</span><br><span class="line">  #21 = Utf8               [Ljava/lang/String;</span><br><span class="line">  #22 = Utf8               s1</span><br><span class="line">  #23 = Utf8               Ljava/lang/String;</span><br><span class="line">  #24 = Utf8               s2</span><br><span class="line">  #25 = Utf8               s3</span><br><span class="line">  #26 = Utf8               s4</span><br><span class="line">  #27 = Utf8               SourceFile</span><br><span class="line">  #28 = Utf8               Main.java</span><br><span class="line">  #29 = NameAndType        #11:#12        // &quot;&lt;init&gt;&quot;:()V</span><br><span class="line">  #30 = Utf8               a</span><br><span class="line">  #31 = Utf8               b</span><br><span class="line">  #32 = Utf8               ab</span><br><span class="line">  #33 = Utf8               java/lang/StringBuilder</span><br><span class="line">  #34 = NameAndType        #38:#39        // append:(Ljava/lang/String;)Ljava/lang/StringBuilder;</span><br><span class="line">  #35 = NameAndType        #40:#41        // toString:()Ljava/lang/String;</span><br><span class="line">  #36 = Utf8               Main</span><br><span class="line">  #37 = Utf8               java/lang/Object</span><br><span class="line">  #38 = Utf8               append</span><br><span class="line">  #39 = Utf8               (Ljava/lang/String;)Ljava/lang/StringBuilder;</span><br><span class="line">  #40 = Utf8               toString</span><br><span class="line">  #41 = Utf8               ()Ljava/lang/String;</span><br><span class="line">&#123;</span><br><span class="line">  public Main();</span><br><span class="line">    descriptor: ()V</span><br><span class="line">    flags: (0x0001) ACC_PUBLIC</span><br><span class="line">    Code:</span><br><span class="line">      stack=1, locals=1, args_size=1</span><br><span class="line">         0: aload_0</span><br><span class="line">         1: invokespecial #1                  // Method java/lang/Object.&quot;&lt;init&gt;&quot;:()V</span><br><span class="line">         4: return</span><br><span class="line">      LineNumberTable:</span><br><span class="line">        line 1: 0</span><br><span class="line">      LocalVariableTable:</span><br><span class="line">        Start  Length  Slot  Name   Signature</span><br><span class="line">            0       5     0  this   LMain;</span><br><span class="line"></span><br><span class="line">  public static void main(java.lang.String[]);</span><br><span class="line">    descriptor: ([Ljava/lang/String;)V</span><br><span class="line">    flags: (0x0009) ACC_PUBLIC, ACC_STATIC</span><br><span class="line">    Code:</span><br><span class="line">      stack=2, locals=5, args_size=1</span><br><span class="line">         0: ldc           #2                  // String a</span><br><span class="line">         2: astore_1</span><br><span class="line">         3: ldc           #3                  // String b</span><br><span class="line">         5: astore_2</span><br><span class="line">         6: ldc           #4                  // String ab</span><br><span class="line">         8: astore_3</span><br><span class="line">         9: new           #5                  // class java/lang/StringBuilder</span><br><span class="line">        12: dup</span><br><span class="line">        13: invokespecial #6                  // Method java/lang/StringBuilder.&quot;&lt;init&gt;&quot;:()V</span><br><span class="line">        16: aload_1</span><br><span class="line">        17: invokevirtual #7                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;</span><br><span class="line">        20: aload_2</span><br><span class="line">        21: invokevirtual #7                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;</span><br><span class="line">        24: invokevirtual #8                  // Method java/lang/StringBuilder.toString:()Ljava/lang/String;</span><br><span class="line">        27: astore        4</span><br><span class="line">        29: return</span><br><span class="line">      LineNumberTable:</span><br><span class="line">        line 8: 0</span><br><span class="line">        line 9: 3</span><br><span class="line">        line 10: 6</span><br><span class="line">        line 11: 9</span><br><span class="line">        line 12: 29</span><br><span class="line">      LocalVariableTable:</span><br><span class="line">        Start  Length  Slot  Name   Signature</span><br><span class="line">            0      30     0  args   [Ljava/lang/String;</span><br><span class="line">            3      27     1    s1   Ljava/lang/String;</span><br><span class="line">            6      24     2    s2   Ljava/lang/String;</span><br><span class="line">            9      21     3    s3   Ljava/lang/String;</span><br><span class="line">           29       1     4    s4   Ljava/lang/String;</span><br><span class="line">&#125;</span><br><span class="line">SourceFile: &quot;Main.java&quot;</span><br></pre></td></tr></table></figure><p>从上述代码中可以看出：<br>Java虚拟机新创建了一个StringBuilder对象，然后使用append方法添加&quot;a&quot;，“b”。最后调用toString方法，并放入s4变量。而查看StringBuidler类的toString方法的实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Create a copy, don&#x27;t share the array</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> String(value, <span class="number">0</span>, count);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可以发现，StringBuilder会再次new一个String对象。因此对于下面的输出：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String s4 = s1 + s2;</span><br><span class="line">System.out.println(s4 == s3);</span><br></pre></td></tr></table></figure><p>由于<code>==</code>运算符判断的是两个对象的内存地址是否相等。而s3对象是在串池中创建的，而s4则是在堆中创建的，因此，结果为<code>false</code>。</p><h3 id="StringTable编译器优化">StringTable编译器优化</h3><p>对于下面的代码片段：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 常量池中的信息，都会被加载到运行时常量池中，这时a, b, ab都是常量池中的符号，还没有变为java中的字符串对象</span></span><br><span class="line">        <span class="comment">// ldc #2 会把a符号变为&quot;a&quot;字符串对象</span></span><br><span class="line">        <span class="comment">// ldc #3 会把b符号变为&quot;b&quot;字符串对象</span></span><br><span class="line">        <span class="comment">// ldc #4 会把ab符号变为&quot;ab&quot;字符串对象</span></span><br><span class="line"></span><br><span class="line">        String s1 = <span class="string">&quot;a&quot;</span>;</span><br><span class="line">        String s2 = <span class="string">&quot;b&quot;</span>;</span><br><span class="line">        String s3 = <span class="string">&quot;ab&quot;</span>;</span><br><span class="line">        String s4 = s1 + s2;</span><br><span class="line">        System.out.println(s4 == s3);</span><br><span class="line">        String s5 = <span class="string">&quot;a&quot;</span> + <span class="string">&quot;b&quot;</span>;</span><br><span class="line">        System.out.println(s5 == s3);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们执行javap -v Main.class可以得到：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br></pre></td><td class="code"><pre><span class="line">Constant pool:</span><br><span class="line">   #<span class="number">1</span> = Methodref          #<span class="number">12.</span>#<span class="number">36</span>        <span class="comment">// java/lang/Object.&quot;&lt;init&gt;&quot;:()V</span></span><br><span class="line">   #<span class="number">2</span> = String             #<span class="number">37</span>            <span class="comment">// a</span></span><br><span class="line">   #<span class="number">3</span> = String             #<span class="number">38</span>            <span class="comment">// b</span></span><br><span class="line">   #<span class="number">4</span> = String             #<span class="number">39</span>            <span class="comment">// ab</span></span><br><span class="line">   #<span class="number">5</span> = Class              #<span class="number">40</span>            <span class="comment">// java/lang/StringBuilder</span></span><br><span class="line">   #<span class="number">6</span> = Methodref          #<span class="number">5.</span>#<span class="number">36</span>         <span class="comment">// java/lang/StringBuilder.&quot;&lt;init&gt;&quot;:()V</span></span><br><span class="line">   #<span class="number">7</span> = Methodref          #<span class="number">5.</span>#<span class="number">41</span>         <span class="comment">// java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;</span></span><br><span class="line">   #<span class="number">8</span> = Methodref          #<span class="number">5.</span>#<span class="number">42</span>         <span class="comment">// java/lang/StringBuilder.toString:()Ljava/lang/String;</span></span><br><span class="line">   #<span class="number">9</span> = Fieldref           #<span class="number">43.</span>#<span class="number">44</span>        <span class="comment">// java/lang/System.out:Ljava/io/PrintStream;</span></span><br><span class="line">  #<span class="number">10</span> = Methodref          #<span class="number">45.</span>#<span class="number">46</span>        <span class="comment">// java/io/PrintStream.println:(Z)V</span></span><br><span class="line">  #<span class="number">11</span> = Class              #<span class="number">47</span>            <span class="comment">// Main</span></span><br><span class="line">  #<span class="number">12</span> = Class              #<span class="number">48</span>            <span class="comment">// java/lang/Object</span></span><br><span class="line">  #<span class="number">13</span> = Utf8               &lt;init&gt;</span><br><span class="line">  #<span class="number">14</span> = Utf8               ()V</span><br><span class="line">  #<span class="number">15</span> = Utf8               Code</span><br><span class="line">  #<span class="number">16</span> = Utf8               LineNumberTable</span><br><span class="line">  #<span class="number">17</span> = Utf8               LocalVariableTable</span><br><span class="line">  #<span class="number">18</span> = Utf8               <span class="keyword">this</span></span><br><span class="line">  #<span class="number">19</span> = Utf8               LMain;</span><br><span class="line">  #<span class="number">20</span> = Utf8               main</span><br><span class="line">  #<span class="number">21</span> = Utf8               ([Ljava/lang/String;)V</span><br><span class="line">  #<span class="number">22</span> = Utf8               args</span><br><span class="line">  #<span class="number">23</span> = Utf8               [Ljava/lang/String;</span><br><span class="line">  #<span class="number">24</span> = Utf8               s1</span><br><span class="line">  #<span class="number">25</span> = Utf8               Ljava/lang/String;</span><br><span class="line">  #<span class="number">26</span> = Utf8               s2</span><br><span class="line">  #<span class="number">27</span> = Utf8               s3</span><br><span class="line">  #<span class="number">28</span> = Utf8               s4</span><br><span class="line">  #<span class="number">29</span> = Utf8               s5</span><br><span class="line">  #<span class="number">30</span> = Utf8               StackMapTable</span><br><span class="line">  #<span class="number">31</span> = Class              #<span class="number">23</span>            <span class="comment">// &quot;[Ljava/lang/String;&quot;</span></span><br><span class="line">  #<span class="number">32</span> = Class              #<span class="number">49</span>            <span class="comment">// java/lang/String</span></span><br><span class="line">  #<span class="number">33</span> = Class              #<span class="number">50</span>            <span class="comment">// java/io/PrintStream</span></span><br><span class="line">  #<span class="number">34</span> = Utf8               SourceFile</span><br><span class="line">  #<span class="number">35</span> = Utf8               Main.java</span><br><span class="line">  #<span class="number">36</span> = NameAndType        #<span class="number">13</span>:#<span class="number">14</span>        <span class="comment">// &quot;&lt;init&gt;&quot;:()V</span></span><br><span class="line">  #<span class="number">37</span> = Utf8               a</span><br><span class="line">  #<span class="number">38</span> = Utf8               b</span><br><span class="line">  #<span class="number">39</span> = Utf8               ab</span><br><span class="line">  #<span class="number">40</span> = Utf8               java/lang/StringBuilder</span><br><span class="line">  #<span class="number">41</span> = NameAndType        #<span class="number">51</span>:#<span class="number">52</span>        <span class="comment">// append:(Ljava/lang/String;)Ljava/lang/StringBuilder;</span></span><br><span class="line">  #<span class="number">42</span> = NameAndType        #<span class="number">53</span>:#<span class="number">54</span>        <span class="comment">// toString:()Ljava/lang/String;</span></span><br><span class="line">  #<span class="number">43</span> = Class              #<span class="number">55</span>            <span class="comment">// java/lang/System</span></span><br><span class="line">  #<span class="number">44</span> = NameAndType        #<span class="number">56</span>:#<span class="number">57</span>        <span class="comment">// out:Ljava/io/PrintStream;</span></span><br><span class="line">  #<span class="number">45</span> = Class              #<span class="number">50</span>            <span class="comment">// java/io/PrintStream</span></span><br><span class="line">  #<span class="number">46</span> = NameAndType        #<span class="number">58</span>:#<span class="number">59</span>        <span class="comment">// println:(Z)V</span></span><br><span class="line">  #<span class="number">47</span> = Utf8               Main</span><br><span class="line">  #<span class="number">48</span> = Utf8               java/lang/Object</span><br><span class="line">  #<span class="number">49</span> = Utf8               java/lang/String</span><br><span class="line">  #<span class="number">50</span> = Utf8               java/io/PrintStream</span><br><span class="line">  #<span class="number">51</span> = Utf8               append</span><br><span class="line">  #<span class="number">52</span> = Utf8               (Ljava/lang/String;)Ljava/lang/StringBuilder;</span><br><span class="line">  #<span class="number">53</span> = Utf8               toString</span><br><span class="line">  #<span class="number">54</span> = Utf8               ()Ljava/lang/String;</span><br><span class="line">  #<span class="number">55</span> = Utf8               java/lang/System</span><br><span class="line">  #<span class="number">56</span> = Utf8               out</span><br><span class="line">  #<span class="number">57</span> = Utf8               Ljava/io/PrintStream;</span><br><span class="line">  #<span class="number">58</span> = Utf8               println</span><br><span class="line">  #<span class="number">59</span> = Utf8               (Z)V</span><br><span class="line">&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Main</span><span class="params">()</span></span>;</span><br><span class="line">    descriptor: ()V</span><br><span class="line">    flags: (<span class="number">0x0001</span>) ACC_PUBLIC</span><br><span class="line">    Code:</span><br><span class="line">      stack=<span class="number">1</span>, locals=<span class="number">1</span>, args_size=<span class="number">1</span></span><br><span class="line">         <span class="number">0</span>: aload_0</span><br><span class="line">         <span class="number">1</span>: invokespecial #<span class="number">1</span>                  <span class="comment">// Method java/lang/Object.&quot;&lt;init&gt;&quot;:()V</span></span><br><span class="line">         <span class="number">4</span>: <span class="keyword">return</span></span><br><span class="line">      LineNumberTable:</span><br><span class="line">        line <span class="number">1</span>: <span class="number">0</span></span><br><span class="line">      LocalVariableTable:</span><br><span class="line">        Start  Length  Slot  Name   Signature</span><br><span class="line">            <span class="number">0</span>       <span class="number">5</span>     <span class="number">0</span>  <span class="keyword">this</span>   LMain;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(java.lang.String[])</span></span>;</span><br><span class="line">    descriptor: ([Ljava/lang/String;)V</span><br><span class="line">    flags: (<span class="number">0x0009</span>) ACC_PUBLIC, ACC_STATIC</span><br><span class="line">    Code:</span><br><span class="line">      stack=<span class="number">3</span>, locals=<span class="number">6</span>, args_size=<span class="number">1</span></span><br><span class="line">         <span class="number">0</span>: ldc           #<span class="number">2</span>                  <span class="comment">// String a</span></span><br><span class="line">         <span class="number">2</span>: astore_1</span><br><span class="line">         <span class="number">3</span>: ldc           #<span class="number">3</span>                  <span class="comment">// String b</span></span><br><span class="line">         <span class="number">5</span>: astore_2</span><br><span class="line">         <span class="number">6</span>: ldc           #<span class="number">4</span>                  <span class="comment">// String ab</span></span><br><span class="line">         <span class="number">8</span>: astore_3</span><br><span class="line">         <span class="number">9</span>: <span class="keyword">new</span>           #<span class="number">5</span>                  <span class="comment">// class java/lang/StringBuilder</span></span><br><span class="line">        <span class="number">12</span>: dup</span><br><span class="line">        <span class="number">13</span>: invokespecial #<span class="number">6</span>                  <span class="comment">// Method java/lang/StringBuilder.&quot;&lt;init&gt;&quot;:()V</span></span><br><span class="line">        <span class="number">16</span>: aload_1</span><br><span class="line">        <span class="number">17</span>: invokevirtual #<span class="number">7</span>                  <span class="comment">// Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;</span></span><br><span class="line">        <span class="number">20</span>: aload_2</span><br><span class="line">        <span class="number">21</span>: invokevirtual #<span class="number">7</span>                  <span class="comment">// Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;</span></span><br><span class="line">        <span class="number">24</span>: invokevirtual #<span class="number">8</span>                  <span class="comment">// Method java/lang/StringBuilder.toString:()Ljava/lang/String;</span></span><br><span class="line">        <span class="number">27</span>: astore        <span class="number">4</span></span><br><span class="line">        <span class="number">29</span>: getstatic     #<span class="number">9</span>                  <span class="comment">// Field java/lang/System.out:Ljava/io/PrintStream;</span></span><br><span class="line">        <span class="number">32</span>: aload         <span class="number">4</span></span><br><span class="line">        <span class="number">34</span>: aload_3</span><br><span class="line">        <span class="number">35</span>: if_acmpne     <span class="number">42</span></span><br><span class="line">        <span class="number">38</span>: iconst_1</span><br><span class="line">        <span class="number">39</span>: goto          <span class="number">43</span></span><br><span class="line">        <span class="number">42</span>: iconst_0</span><br><span class="line">        <span class="number">43</span>: invokevirtual #<span class="number">10</span>                 <span class="comment">// Method java/io/PrintStream.println:(Z)V</span></span><br><span class="line">        <span class="number">46</span>: ldc           #<span class="number">4</span>                  <span class="comment">// String ab</span></span><br><span class="line">        <span class="number">48</span>: astore        <span class="number">5</span></span><br><span class="line">        <span class="number">50</span>: getstatic     #<span class="number">9</span>                  <span class="comment">// Field java/lang/System.out:Ljava/io/PrintStream;</span></span><br><span class="line">        <span class="number">53</span>: aload         <span class="number">5</span></span><br><span class="line">        <span class="number">55</span>: aload_3</span><br><span class="line">        <span class="number">56</span>: if_acmpne     <span class="number">63</span></span><br><span class="line">        <span class="number">59</span>: iconst_1</span><br><span class="line">        <span class="number">60</span>: goto          <span class="number">64</span></span><br><span class="line">        <span class="number">63</span>: iconst_0</span><br><span class="line">        <span class="number">64</span>: invokevirtual #<span class="number">10</span>                 <span class="comment">// Method java/io/PrintStream.println:(Z)V</span></span><br><span class="line">        <span class="number">67</span>: <span class="keyword">return</span></span><br><span class="line">      LineNumberTable:</span><br><span class="line">        line <span class="number">8</span>: <span class="number">0</span></span><br><span class="line">        line <span class="number">9</span>: <span class="number">3</span></span><br><span class="line">        line <span class="number">10</span>: <span class="number">6</span></span><br><span class="line">        line <span class="number">11</span>: <span class="number">9</span></span><br><span class="line">        line <span class="number">12</span>: <span class="number">29</span></span><br><span class="line">        line <span class="number">13</span>: <span class="number">46</span></span><br><span class="line">        line <span class="number">14</span>: <span class="number">50</span></span><br><span class="line">        line <span class="number">15</span>: <span class="number">67</span></span><br><span class="line">      LocalVariableTable:</span><br><span class="line">        Start  Length  Slot  Name   Signature</span><br><span class="line">            <span class="number">0</span>      <span class="number">68</span>     <span class="number">0</span>  args   [Ljava/lang/String;</span><br><span class="line">            <span class="number">3</span>      <span class="number">65</span>     <span class="number">1</span>    s1   Ljava/lang/String;</span><br><span class="line">            <span class="number">6</span>      <span class="number">62</span>     <span class="number">2</span>    s2   Ljava/lang/String;</span><br><span class="line">            <span class="number">9</span>      <span class="number">59</span>     <span class="number">3</span>    s3   Ljava/lang/String;</span><br><span class="line">           <span class="number">29</span>      <span class="number">39</span>     <span class="number">4</span>    s4   Ljava/lang/String;</span><br><span class="line">           <span class="number">50</span>      <span class="number">18</span>     <span class="number">5</span>    s5   Ljava/lang/String;</span><br><span class="line">      StackMapTable: number_of_entries = <span class="number">4</span></span><br><span class="line">        frame_type = <span class="number">255</span> <span class="comment">/* full_frame */</span></span><br><span class="line">          offset_delta = <span class="number">42</span></span><br><span class="line">          locals = [ <span class="class"><span class="keyword">class</span> &quot;[<span class="title">Ljava</span>/<span class="title">lang</span>/<span class="title">String</span></span>;<span class="string">&quot;, class java/lang/String, class java/lang/String, class java/lang/String, class java/lang/String ]</span></span><br><span class="line"><span class="string">          stack = [ class java/io/PrintStream ]</span></span><br><span class="line"><span class="string">        frame_type = 255 /* full_frame */</span></span><br><span class="line"><span class="string">          offset_delta = 0</span></span><br><span class="line"><span class="string">          locals = [ class &quot;</span>[Ljava/lang/String;<span class="string">&quot;, class java/lang/String, class java/lang/String, class java/lang/String, class java/lang/String ]</span></span><br><span class="line"><span class="string">          stack = [ class java/io/PrintStream, int ]</span></span><br><span class="line"><span class="string">        frame_type = 255 /* full_frame */</span></span><br><span class="line"><span class="string">          offset_delta = 19</span></span><br><span class="line"><span class="string">          locals = [ class &quot;</span>[Ljava/lang/String;<span class="string">&quot;, class java/lang/String, class java/lang/String, class java/lang/String, class java/lang/String, class java/lang/String ]</span></span><br><span class="line"><span class="string">          stack = [ class java/io/PrintStream ]</span></span><br><span class="line"><span class="string">        frame_type = 255 /* full_frame */</span></span><br><span class="line"><span class="string">          offset_delta = 0</span></span><br><span class="line"><span class="string">          locals = [ class &quot;</span>[Ljava/lang/String;<span class="string">&quot;, class java/lang/String, class java/lang/String, class java/lang/String, class java/lang/String, class java/lang/String ]</span></span><br><span class="line"><span class="string">          stack = [ class java/io/PrintStream, int ]</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">SourceFile: &quot;</span>Main.java<span class="string">&quot;</span></span><br></pre></td></tr></table></figure><p>javac在编译期的优化：<br>javac在编译期间的优化，结果在编译期确定为ab。</p><h3 id="StringTable特性">StringTable特性</h3><ul><li>常量池中的字符串仅是符号，第一次用到时才变为对象。</li><li>利用串池的机制，来避免重复创建字符串对象。</li><li>字符串拼接的原理是StringBuilder</li><li>字符串常量拼接的原理是编译期优化</li><li>可以使用intern方法，主动将串池中还没有的字符串对象放入串池。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String x = <span class="string">&quot;ab&quot;</span>;</span><br><span class="line">        String s = <span class="keyword">new</span> String(<span class="string">&quot;a&quot;</span>) + <span class="keyword">new</span> String(<span class="string">&quot;b&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 堆 new String(&quot;a&quot;) new String(&quot;b&quot;) new String(&quot;ab&quot;)</span></span><br><span class="line">        String s2 = s.intern(); <span class="comment">// 将这个字符串对象尝试放入串池，如果有则并不会放入，如果没有则放入串池，会把串池中的对象返回</span></span><br><span class="line"></span><br><span class="line">        System.out.println(s2 == x); <span class="comment">// true</span></span><br><span class="line">        System.out.println(s == x); <span class="comment">// false</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>在JDK1.8中，调用intern方法时，会将这个字符串对象尝试放入串池，如果有则并不会放入，如果没有则放入串池，会把串池中的对象返回。</li><li>在JDK1.6中，会将这个字符串对象尝试放入串池，如果有则并不会放入，如果没有则会把此对象复制一份，放入串池，会把串池中的对象返回。</li></ul><p>到此，我们就可以解决上述面试题了：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String s1 = <span class="string">&quot;a&quot;</span>;</span><br><span class="line">        String s2 = <span class="string">&quot;b&quot;</span>;</span><br><span class="line">        String s3 = <span class="string">&quot;a&quot;</span> + <span class="string">&quot;b&quot;</span>; <span class="comment">// ab</span></span><br><span class="line">        String s4 = s1 + s2; <span class="comment">// StringBuilder的拼接 new String(&quot;ab&quot;)&#x27;;</span></span><br><span class="line">        String s5 = <span class="string">&quot;ab&quot;</span>;</span><br><span class="line">        String s6 = s4.intern();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 问</span></span><br><span class="line">        System.out.println(s3 == s4); <span class="comment">// false</span></span><br><span class="line">        System.out.println(s3 == s5); <span class="comment">// true</span></span><br><span class="line">        System.out.println(s3 == s6); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line">        String x2 = <span class="keyword">new</span> String(<span class="string">&quot;c&quot;</span>) + <span class="keyword">new</span> String(<span class="string">&quot;d&quot;</span>);</span><br><span class="line">        String x1 = <span class="string">&quot;cd&quot;</span>;</span><br><span class="line">        x2.intern();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 问，如果调换了【最后两行代码】的位置呢，如果是jdk1.6呢</span></span><br><span class="line">        System.out.println(x1 == x2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="StringTable位置">StringTable位置</h3><p>在JVM1.6时，<strong>StringTable位于常量池</strong>，因为永久代的内存回收效率很低。在JDK1.8之后，<strong>StringTable被放在了堆中</strong>。</p><h3 id="StringTable垃圾回收机制">StringTable垃圾回收机制</h3><p>让我们来看下面这段代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// -Xmx10m -XX:+PrintStringTableStatistics -XX:+PrintGCDetails -verbose:gc</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> <span class="keyword">extends</span> <span class="title">ClassLoader</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            System.out.println(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>-Xmx10m -XX:+PrintStringTableStatistics -XX:+PrintGCDetails -verbose:gc</code>这段代码用于设置了虚拟机参数。其中，<code>-Xmx10m</code>用于设置堆内存大小，<code>PrintStringTableStatistics</code>打印字符串表的统计信息，<code>-XX:+PrintGCDetails -verbose:gc</code>打印垃圾回收的基本信息。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">0</span><br><span class="line">Heap</span><br><span class="line"> PSYoungGen      total 2560K, used 1515K [0x00000000ffd00000, 0x0000000100000000, 0x0000000100000000)</span><br><span class="line">  eden space 2048K, 74% used [0x00000000ffd00000,0x00000000ffe7af28,0x00000000fff00000)</span><br><span class="line">  from space 512K, 0% used [0x00000000fff80000,0x00000000fff80000,0x0000000100000000)</span><br><span class="line">  to   space 512K, 0% used [0x00000000fff00000,0x00000000fff00000,0x00000000fff80000)</span><br><span class="line"> ParOldGen       total 7168K, used 0K [0x00000000ff600000, 0x00000000ffd00000, 0x00000000ffd00000)</span><br><span class="line">  object space 7168K, 0% used [0x00000000ff600000,0x00000000ff600000,0x00000000ffd00000)</span><br><span class="line"> Metaspace       used 2958K, capacity 4496K, committed 4864K, reserved 1056768K</span><br><span class="line">  class space    used 323K, capacity 388K, committed 512K, reserved 1048576K</span><br><span class="line">SymbolTable statistics:</span><br><span class="line">Number of buckets       :     20011 =    160088 bytes, avg   8.000</span><br><span class="line">Number of entries       :     12537 =    300888 bytes, avg  24.000</span><br><span class="line">Number of literals      :     12537 =    543584 bytes, avg  43.358</span><br><span class="line">Total footprint         :           =   1004560 bytes</span><br><span class="line">Average bucket size     :     0.627</span><br><span class="line">Variance of bucket size :     0.625</span><br><span class="line">Std. dev. of bucket size:     0.791</span><br><span class="line">Maximum bucket size     :         6</span><br><span class="line">StringTable statistics:</span><br><span class="line">Number of buckets       :     60013 =    480104 bytes, avg   8.000</span><br><span class="line">Number of entries       :      1711 =     41064 bytes, avg  24.000</span><br><span class="line">Number of literals      :      1711 =    154640 bytes, avg  90.380</span><br><span class="line">Total footprint         :           =    675808 bytes</span><br><span class="line">Average bucket size     :     0.029</span><br><span class="line">Variance of bucket size :     0.029</span><br><span class="line">Std. dev. of bucket size:     0.169</span><br><span class="line">Maximum bucket size     :         2</span><br><span class="line"></span><br><span class="line">Process finished with exit code 0</span><br></pre></td></tr></table></figure><p>其中，我们主要看<code>StringTable statistics</code>，其中，<code>StringTable</code>在底层的实现类似于Hash表，数组的个数称为桶。<br>然后，我们修改上面代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">100</span>; j++) &#123;</span><br><span class="line">                String.valueOf(j).intern();</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            System.out.println(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">Heap</span><br><span class="line"> PSYoungGen      total 2560K, used 1532K [<span class="number">0x00000000ffd00000</span>, <span class="number">0x0000000100000000</span>, <span class="number">0x0000000100000000</span>)</span><br><span class="line">  eden space 2048K, <span class="number">74</span>% used [<span class="number">0x00000000ffd00000</span>,<span class="number">0x00000000ffe7f160</span>,<span class="number">0x00000000fff00000</span>)</span><br><span class="line">  from space 512K, <span class="number">0</span>% used [<span class="number">0x00000000fff80000</span>,<span class="number">0x00000000fff80000</span>,<span class="number">0x0000000100000000</span>)</span><br><span class="line">  to   space 512K, <span class="number">0</span>% used [<span class="number">0x00000000fff00000</span>,<span class="number">0x00000000fff00000</span>,<span class="number">0x00000000fff80000</span>)</span><br><span class="line"> ParOldGen       total 7168K, used 0K [<span class="number">0x00000000ff600000</span>, <span class="number">0x00000000ffd00000</span>, <span class="number">0x00000000ffd00000</span>)</span><br><span class="line">  object space 7168K, <span class="number">0</span>% used [<span class="number">0x00000000ff600000</span>,<span class="number">0x00000000ff600000</span>,<span class="number">0x00000000ffd00000</span>)</span><br><span class="line"> Metaspace       used 2987K, capacity 4496K, committed 4864K, reserved 1056768K</span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">space</span>    <span class="title">used</span> 325<span class="title">K</span>, <span class="title">capacity</span> 388<span class="title">K</span>, <span class="title">committed</span> 512<span class="title">K</span>, <span class="title">reserved</span> 1048576<span class="title">K</span></span></span><br><span class="line"><span class="class"><span class="title">SymbolTable</span> <span class="title">statistics</span>:</span></span><br><span class="line"><span class="class"><span class="title">Number</span> <span class="title">of</span> <span class="title">buckets</span>       :     20011 </span>=    <span class="number">160088</span> bytes, avg   <span class="number">8.000</span></span><br><span class="line">Number of entries       :     <span class="number">12701</span> =    <span class="number">304824</span> bytes, avg  <span class="number">24.000</span></span><br><span class="line">Number of literals      :     <span class="number">12701</span> =    <span class="number">549176</span> bytes, avg  <span class="number">43.239</span></span><br><span class="line">Total footprint         :           =   <span class="number">1014088</span> bytes</span><br><span class="line">Average bucket size     :     <span class="number">0.635</span></span><br><span class="line">Variance of bucket size :     <span class="number">0.635</span></span><br><span class="line">Std. dev. of bucket size:     <span class="number">0.797</span></span><br><span class="line">Maximum bucket size     :         <span class="number">6</span></span><br><span class="line">StringTable statistics:</span><br><span class="line">Number of buckets       :     <span class="number">60013</span> =    <span class="number">480104</span> bytes, avg   <span class="number">8.000</span></span><br><span class="line">Number of entries       :      <span class="number">1811</span> =     <span class="number">43464</span> bytes, avg  <span class="number">24.000</span></span><br><span class="line">Number of literals      :      <span class="number">1811</span> =    <span class="number">159440</span> bytes, avg  <span class="number">88.040</span></span><br><span class="line">Total footprint         :           =    <span class="number">683008</span> bytes</span><br><span class="line">Average bucket size     :     <span class="number">0.030</span></span><br><span class="line">Variance of bucket size :     <span class="number">0.030</span></span><br><span class="line">Std. dev. of bucket size:     <span class="number">0.174</span></span><br><span class="line">Maximum bucket size     :         <span class="number">2</span></span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br></pre></td></tr></table></figure><p>可以看到，Number of entries从之前的<code>1711</code>变为了<code>1811</code>。<br>然后，我们将之前的代码再进行如下改动:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">10000</span>; j++) &#123;</span><br><span class="line">                String.valueOf(j).intern();</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            System.out.println(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行后，执行结果如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">[GC (Allocation Failure) [PSYoungGen: 2048K-&gt;496K(2560K)] 2048K-&gt;804K(9728K), <span class="number">0.0010460</span> secs] [Times: user=<span class="number">0.00</span> sys=<span class="number">0.00</span>, real=<span class="number">0.00</span> secs] </span><br><span class="line"><span class="number">10000</span></span><br><span class="line">Heap</span><br><span class="line"> PSYoungGen      total 2560K, used 601K [<span class="number">0x00000000ffd00000</span>, <span class="number">0x0000000100000000</span>, <span class="number">0x0000000100000000</span>)</span><br><span class="line">  eden space 2048K, <span class="number">5</span>% used [<span class="number">0x00000000ffd00000</span>,<span class="number">0x00000000ffd1a7e8</span>,<span class="number">0x00000000fff00000</span>)</span><br><span class="line">  from space 512K, <span class="number">96</span>% used [<span class="number">0x00000000fff00000</span>,<span class="number">0x00000000fff7c010</span>,<span class="number">0x00000000fff80000</span>)</span><br><span class="line">  to   space 512K, <span class="number">0</span>% used [<span class="number">0x00000000fff80000</span>,<span class="number">0x00000000fff80000</span>,<span class="number">0x0000000100000000</span>)</span><br><span class="line"> ParOldGen       total 7168K, used 308K [<span class="number">0x00000000ff600000</span>, <span class="number">0x00000000ffd00000</span>, <span class="number">0x00000000ffd00000</span>)</span><br><span class="line">  object space 7168K, <span class="number">4</span>% used [<span class="number">0x00000000ff600000</span>,<span class="number">0x00000000ff64d030</span>,<span class="number">0x00000000ffd00000</span>)</span><br><span class="line"> Metaspace       used 3175K, capacity 4496K, committed 4864K, reserved 1056768K</span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">space</span>    <span class="title">used</span> 344<span class="title">K</span>, <span class="title">capacity</span> 388<span class="title">K</span>, <span class="title">committed</span> 512<span class="title">K</span>, <span class="title">reserved</span> 1048576<span class="title">K</span></span></span><br><span class="line"><span class="class"><span class="title">SymbolTable</span> <span class="title">statistics</span>:</span></span><br><span class="line"><span class="class"><span class="title">Number</span> <span class="title">of</span> <span class="title">buckets</span>       :     20011 </span>=    <span class="number">160088</span> bytes, avg   <span class="number">8.000</span></span><br><span class="line">Number of entries       :     <span class="number">13131</span> =    <span class="number">315144</span> bytes, avg  <span class="number">24.000</span></span><br><span class="line">Number of literals      :     <span class="number">13131</span> =    <span class="number">563192</span> bytes, avg  <span class="number">42.890</span></span><br><span class="line">Total footprint         :           =   <span class="number">1038424</span> bytes</span><br><span class="line">Average bucket size     :     <span class="number">0.656</span></span><br><span class="line">Variance of bucket size :     <span class="number">0.657</span></span><br><span class="line">Std. dev. of bucket size:     <span class="number">0.810</span></span><br><span class="line">Maximum bucket size     :         <span class="number">6</span></span><br><span class="line">StringTable statistics:</span><br><span class="line">Number of buckets       :     <span class="number">60013</span> =    <span class="number">480104</span> bytes, avg   <span class="number">8.000</span></span><br><span class="line">Number of entries       :      <span class="number">1924</span> =     <span class="number">46176</span> bytes, avg  <span class="number">24.000</span></span><br><span class="line">Number of literals      :      <span class="number">1924</span> =    <span class="number">165472</span> bytes, avg  <span class="number">86.004</span></span><br><span class="line">Total footprint         :           =    <span class="number">691752</span> bytes</span><br><span class="line">Average bucket size     :     <span class="number">0.032</span></span><br><span class="line">Variance of bucket size :     <span class="number">0.032</span></span><br><span class="line">Std. dev. of bucket size:     <span class="number">0.179</span></span><br><span class="line">Maximum bucket size     :         <span class="number">2</span></span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br></pre></td></tr></table></figure><p>可以发现，这次结果并没有增加一万，这是因为我们分配的堆内存不够，从而引发了GC垃圾回收。从第一行也可以证明该观点：<br><code>[GC (Allocation Failure) [PSYoungGen: 2048K-&gt;496K(2560K)] 2048K-&gt;804K(9728K), 0.0010460 secs] [Times: user=0.00 sys=0.00, real=0.00 secs] </code></p><h3 id="StringTable的性能调优">StringTable的性能调优</h3><p>StringTable性能调优主要包含以下几点：</p><ul><li>调整-XX:StringTableSize=桶个数</li><li>考虑将字符串对象是否入池</li></ul><p>用以下程序测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo1_1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> (BufferedReader bufferedReader = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(<span class="keyword">new</span> FileInputStream(<span class="string">&quot;linux.word&quot;</span>), <span class="string">&quot;utf-8&quot;</span>))) &#123;</span><br><span class="line">            String line = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">long</span> start = System.nanoTime();</span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">                line = bufferedReader.readLine();</span><br><span class="line">                <span class="keyword">if</span> (line != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                line.intern();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;cost:&quot;</span> + (System.nanoTime() - start) / <span class="number">1000000</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的linux.word文件里，总共有40万的字符串，我们在虚拟机设置如下字段：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-Xms500m -Xmx500m -XX: +PrintStringTableStatistics -XX:StringTableSize=200000</span><br></pre></td></tr></table></figure><p>运行程序后发现，程序花费事件为401毫秒。这是因为我们调大了StringTable中桶个数的大小，因此，Hash冲突减小。</p><h2 id="直接内存">直接内存</h2><p>Direct Memory：</p><ul><li>常见于NIO操作时，用于数据缓冲区</li><li>分配回收成本较高，但读写性能高</li><li>不收JVM内存回收管理</li></ul><p>为什么使用ByteBuffer的内存效率高：<br><img src="https://img-blog.csdnimg.cn/7f43d4c02e044b549aea28d5341ba2c0.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/94dbcbfaa11a4b3c8ea4426bcae2392a.png" alt="在这里插入图片描述"></p><h3 id="直接内存溢出">直接内存溢出</h3><p>我们可以运行以下代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo1_2</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> _100M = <span class="number">1024</span> * <span class="number">1024</span> * <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;ByteBuffer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">                ByteBuffer byteBuffer = ByteBuffer.allocateDirect(_100M);</span><br><span class="line">                list.add(byteBuffer);</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            System.out.println(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行上述程序，结果如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">721</span><br><span class="line">Exception in thread &quot;main&quot; java.lang.OutOfMemoryError: Direct buffer memory</span><br><span class="line">at java.nio.Bits.reserveMemory(Bits.java:694)</span><br><span class="line">at java.nio.DirectByteBuffer.&lt;init&gt;(DirectByteBuffer.java:123)</span><br><span class="line">at java.nio.ByteBuffer.allocateDirect(ByteBuffer.java:311)</span><br><span class="line">at com.thylovezq.algorithm.chapter1.Demo1_2.main(Demo1_2.java:16)</span><br></pre></td></tr></table></figure><p>可以看出，直接内存发生了溢出。</p><h3 id="直接内存释放原理">直接内存释放原理</h3><p>执行以下程序：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo1_3</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> _1GB = <span class="number">1024</span> * <span class="number">1024</span> * <span class="number">1024</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        ByteBuffer byteBuffer = ByteBuffer.allocateDirect(_1GB);</span><br><span class="line">        System.out.println(<span class="string">&quot;分配完毕&quot;</span>);</span><br><span class="line">        System.in.read();</span><br><span class="line">        System.out.println(<span class="string">&quot;开始释放&quot;</span>);</span><br><span class="line">        byteBuffer = <span class="keyword">null</span>;</span><br><span class="line">        System.gc();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行后，我们可以通过任务管理器查看：<br><img src="https://img-blog.csdnimg.cn/e7c796eb13c343a788ea4ca96852013e.png" alt="在这里插入图片描述"><br>我们的程序占用了1GB的内存。<br>当我们程序结束后，再查看任务管理器：<br><img src="https://img-blog.csdnimg.cn/1af1ae6ce599404289e4c827aecac5ce.png" alt="在这里插入图片描述"><br>可以发现，我们的1GB内存被回收掉了。</p><p>下面的代码解释了，为什么1GB内存被回收掉了：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo1_4</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">long</span> _1GB = <span class="number">1024</span> * <span class="number">1024</span> * <span class="number">1024</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        Unsafe unsafe = getUnsafe();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 分配内存</span></span><br><span class="line">        <span class="keyword">long</span> base = unsafe.allocateMemory(_1GB);</span><br><span class="line">        unsafe.setMemory(base, _1GB, (<span class="keyword">byte</span>) <span class="number">0</span>);</span><br><span class="line">        System.in.read();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 释放内存</span></span><br><span class="line">        unsafe.freeMemory(base);</span><br><span class="line">        System.in.read();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Unsafe <span class="title">getUnsafe</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Field f = Unsafe.class.getDeclaredField(<span class="string">&quot;theUnsafe&quot;</span>);</span><br><span class="line">            f.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">            Unsafe unsafe = (Unsafe) f.get(<span class="keyword">null</span>);</span><br><span class="line">            <span class="keyword">return</span> unsafe;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchFieldException | IllegalAccessException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实际上，直接内存是由unsafe类释放掉了。</p><p>我们查看ByteBuffer类的allocateDirect方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">DirectByteBuffer(<span class="keyword">int</span> cap) &#123;                   <span class="comment">// package-private</span></span><br><span class="line">    <span class="keyword">super</span>(-<span class="number">1</span>, <span class="number">0</span>, cap, cap);</span><br><span class="line">    <span class="keyword">boolean</span> pa = VM.isDirectMemoryPageAligned();</span><br><span class="line">    <span class="keyword">int</span> ps = Bits.pageSize();</span><br><span class="line">    <span class="keyword">long</span> size = Math.max(<span class="number">1L</span>, (<span class="keyword">long</span>)cap + (pa ? ps : <span class="number">0</span>));</span><br><span class="line">    Bits.reserveMemory(size, cap);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">long</span> base = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        base = unsafe.allocateMemory(size);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (OutOfMemoryError x) &#123;</span><br><span class="line">        Bits.unreserveMemory(size, cap);</span><br><span class="line">        <span class="keyword">throw</span> x;</span><br><span class="line">    &#125;</span><br><span class="line">    unsafe.setMemory(base, size, (<span class="keyword">byte</span>) <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (pa &amp;&amp; (base % ps != <span class="number">0</span>)) &#123;</span><br><span class="line">        <span class="comment">// Round up to page boundary</span></span><br><span class="line">        address = base + ps - (base &amp; (ps - <span class="number">1</span>));</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        address = base;</span><br><span class="line">    &#125;</span><br><span class="line">    cleaner = Cleaner.create(<span class="keyword">this</span>, <span class="keyword">new</span> Deallocator(base, size, cap));</span><br><span class="line">    att = <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后我们进入Deallocator类，可以发现如下方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (address == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// Paranoia</span></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    unsafe.freeMemory(address); <span class="comment">// 回收内存</span></span><br><span class="line">    address = <span class="number">0</span>;</span><br><span class="line">    Bits.unreserveMemory(size, capacity);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Cleaner在Java中是虚引用类型。当它所关联的对象被回收时，Cleaner就会调用clean方法，因此，当ByteBuffer被回收时，就会触发虚引用对象中的clean方法。</p><h3 id="直接内存分配及回收原理">直接内存分配及回收原理</h3><ul><li>使用了Unsafe对象完成直接内存的分配回收，并且回收需要主动调用freeMemory方法。</li><li>ByteBuffer的实现类内部，使用了Cleaner（虚引用）来监测ByteBuffer对象，一旦ByteBuffer对象被垃圾回收，那么就会通过ReferenceHandler线程通过Cleaner的clean方法调用freeMemory来释放直接内存。</li></ul><h2 id="垃圾回收">垃圾回收</h2><ul><li>如何判断对象可以回收</li><li>垃圾回收算法</li><li>分代垃圾回收</li><li>垃圾回收器</li><li>垃圾回收调优</li></ul><ol><li>如何判断对象可以回收</li></ol><h3 id="引用计数法">引用计数法</h3><p>1.1引用计数法<br>只要一个对象被其他对象所引用，那么就让该对象的引用计数加一，如果某一个变量不再引用它了，那么就让它减一，如果有一个对象的引用计数为0，那么就可以判断它是垃圾。</p><pre><code>然而，引用计数器无法解决循环引用的问题。循环引用指的是两个或多个对象之间相互引用形成一个闭环，导致它们的引用计数永远不会变为零。这种情况下，即使这些对象没有被外部引用，它们仍然占用内存空间，无法被垃圾回收机制回收，从而引发内存泄漏。</code></pre><p><img src="https://img-blog.csdnimg.cn/8da2e966e66e49169afc643269de192f.png" alt="在这里插入图片描述"></p><h3 id="可达性分析算法">可达性分析算法</h3><ul><li>Java虚拟机中的垃圾回收器采用可达性分析来探索所有存活的对象。</li><li>扫描堆中的对象，看是否能够沿着<code>GC Root</code>对象为起点的引用链找到该对象，找不到，表示可以回收。</li><li>哪些对象可以作为<code>GC Root</code>?<br>运行如下代码：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo1_5</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        List&lt;Object&gt; list1 = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        list1.add(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">        list1.add(<span class="string">&quot;b&quot;</span>);</span><br><span class="line">        System.out.println(<span class="number">1</span>);</span><br><span class="line">        System.in.read();</span><br><span class="line"></span><br><span class="line">        list1 = <span class="keyword">null</span>;</span><br><span class="line">        System.out.println(<span class="number">2</span>);</span><br><span class="line">        System.in.read();</span><br><span class="line">        System.out.println(<span class="string">&quot;end...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后，执行如下语句抓下内存快照</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jmap -dump:format=b,live,file=1.bin &lt;进程ID&gt;</span><br></pre></td></tr></table></figure><p>下载Eclipse Memory Analyzer，分析1.bin，查看GC Roots可以发现：</p><ul><li>System class：系统类对象，启动类加载器加载类。</li><li>Native Stack：本地方法栈对象</li><li>Thread：活动线程<ul><li>局部变量所引用的对象。</li><li>方法参数所引用的对象</li></ul></li><li>Busy Monitor：同步锁对象</li></ul><h3 id="四种引用">四种引用</h3><ol><li>强引用</li><li>软引用</li><li>弱引用</li><li>虚引用</li><li>终结器引用</li></ol><p><img src="https://img-blog.csdnimg.cn/c34e89c099bf4790a24a23f51a4b5a51.png" alt="在这里插入图片描述">强引用</p><ul><li>只有所有GC Roots对象都不通过【强引用】引用该对象，该对象才能被垃圾回收。<br>软引用</li><li>仅有软引用引用该对象时，在垃圾回收后，内存仍不足时会再次触发垃圾回收，回收软引用对象</li><li>可以配合引用队列来释放软引用自身<br>弱引用</li><li>仅有弱引用引用该对象时，在垃圾回收时，无论内存是否充足，都会回收弱引用对象</li><li>可以配合引用对象来释放弱引用自身<br>虚引用</li><li>必须配合引用队列使用，主要配合ByteBuffer使用，当引用对象回收时，会将虚引用入队，由Reference Handler线程调用虚引用相关方法释放直接内存。<br>终结器引用</li><li>无需手动编码，但其内部配合引用队列使用，在垃圾回收时，终结器引用入队（被引用对象暂时没有用被回收），再由Finalizer线程通过终结器引用找到被引用对象并调用它的finalize方法，第二次GC时才能回收被引用对象。</li></ul><p>软引用示例：<br>我们编写如下所示代码，并设置堆内存大小如下<code>-Xmx20m</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo2_2</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> _4MB = <span class="number">4</span> * <span class="number">1024</span> * <span class="number">1024</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;<span class="keyword">byte</span>[]&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            list.add(<span class="keyword">new</span> <span class="keyword">byte</span>[_4MB]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行上述代码，可以发现，堆内存发生了溢出：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Exception in thread &quot;main&quot; java.lang.OutOfMemoryError: Java heap space</span><br><span class="line">at com.thylovezq.algorithm.chapter2.Demo2_2.main(Demo2_2.java:14)</span><br></pre></td></tr></table></figure><p>我们可以利用软引用来避免发生堆内存溢出错误。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo2_2</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> _4MB = <span class="number">4</span> * <span class="number">1024</span> * <span class="number">1024</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        soft();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">soft</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;SoftReference&lt;<span class="keyword">byte</span>[]&gt;&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            SoftReference&lt;<span class="keyword">byte</span>[]&gt; ref = <span class="keyword">new</span> SoftReference&lt;&gt;(<span class="keyword">new</span> <span class="keyword">byte</span>[_4MB]);</span><br><span class="line">            System.out.println(ref.get());</span><br><span class="line">            list.add(ref);</span><br><span class="line">            System.out.println(list.size());</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;循环结束: &quot;</span> + list.size());</span><br><span class="line">        <span class="keyword">for</span> (SoftReference&lt;<span class="keyword">byte</span>[]&gt; ref : list) &#123;</span><br><span class="line">            System.out.println(ref.get());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同时设置以下虚拟机参数<code>-Xmx20m -XX:+PrintGCDetails -verbose:gc</code>：<br>运行后，我们可以观察到：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">[B@1b6d3586</span><br><span class="line"><span class="number">1</span></span><br><span class="line">[B@4554617c</span><br><span class="line"><span class="number">2</span></span><br><span class="line">[GC (Allocation Failure) [PSYoungGen: 5632K-&gt;496K(6144K)] 13824K-&gt;13060K(19968K), <span class="number">0.0023525</span> secs] [Times: user=<span class="number">0.00</span> sys=<span class="number">0.00</span>, real=<span class="number">0.00</span> secs] </span><br><span class="line">[<span class="function">Full <span class="title">GC</span> <span class="params">(Ergonomics)</span> [PSYoungGen: 496K-&gt;0<span class="title">K</span><span class="params">(6144K)</span>] [ParOldGen: 12564K-&gt;12882<span class="title">K</span><span class="params">(13824K)</span>] 13060K-&gt;12882<span class="title">K</span><span class="params">(19968K)</span>, [Metaspace: 3063K-&gt;3063<span class="title">K</span><span class="params">(1056768K)</span>], 0.0065332 secs] [Times: user</span>=<span class="number">0.00</span> sys=<span class="number">0.00</span>, real=<span class="number">0.01</span> secs] </span><br><span class="line">[B@74a14482</span><br><span class="line"><span class="number">3</span></span><br><span class="line">[B@<span class="number">1540e19d</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line">[<span class="function">Full <span class="title">GC</span> <span class="params">(Ergonomics)</span> [PSYoungGen: 4266K-&gt;4097<span class="title">K</span><span class="params">(6144K)</span>] [ParOldGen: 12882K-&gt;12878<span class="title">K</span><span class="params">(13824K)</span>] 17149K-&gt;16976<span class="title">K</span><span class="params">(19968K)</span>, [Metaspace: 3068K-&gt;3068<span class="title">K</span><span class="params">(1056768K)</span>], 0.0061467 secs] [Times: user</span>=<span class="number">0.00</span> sys=<span class="number">0.00</span>, real=<span class="number">0.01</span> secs] </span><br><span class="line">[<span class="function">Full <span class="title">GC</span> <span class="params">(Allocation Failure)</span> [PSYoungGen: 4097K-&gt;0<span class="title">K</span><span class="params">(6144K)</span>] [ParOldGen: 12878K-&gt;575<span class="title">K</span><span class="params">(11264K)</span>] 16976K-&gt;575<span class="title">K</span><span class="params">(17408K)</span>, [Metaspace: 3068K-&gt;3068<span class="title">K</span><span class="params">(1056768K)</span>], 0.0057056 secs] [Times: user</span>=<span class="number">0.00</span> sys=<span class="number">0.00</span>, real=<span class="number">0.00</span> secs] </span><br><span class="line">[B@677327b6</span><br><span class="line"><span class="number">5</span></span><br><span class="line">循环结束: <span class="number">5</span></span><br><span class="line"><span class="keyword">null</span></span><br><span class="line"><span class="keyword">null</span></span><br><span class="line"><span class="keyword">null</span></span><br><span class="line"><span class="keyword">null</span></span><br><span class="line">[B@677327b6</span><br><span class="line">Heap</span><br><span class="line"> PSYoungGen      total 6144K, used 4414K [<span class="number">0x00000000ff980000</span>, <span class="number">0x0000000100000000</span>, <span class="number">0x0000000100000000</span>)</span><br><span class="line">  eden space 5632K, <span class="number">78</span>% used [<span class="number">0x00000000ff980000</span>,<span class="number">0x00000000ffdcf830</span>,<span class="number">0x00000000fff00000</span>)</span><br><span class="line">  from space 512K, <span class="number">0</span>% used [<span class="number">0x00000000fff00000</span>,<span class="number">0x00000000fff00000</span>,<span class="number">0x00000000fff80000</span>)</span><br><span class="line">  to   space 512K, <span class="number">0</span>% used [<span class="number">0x00000000fff80000</span>,<span class="number">0x00000000fff80000</span>,<span class="number">0x0000000100000000</span>)</span><br><span class="line"> ParOldGen       total 11264K, used 575K [<span class="number">0x00000000fec00000</span>, <span class="number">0x00000000ff700000</span>, <span class="number">0x00000000ff980000</span>)</span><br><span class="line">  object space 11264K, <span class="number">5</span>% used [<span class="number">0x00000000fec00000</span>,<span class="number">0x00000000fec8fd00</span>,<span class="number">0x00000000ff700000</span>)</span><br><span class="line"> Metaspace       used 3111K, capacity 4500K, committed 4864K, reserved 1056768K</span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">space</span>    <span class="title">used</span> 337<span class="title">K</span>, <span class="title">capacity</span> 388<span class="title">K</span>, <span class="title">committed</span> 512<span class="title">K</span>, <span class="title">reserved</span> 1048576<span class="title">K</span></span></span><br><span class="line"><span class="class"></span></span><br></pre></td></tr></table></figure><p>可以发现，当内存不足时，垃圾回收器回收了虚引用引用的内存。</p><h3 id="软引用队列">软引用队列</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo2_3</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> _4MB = <span class="number">4</span> * <span class="number">1024</span> * <span class="number">1024</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        soft();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">soft</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;SoftReference&lt;<span class="keyword">byte</span>[]&gt;&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 引用队列</span></span><br><span class="line">        ReferenceQueue&lt;<span class="keyword">byte</span>[]&gt; queue = <span class="keyword">new</span> ReferenceQueue&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            <span class="comment">// 关联了软引用队列，当软引用所关联的byte数组被回收时，软引用对象自己就会加入到queue中去。</span></span><br><span class="line">            SoftReference&lt;<span class="keyword">byte</span>[]&gt; ref = <span class="keyword">new</span> SoftReference&lt;&gt;(<span class="keyword">new</span> <span class="keyword">byte</span>[_4MB], queue);</span><br><span class="line">            System.out.println(ref.get());</span><br><span class="line">            list.add(ref);</span><br><span class="line">            System.out.println(list.size());</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;循环结束: &quot;</span> + list.size());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 从队列中获取无用的软引用对象，并删除</span></span><br><span class="line">        Reference&lt;? extends <span class="keyword">byte</span>[]&gt; poll = queue.poll();</span><br><span class="line">        <span class="keyword">while</span> (poll != <span class="keyword">null</span>) &#123;</span><br><span class="line">            list.remove(poll);</span><br><span class="line">            poll = queue.poll();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (SoftReference&lt;<span class="keyword">byte</span>[]&gt; ref : list) &#123;</span><br><span class="line">            System.out.println(ref.get());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="弱引用实例代码">弱引用实例代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo2_4</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> _4MB = <span class="number">4</span> * <span class="number">1024</span> * <span class="number">1024</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        soft();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">soft</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// list引用WeakReference，WeakReference引用byte数组</span></span><br><span class="line">        List&lt;WeakReference&lt;<span class="keyword">byte</span>[]&gt;&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            WeakReference&lt;<span class="keyword">byte</span>[]&gt; ref = <span class="keyword">new</span> WeakReference&lt;&gt;(<span class="keyword">new</span> <span class="keyword">byte</span>[_4MB]);</span><br><span class="line">            list.add(ref);</span><br><span class="line">            <span class="keyword">for</span> (WeakReference&lt;<span class="keyword">byte</span>[]&gt; w : list) &#123;</span><br><span class="line">                System.out.print(w.get() + <span class="string">&quot; &quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;循环结束: &quot;</span> + list.size());</span><br><span class="line">        <span class="keyword">for</span> (WeakReference&lt;<span class="keyword">byte</span>[]&gt; ref : list) &#123;</span><br><span class="line">            System.out.println(ref.get());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="垃圾回收算法">垃圾回收算法</h3><p>标记清除算法：</p><ul><li>速度较快</li><li>会造成内存碎片</li></ul><p><img src="https://img-blog.csdnimg.cn/228d996cc7c145df9b242e9051c62f64.png" alt="在这里插入图片描述"><br>标记整理算法：</p><ul><li>速度慢</li><li>没有内存碎片<br><img src="https://img-blog.csdnimg.cn/b34f9828f7624635b63940de2d735ec7.png" alt="在这里插入图片描述"><br>复制算法<br>定义：copy</li><li>不会有内存碎片</li><li>需要占用双倍内存空间<br><img src="https://img-blog.csdnimg.cn/c210fe2bc2814157bca998f471b2b7e5.png" alt="在这里插入图片描述"><br>Java虚拟机<br><img src="https://img-blog.csdnimg.cn/6a15946cc5d34ed0b5b9d8434200e771.png" alt="在这里插入图片描述"></li></ul><h3 id="分代回收">分代回收</h3><ul><li>对象首先分配在伊甸园区。</li><li>新生代空间不足时，触发minor gc，伊甸园和from存回的对象使用复制算法复制到to中。让存活的对象年龄加一，交换from和to。</li><li>minor gc会引发stop the world，暂停其他用户的线程，垃圾回收结束，用户线程才恢复运行。</li><li>当对象寿命超过阈值时，会晋升至老年代。最大寿命是15（4bit）。</li><li>当老年代空间不足，会先尝试触发minor gc，如果之后空间仍不足，那么触发一次full gc。STW的时间更长。</li></ul><h3 id="相关JVM参数">相关JVM参数</h3><table><thead><tr><th>含义</th><th>参数</th></tr></thead><tbody><tr><td>堆初始大小</td><td>-Xms</td></tr><tr><td>堆最大大小</td><td>-Xmx 或 -XX:MaxHeapSize=size</td></tr><tr><td>新生代大小</td><td>-Xmn 或 （-XX:NewSize=size + -XX:MaxNewSize=size）</td></tr><tr><td>幸存区比例（动态）</td><td>-XX:InitialSurvivorRatio=ratio和-XX:+UseAdaptiveSizePolicy</td></tr><tr><td>幸存区比例</td><td>-XX:SurvivorRatio=ratio</td></tr><tr><td>晋升阈值</td><td>-XX:MaxTenuringThreshold=threshold</td></tr><tr><td>晋升详情</td><td>-XX:PrintTenuringDistribution</td></tr><tr><td>GC详情</td><td>-XX:+PrintGCDetails -verbose:gc</td></tr><tr><td>FullGC前MinorGC</td><td>-XX:+ScavengeBeforeFullGC</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo2_5</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> _512K = <span class="number">512</span> * <span class="number">1024</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> _1MB = <span class="number">1024</span> * <span class="number">1024</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> _6MB = <span class="number">6</span> * <span class="number">1024</span> * <span class="number">1024</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> _7MB = <span class="number">7</span> * <span class="number">1024</span> * <span class="number">1024</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> _8MB = <span class="number">8</span> * <span class="number">1024</span> * <span class="number">1024</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//  -Xms:10M -Xmx:10M -Xmn:10M -XX:+UseSerialGC -XX:+PrintGCDetails -verbose:gc</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行程序后得到：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Heap</span><br><span class="line"> def new generation   total 9216K, used 1822K [0x00000000fec00000, 0x00000000ff600000, 0x00000000ff600000)</span><br><span class="line">  eden space 8192K,  22% used [0x00000000fec00000, 0x00000000fedc7a38, 0x00000000ff400000)</span><br><span class="line">  from space 1024K,   0% used [0x00000000ff400000, 0x00000000ff400000, 0x00000000ff500000)</span><br><span class="line">  to   space 1024K,   0% used [0x00000000ff500000, 0x00000000ff500000, 0x00000000ff600000)</span><br><span class="line"> tenured generation   total 10240K, used 0K [0x00000000ff600000, 0x0000000100000000, 0x0000000100000000)</span><br><span class="line">   the space 10240K,   0% used [0x00000000ff600000, 0x00000000ff600000, 0x00000000ff600200, 0x0000000100000000)</span><br><span class="line"> Metaspace       used 3010K, capacity 4496K, committed 4864K, reserved 1056768K</span><br><span class="line">  class space    used 325K, capacity 388K, committed 512K, reserved 1048576K</span><br></pre></td></tr></table></figure><p>我们运行下面这段代码，探讨新生代和老年代的回收：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo2_5</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> _512K = <span class="number">512</span> * <span class="number">1024</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> _1MB = <span class="number">1024</span> * <span class="number">1024</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> _2MB = <span class="number">2</span> * <span class="number">1024</span> * <span class="number">1024</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> _6MB = <span class="number">6</span> * <span class="number">1024</span> * <span class="number">1024</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> _7MB = <span class="number">7</span> * <span class="number">1024</span> * <span class="number">1024</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> _8MB = <span class="number">8</span> * <span class="number">1024</span> * <span class="number">1024</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//  -Xms:10M -Xmx:10M -Xmn:10M -XX:+UseSerialGC -XX:+PrintGCDetails -verbose:gc</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ArrayList&lt;<span class="keyword">byte</span>[]&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        list.add(<span class="keyword">new</span> <span class="keyword">byte</span>[_7MB]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[GC (Allocation Failure) [DefNew: 1658K-&gt;608K(9216K), 0.0007083 secs] 1658K-&gt;608K(19456K), 0.0007422 secs] [Times: user=0.00 sys=0.00, real=0.00 secs] </span><br><span class="line">Heap</span><br><span class="line"> def new generation   total 9216K, used 8186K [0x00000000fec00000, 0x00000000ff600000, 0x00000000ff600000)</span><br><span class="line">  eden space 8192K,  92% used [0x00000000fec00000, 0x00000000ff366830, 0x00000000ff400000)</span><br><span class="line">  from space 1024K,  59% used [0x00000000ff500000, 0x00000000ff5981a0, 0x00000000ff600000)</span><br><span class="line">  to   space 1024K,   0% used [0x00000000ff400000, 0x00000000ff400000, 0x00000000ff500000)</span><br><span class="line"> tenured generation   total 10240K, used 0K [0x00000000ff600000, 0x0000000100000000, 0x0000000100000000)</span><br><span class="line">   the space 10240K,   0% used [0x00000000ff600000, 0x00000000ff600000, 0x00000000ff600200, 0x0000000100000000)</span><br><span class="line"> Metaspace       used 3124K, capacity 4496K, committed 4864K, reserved 1056768K</span><br><span class="line">  class space    used 341K, capacity 388K, committed 512K, reserved 1048576K</span><br><span class="line">Process finished with exit code 0</span><br></pre></td></tr></table></figure><p>当我们再添加512K的对象时</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo2_5</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> _512K = <span class="number">512</span> * <span class="number">1024</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> _1MB = <span class="number">1024</span> * <span class="number">1024</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> _2MB = <span class="number">2</span> * <span class="number">1024</span> * <span class="number">1024</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> _6MB = <span class="number">6</span> * <span class="number">1024</span> * <span class="number">1024</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> _7MB = <span class="number">7</span> * <span class="number">1024</span> * <span class="number">1024</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> _8MB = <span class="number">8</span> * <span class="number">1024</span> * <span class="number">1024</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//  -Xms:10M -Xmx:10M -Xmn:10M -XX:+UseSerialGC -XX:+PrintGCDetails -verbose:gc</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ArrayList&lt;<span class="keyword">byte</span>[]&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        list.add(<span class="keyword">new</span> <span class="keyword">byte</span>[_7MB]);</span><br><span class="line">        list.add(<span class="keyword">new</span> <span class="keyword">byte</span>[_512K]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[GC (Allocation Failure) [DefNew: 1658K-&gt;587K(9216K), 0.0006189 secs] 1658K-&gt;587K(19456K), 0.0006535 secs] [Times: user=0.00 sys=0.00, real=0.00 secs] </span><br><span class="line">Heap</span><br><span class="line"> def new generation   total 9216K, used 8677K [0x00000000fec00000, 0x00000000ff600000, 0x00000000ff600000)</span><br><span class="line">  eden space 8192K,  98% used [0x00000000fec00000, 0x00000000ff3e6840, 0x00000000ff400000)</span><br><span class="line">  from space 1024K,  57% used [0x00000000ff500000, 0x00000000ff592c20, 0x00000000ff600000)</span><br><span class="line">  to   space 1024K,   0% used [0x00000000ff400000, 0x00000000ff400000, 0x00000000ff500000)</span><br><span class="line"> tenured generation   total 10240K, used 0K [0x00000000ff600000, 0x0000000100000000, 0x0000000100000000)</span><br><span class="line">   the space 10240K,   0% used [0x00000000ff600000, 0x00000000ff600000, 0x00000000ff600200, 0x0000000100000000)</span><br><span class="line"> Metaspace       used 3057K, capacity 4496K, committed 4864K, reserved 1056768K</span><br><span class="line">  class space    used 332K, capacity 388K, committed 512K, reserved 1048576K</span><br><span class="line"></span><br><span class="line">Process finished with exit code 0</span><br></pre></td></tr></table></figure><p>运行如下所示代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo2_5</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> _512K = <span class="number">512</span> * <span class="number">1024</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> _1MB = <span class="number">1024</span> * <span class="number">1024</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> _2MB = <span class="number">2</span> * <span class="number">1024</span> * <span class="number">1024</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> _6MB = <span class="number">6</span> * <span class="number">1024</span> * <span class="number">1024</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> _7MB = <span class="number">7</span> * <span class="number">1024</span> * <span class="number">1024</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> _8MB = <span class="number">8</span> * <span class="number">1024</span> * <span class="number">1024</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//  -Xms:10M -Xmx:10M -Xmn:10M -XX:+UseSerialGC -XX:+PrintGCDetails -verbose:gc</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ArrayList&lt;<span class="keyword">byte</span>[]&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        list.add(<span class="keyword">new</span> <span class="keyword">byte</span>[_7MB]);</span><br><span class="line">        list.add(<span class="keyword">new</span> <span class="keyword">byte</span>[_512K]);</span><br><span class="line">        list.add(<span class="keyword">new</span> <span class="keyword">byte</span>[_512K]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[GC (Allocation Failure) [DefNew: 1658K-&gt;591K(9216K), 0.0005740 secs] 1658K-&gt;591K(19456K), 0.0006072 secs] [Times: user=0.00 sys=0.00, real=0.00 secs] </span><br><span class="line">[GC (Allocation Failure) [DefNew: 8599K-&gt;518K(9216K), 0.0022962 secs] 8599K-&gt;8274K(19456K), 0.0023179 secs] [Times: user=0.00 sys=0.00, real=0.00 secs] </span><br><span class="line">Heap</span><br><span class="line"> def new generation   total 9216K, used 1195K [0x00000000fec00000, 0x00000000ff600000, 0x00000000ff600000)</span><br><span class="line">  eden space 8192K,   8% used [0x00000000fec00000, 0x00000000feca9488, 0x00000000ff400000)</span><br><span class="line">  from space 1024K,  50% used [0x00000000ff400000, 0x00000000ff481988, 0x00000000ff500000)</span><br><span class="line">  to   space 1024K,   0% used [0x00000000ff500000, 0x00000000ff500000, 0x00000000ff600000)</span><br><span class="line"> tenured generation   total 10240K, used 7756K [0x00000000ff600000, 0x0000000100000000, 0x0000000100000000)</span><br><span class="line">   the space 10240K,  75% used [0x00000000ff600000, 0x00000000ffd931e0, 0x00000000ffd93200, 0x0000000100000000)</span><br><span class="line"> Metaspace       used 3131K, capacity 4496K, committed 4864K, reserved 1056768K</span><br><span class="line">  class space    used 343K, capacity 388K, committed 512K, reserved 1048576K</span><br></pre></td></tr></table></figure><p>当新生代空间不够，老年代空间充足时，分配的对象会直接晋升至老年代：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo2_5</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> _512K = <span class="number">512</span> * <span class="number">1024</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> _1MB = <span class="number">1024</span> * <span class="number">1024</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> _2MB = <span class="number">2</span> * <span class="number">1024</span> * <span class="number">1024</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> _6MB = <span class="number">6</span> * <span class="number">1024</span> * <span class="number">1024</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> _7MB = <span class="number">7</span> * <span class="number">1024</span> * <span class="number">1024</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> _8MB = <span class="number">8</span> * <span class="number">1024</span> * <span class="number">1024</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//  -Xms:10M -Xmx:10M -Xmn:10M -XX:+UseSerialGC -XX:+PrintGCDetails -verbose:gc</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ArrayList&lt;<span class="keyword">byte</span>[]&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        list.add(<span class="keyword">new</span> <span class="keyword">byte</span>[_8MB]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Heap</span><br><span class="line"> def new generation   total 9216K, used 1990K [0x00000000fec00000, 0x00000000ff600000, 0x00000000ff600000)</span><br><span class="line">  eden space 8192K,  24% used [0x00000000fec00000, 0x00000000fedf1860, 0x00000000ff400000)</span><br><span class="line">  from space 1024K,   0% used [0x00000000ff400000, 0x00000000ff400000, 0x00000000ff500000)</span><br><span class="line">  to   space 1024K,   0% used [0x00000000ff500000, 0x00000000ff500000, 0x00000000ff600000)</span><br><span class="line"> tenured generation   total 10240K, used 8192K [0x00000000ff600000, 0x0000000100000000, 0x0000000100000000)</span><br><span class="line">   the space 10240K,  80% used [0x00000000ff600000, 0x00000000ffe00010, 0x00000000ffe00200, 0x0000000100000000)</span><br><span class="line"> Metaspace       used 3130K, capacity 4496K, committed 4864K, reserved 1056768K</span><br><span class="line">  class space    used 343K, capacity 388K, committed 512K, reserved 1048576K</span><br><span class="line"></span><br><span class="line">Process finished with exit code 0</span><br></pre></td></tr></table></figure><p>那么，如果再添加8MB的对象那。显然会发生堆内存溢出。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo2_5</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> _512K = <span class="number">512</span> * <span class="number">1024</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> _1MB = <span class="number">1024</span> * <span class="number">1024</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> _2MB = <span class="number">2</span> * <span class="number">1024</span> * <span class="number">1024</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> _6MB = <span class="number">6</span> * <span class="number">1024</span> * <span class="number">1024</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> _7MB = <span class="number">7</span> * <span class="number">1024</span> * <span class="number">1024</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> _8MB = <span class="number">8</span> * <span class="number">1024</span> * <span class="number">1024</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//  -Xms:10M -Xmx:10M -Xmn:10M -XX:+UseSerialGC -XX:+PrintGCDetails -verbose:gc</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ArrayList&lt;<span class="keyword">byte</span>[]&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        list.add(<span class="keyword">new</span> <span class="keyword">byte</span>[_8MB]);</span><br><span class="line">        list.add(<span class="keyword">new</span> <span class="keyword">byte</span>[_8MB]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Exception in thread &quot;main&quot; java.lang.OutOfMemoryError: Java heap space</span><br><span class="line">at com.thylovezq.algorithm.chapter2.Demo2_5.main(Demo2_5.java:22)</span><br></pre></td></tr></table></figure><p>那么，我们在一个线程中创建两个8MB的对象：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo2_5</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> _512K = <span class="number">512</span> * <span class="number">1024</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> _1MB = <span class="number">1024</span> * <span class="number">1024</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> _2MB = <span class="number">2</span> * <span class="number">1024</span> * <span class="number">1024</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> _6MB = <span class="number">6</span> * <span class="number">1024</span> * <span class="number">1024</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> _7MB = <span class="number">7</span> * <span class="number">1024</span> * <span class="number">1024</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> _8MB = <span class="number">8</span> * <span class="number">1024</span> * <span class="number">1024</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//  -Xms:10M -Xmx:10M -Xmn:10M -XX:+UseSerialGC -XX:+PrintGCDetails -verbose:gc</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            ArrayList&lt;<span class="keyword">byte</span>[]&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">            list.add(<span class="keyword">new</span> <span class="keyword">byte</span>[_8MB]);</span><br><span class="line">            list.add(<span class="keyword">new</span> <span class="keyword">byte</span>[_8MB]);</span><br><span class="line">        &#125;).start();</span><br><span class="line">        System.out.println(<span class="string">&quot;sleep 5s&quot;</span>);</span><br><span class="line">        Thread.sleep(<span class="number">5000L</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行后发现，线程中的异常并不会导致主线程的运行</p><h2 id="垃圾回收器">垃圾回收器</h2><p>1.串行</p><ul><li>单线程垃圾回收器</li><li>堆内存较小，适合个人电脑</li></ul><p>2.吞吐量优先</p><ul><li>多线程</li><li>堆内存较大，多核CPU</li><li>让单位时间内，STW的时间最短 0.2 0.2 = 0.4</li></ul><p>3.响应时间优先</p><ul><li>多线程</li><li>堆内存较大，多核CPU</li><li>尽可能让单次的STW的时间最短 0.1 0.1 0.1 0.1 0.1 = 0.5</li></ul><h3 id="串行垃圾回收器">串行垃圾回收器</h3><p>-XX:+UseSerialGC = Serial + SerialOld<br><img src="https://img-blog.csdnimg.cn/9898c048485c4ba092215342dfb8c185.png" alt="在这里插入图片描述"><br>Serial：工作在新生代，采用的算法是复制算法<br>SerialOld：工作在老年代，采用的是标记整理算法</p><h3 id="吞吐量优先">吞吐量优先</h3><p>-XX:+UseParallelGC ~ -XX:+UseParallelOldGC<br>-XX:+UseAdaptiveSizePolicy<br>-XX:GCTimeRatio=ratio<br>-XX:MaxGCPauseMillis=ms<br>-XX:ParallelGCThreads=n<br><img src="https://img-blog.csdnimg.cn/1a86c262d8914b2ab8ff278bd1dbd778.png" alt="在这里插入图片描述"></p><p>UseParallelGC：新生代垃圾回收器，复制算法<br>UseParallelOldGC：老年代，标记整理算法<br>ParallelGCThreads：线程数设置<br>UseAdaptiveSizePolicy：采用自适应的大小调整策略，调整新生代大小<br>-XX:GCTimeRatio=ratio：调整吞吐量目标<br>1/(1+ratio)：默认为99，1/100为0.01，即100分钟内只有一分钟可以用于垃圾回收，否则会调整堆的大小。一般设置为19。<br>-XX:MaxGCPauseMillis=ms<br>默认值200ms：最大GC暂停毫秒数</p><h3 id="响应时间优先">响应时间优先</h3><p>-XX:+UseConcMarkSweepGC ~ -XX:+UseParNewGC ~ SerialOld</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h1&gt;JVM&lt;/h1&gt;
&lt;h2 id=&quot;什么是JVM&quot;&gt;什么是JVM&lt;/h2&gt;
&lt;p&gt;定义：&lt;br&gt;
Java Virtual Machine -java 程序的运行环境（java二进制字节码的运行环境）&lt;br&gt;
好处：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;JV</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>设计模式</title>
    <link href="http://example.com/2023/09/16/%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    <id>http://example.com/2023/09/16/%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</id>
    <published>2023-09-16T07:18:56.000Z</published>
    <updated>2023-11-15T14:25:13.276Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1>设计模式</h1><h2 id="工厂模式">工厂模式</h2><p>工厂模式也被称为简单工厂，是创建型模式的一种，这种模式提供了按需创建对象的最佳方式，这种设计模式不会对外暴露创建细节，并且会提供一个统一的接口创建对象，例如，机械厂可以生产织布机和缝纫机。<br>这种设计模式也是Java开发中常见的一种模式，它的主要意图是提供一个创建对象的接口，让其子类自己决定将哪一个工厂类实例化，工厂模式使创建过程延迟到子类中进行。<br>简单的来说，就是为了给代码结构提供扩展性，屏蔽每一个功能类中的具体实现逻辑。这种方式便于外部简单调用，也是去掉众多if-else的最佳手段。但这种方法也存在缺点，例如实现类较多，难以维护。</p><h3 id="制作Pizza">制作Pizza</h3><p>看一个Pizza项目，要便于披萨种类的拓展，要便于维护。</p><ol><li>披萨的种类很多（比如GreekPizz，CheesePizz等）</li><li>披萨的制作有prepare，bake，cut，box</li><li>完成披萨的订购功能</li></ol><p>我们先来看一个不符合设计模式的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Pizza</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 准备原材料,不同的披萨不一样，因此我们把他做成抽象pizza</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">prepare</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">bake</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(name + <span class="string">&quot;:baking;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">cut</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(name + <span class="string">&quot;:cutting;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 打包</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">box</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(name + <span class="string">&quot;:boxing;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GreekPizza</span> <span class="keyword">extends</span> <span class="title">Pizza</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">prepare</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;给制造希腊Pizza准备原材料&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CheesePizza</span> <span class="keyword">extends</span> <span class="title">Pizza</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">prepare</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;给制造奶酪Pizza准备原材料&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderPizza</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 构造器</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">OrderPizza</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Pizza pizza = <span class="keyword">null</span>;</span><br><span class="line">        String orderType; <span class="comment">// 订购Pizza的类型</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            orderType = getPizzaType();</span><br><span class="line">            <span class="keyword">if</span> (orderType.equals(<span class="string">&quot;greek&quot;</span>)) &#123;</span><br><span class="line">                pizza = <span class="keyword">new</span> GreekPizza();</span><br><span class="line">                pizza.setName(<span class="string">&quot;希腊pizza&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (orderType.equals(<span class="string">&quot;cheese&quot;</span>)) &#123;</span><br><span class="line">                pizza = <span class="keyword">new</span> CheesePizza();</span><br><span class="line">                pizza.setName(<span class="string">&quot;奶酪Pizza&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">while</span> (<span class="keyword">true</span>);</span><br><span class="line">        <span class="comment">// 输出pizza制作过程</span></span><br><span class="line">        pizza.prepare();</span><br><span class="line">        pizza.bake();</span><br><span class="line">        pizza.cut();</span><br><span class="line">        pizza.box();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">getPizzaType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        String type = sc.next();</span><br><span class="line">        <span class="keyword">return</span> type;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PizzaStore</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        OrderPizza orderPizza = <span class="keyword">new</span> OrderPizza();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行代码后，可以发现完成了实现的功能</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cheese</span><br><span class="line">给制造奶酪Pizza准备原材料</span><br><span class="line">奶酪Pizza:baking;</span><br><span class="line">奶酪Pizza:cutting;</span><br><span class="line">奶酪Pizza:boxing;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/cb684134feb94fc9b9aa71cfa5321567.png" alt="在这里插入图片描述"><br>那么，上述代码好吗？<br>答案是否定的，虽然比较好理解， 但是也存在以下问题：</p><ul><li>缺点是违反了设计模式的OOP原则，即对扩展开放，对修改关闭，即当我们给类增加新功能的时候，尽量不修改代码，或者尽量少修改代码。</li></ul><p>假设我们新增一个Pepper Pizza：<br>首先，我们需要新增一个Pepper Pizza类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PepperPizza</span> <span class="keyword">extends</span> <span class="title">Pizza</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">prepare</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;给制造pepper pizza准备原材料&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后在OrderPizza类中添加：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">OrderPizza</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Pizza pizza = <span class="keyword">null</span>;</span><br><span class="line">        String orderType; <span class="comment">// 订购Pizza的类型</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            orderType = getPizzaType();</span><br><span class="line">            <span class="keyword">if</span> (orderType.equals(<span class="string">&quot;greek&quot;</span>)) &#123;</span><br><span class="line">                pizza = <span class="keyword">new</span> GreekPizza();</span><br><span class="line">                pizza.setName(<span class="string">&quot;希腊pizza&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (orderType.equals(<span class="string">&quot;cheese&quot;</span>)) &#123;</span><br><span class="line">                pizza = <span class="keyword">new</span> CheesePizza();</span><br><span class="line">                pizza.setName(<span class="string">&quot;奶酪Pizza&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (orderType.equals(<span class="string">&quot;pepper&quot;</span>)) &#123;</span><br><span class="line">                pizza = <span class="keyword">new</span> PepperPizza();</span><br><span class="line">                pizza.setName(<span class="string">&quot;pepper Pizza&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">while</span> (<span class="keyword">true</span>);</span><br><span class="line">        <span class="comment">// 输出pizza制作过程</span></span><br><span class="line">        pizza.prepare();</span><br><span class="line">        pizza.bake();</span><br><span class="line">        pizza.cut();</span><br><span class="line">        pizza.box();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/421c4610f0ca447cab53bd378a40aa47.png" alt="在这里插入图片描述"></p><p>改进思路分析：</p><ul><li>修改代码可以接受，但是如果我们在其他的地方也有创建Pizza的代码，就意味着，也需要修改，而创建Pizza的代码，往往有多处。</li></ul><p>思路：</p><ul><li>把创建Pizza对象封装到一个类中，这样每当我们有新的Pizza种类时，只需要修改该类即可，其他创建Pizza的对象就不需要修改了。</li></ul><h3 id="简单工厂模式">简单工厂模式</h3><p>基本介绍</p><ul><li>简单工厂模式属于创建型模式，是工厂模式的一种，简单工厂模式是有一个工厂对象决定创建出哪一种产品类的实例，简单工厂模式是工厂模式家族中最简单实用的模式。</li><li>简单工厂模式：定义了一个创建对象的类，由这个类来封装实例化对象的行为。</li><li>在软件开发中，我们会用到大量创建某种，某类或者某批对象时，就会用到工厂模式。</li></ul><p><img src="https://img-blog.csdnimg.cn/499c64f6fb034034bcf72ed0bf632ea7.png" alt="在这里插入图片描述"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderPizza</span> </span>&#123;</span><br><span class="line">    SimpleFactory simpleFactory;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">OrderPizza</span><span class="params">(SimpleFactory simpleFactory)</span> </span>&#123;</span><br><span class="line">        setSimpleFactory(simpleFactory);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSimpleFactory</span><span class="params">(SimpleFactory simpleFactory)</span> </span>&#123;</span><br><span class="line">        Pizza pizza = <span class="keyword">null</span>;</span><br><span class="line">        String orderType = <span class="string">&quot;&quot;</span>; <span class="comment">// 用户输入的</span></span><br><span class="line">        <span class="keyword">this</span>.simpleFactory = simpleFactory;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            orderType = getPizzaType();</span><br><span class="line">            pizza = <span class="keyword">this</span>.simpleFactory.createPizza(orderType);</span><br><span class="line">            <span class="keyword">if</span> (pizza != <span class="keyword">null</span>) &#123;</span><br><span class="line">                pizza.prepare();</span><br><span class="line">                pizza.bake();</span><br><span class="line">                pizza.cut();</span><br><span class="line">                pizza.box();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">while</span> (<span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">getPizzaType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        String type = sc.next();</span><br><span class="line">        <span class="keyword">return</span> type;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Pizza <span class="title">createPizza</span><span class="params">(String orderType)</span> </span>&#123;</span><br><span class="line">        Pizza pizza = <span class="keyword">null</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;使用简单工厂模式&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (orderType.equals(<span class="string">&quot;greek&quot;</span>)) &#123;</span><br><span class="line">            pizza = <span class="keyword">new</span> GreekPizza();</span><br><span class="line">            pizza.setName(<span class="string">&quot;希腊pizza&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (orderType.equals(<span class="string">&quot;cheese&quot;</span>)) &#123;</span><br><span class="line">            pizza = <span class="keyword">new</span> CheesePizza();</span><br><span class="line">            pizza.setName(<span class="string">&quot;奶酪Pizza&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (orderType.equals(<span class="string">&quot;pepper&quot;</span>)) &#123;</span><br><span class="line">            pizza = <span class="keyword">new</span> PepperPizza();</span><br><span class="line">            pizza.setName(<span class="string">&quot;pepper Pizza&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> pizza;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PizzaStore</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> OrderPizza(<span class="keyword">new</span> SimpleFactory());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="静态工厂模式">静态工厂模式</h3><p><img src="https://img-blog.csdnimg.cn/a30af2c982bc41d897f7318f3e73387c.png" alt="在这里插入图片描述"></p><p>而在上面的代码中，<code>OrderPizza</code>类的创建需要聚合<code>SimpleFactory</code>类， 而在简单工厂中，我们可以使用静态方法直接创建<code>Pizza</code>。<br>我们修改OrderPizza类如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderPizzaUsingStaticFactory</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String orderType;</span><br><span class="line"></span><br><span class="line">    Pizza pizza = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">OrderPizzaUsingStaticFactory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            orderType = getPizzaType();</span><br><span class="line">            pizza = SimpleFactory.createPizzaUsingStatic(orderType);</span><br><span class="line">            <span class="keyword">if</span> (pizza != <span class="keyword">null</span>) &#123;</span><br><span class="line">                pizza.prepare();</span><br><span class="line">                pizza.bake();</span><br><span class="line">                pizza.cut();</span><br><span class="line">                pizza.box();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">while</span> (<span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">getPizzaType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        String type = sc.next();</span><br><span class="line">        <span class="keyword">return</span> type;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>我们修改简单工厂类如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleFactory</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 简单工厂模式也叫静态工厂模式</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Pizza <span class="title">createPizzaUsingStatic</span><span class="params">(String orderType)</span> </span>&#123;</span><br><span class="line">        Pizza pizza = <span class="keyword">null</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;使用静态简单工厂模式&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (orderType.equals(<span class="string">&quot;greek&quot;</span>)) &#123;</span><br><span class="line">            pizza = <span class="keyword">new</span> GreekPizza();</span><br><span class="line">            pizza.setName(<span class="string">&quot;希腊pizza&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (orderType.equals(<span class="string">&quot;cheese&quot;</span>)) &#123;</span><br><span class="line">            pizza = <span class="keyword">new</span> CheesePizza();</span><br><span class="line">            pizza.setName(<span class="string">&quot;奶酪Pizza&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (orderType.equals(<span class="string">&quot;pepper&quot;</span>)) &#123;</span><br><span class="line">            pizza = <span class="keyword">new</span> PepperPizza();</span><br><span class="line">            pizza.setName(<span class="string">&quot;pepper Pizza&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> pizza;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="工厂方法模式">工厂方法模式</h3><p>我们来看下面这个新的需求：<br>客户点Pizza时，可以点不同口味的Pizza，比如北京的奶酪Pizza，北京的胡椒Pizza或者是伦敦的奶酪Pizza，伦敦的胡椒Pizza。</p><p>思路1：<br>使用简单工厂模式，创建不同的简单工厂类，比如BJPizzaSimpleFactory，LDPizzaSimpleFactory等等，从当前案例来讲，这个方法是可行的，但是考虑到项目的规模，以及软件的可维护性，可扩展性并不是很好。</p><p>思路2：<br>使用工厂方法模式</p><h4 id="什么是工厂方法模式">什么是工厂方法模式</h4><p>工厂方法模式设计方案：将披萨项目的实例化功能抽象成抽象方法，在不同的口味点餐子类中具体实现。<br>工厂方法模式：定义了一个创建对象的抽象方法，由子类决定要实例化的类，<strong>工厂方法模式将对象的实例化推迟到子类</strong>。<br><img src="https://img-blog.csdnimg.cn/f80f09183cf34948acd1eb8cb4c82229.png" alt="在这里插入图片描述"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Pizza</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 准备原材料,不同的披萨不一样，因此我们把他做成抽象pizza</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">prepare</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">bake</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(name + <span class="string">&quot;:baking;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">cut</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(name + <span class="string">&quot;:cutting;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 打包</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">box</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(name + <span class="string">&quot;:boxing;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BJCheesePizza</span> <span class="keyword">extends</span> <span class="title">Pizza</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">prepare</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        setName(<span class="string">&quot;北京奶酪Pizza&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;北京的奶酪Pizza准备原材料&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LDPepperPizza</span> <span class="keyword">extends</span> <span class="title">Pizza</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">prepare</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        setName(<span class="string">&quot;伦敦胡椒Pizza&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;伦敦的胡椒Pizza准备原材料&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BJPepperPizza</span> <span class="keyword">extends</span> <span class="title">Pizza</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">prepare</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        setName(<span class="string">&quot;北京胡椒Pizza&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;北京的胡椒Pizza准备原材料&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LDCheesePizza</span> <span class="keyword">extends</span> <span class="title">Pizza</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">prepare</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        setName(<span class="string">&quot;伦敦奶酪Pizza&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;伦敦的奶酪Pizza准备原材料&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderPizza</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">OrderPizza</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Pizza pizza = <span class="keyword">null</span>;</span><br><span class="line">        String orderType = <span class="string">&quot;&quot;</span>; <span class="comment">// 用户输入的</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            orderType = getPizzaType();</span><br><span class="line">            pizza = createPizza(orderType);</span><br><span class="line">            <span class="keyword">if</span> (pizza != <span class="keyword">null</span>) &#123;</span><br><span class="line">                pizza.prepare();</span><br><span class="line">                pizza.bake();</span><br><span class="line">                pizza.cut();</span><br><span class="line">                pizza.box();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">while</span> (<span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义一个抽象方法，createPizza，让各个工厂子类自己实现</span></span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> Pizza <span class="title">createPizza</span><span class="params">(String orderType)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">getPizzaType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        String type = sc.next();</span><br><span class="line">        <span class="keyword">return</span> type;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LDOrderPizza</span> <span class="keyword">extends</span> <span class="title">OrderPizza</span> </span>&#123;</span><br><span class="line">    <span class="function">Pizza <span class="title">createPizza</span><span class="params">(String orderType)</span> </span>&#123;</span><br><span class="line">        Pizza pizza = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (orderType.equals(<span class="string">&quot;cheese&quot;</span>)) &#123;</span><br><span class="line">            pizza = <span class="keyword">new</span> LDCheesePizza();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (orderType.equals(<span class="string">&quot;pepper&quot;</span>)) &#123;</span><br><span class="line">            pizza = <span class="keyword">new</span> LDPepperPizza();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> pizza;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BJOrderPizza</span> <span class="keyword">extends</span> <span class="title">OrderPizza</span> </span>&#123;</span><br><span class="line">    <span class="function">Pizza <span class="title">createPizza</span><span class="params">(String orderType)</span> </span>&#123;</span><br><span class="line">        Pizza pizza = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (orderType.equals(<span class="string">&quot;cheese&quot;</span>)) &#123;</span><br><span class="line">            pizza = <span class="keyword">new</span> BJCheesePizza();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (orderType.equals(<span class="string">&quot;pepper&quot;</span>)) &#123;</span><br><span class="line">            pizza = <span class="keyword">new</span> BJPepperPizza();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> pizza;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="抽象工厂模式">抽象工厂模式</h3><p>基本介绍</p><ol><li>抽象工厂模式：定义了一个interface用于创建相关或者有依赖关系的对象簇，而无需指明具体的类。</li><li>抽象工厂模式可以将简单工厂模式和工厂方法模式进行整合。</li><li>从设计层面看，抽象工厂就是对简单工厂模式的改进。</li><li>将工厂抽象分为两层，AbsFactory（抽象工厂）和具体实现的工厂子类。程序员可以根据创建对象类型使用对应的工厂子类，这样将单个的简单工厂类变成了工厂簇，更利于代码的维护。</li></ol><h2 id="原型模式">原型模式</h2><p>克隆羊问题</p><p>现在有一只羊，姓名为tom，年龄为1，颜色为白色，请编写程序创建和tom羊属性完全相同的10只羊。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.thylovecode.prototype.bad;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: thy</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2023年09月16日 15:26</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Sheep sheep = <span class="keyword">new</span> Sheep(<span class="string">&quot;TOM&quot;</span>, <span class="number">1</span>, <span class="string">&quot;白色&quot;</span>);</span><br><span class="line">        Sheep sheep2 = <span class="keyword">new</span> Sheep(sheep.getName(), sheep.getAge(), sheep.getColor());</span><br><span class="line">        Sheep sheep3 = <span class="keyword">new</span> Sheep(sheep.getName(), sheep.getAge(), sheep.getColor());</span><br><span class="line">        Sheep sheep4 = <span class="keyword">new</span> Sheep(sheep.getName(), sheep.getAge(), sheep.getColor());</span><br><span class="line">        Sheep sheep5 = <span class="keyword">new</span> Sheep(sheep.getName(), sheep.getAge(), sheep.getColor());</span><br><span class="line">        Sheep sheep6 = <span class="keyword">new</span> Sheep(sheep.getName(), sheep.getAge(), sheep.getColor());</span><br><span class="line">        Sheep sheep7 = <span class="keyword">new</span> Sheep(sheep.getName(), sheep.getAge(), sheep.getColor());</span><br><span class="line">        Sheep sheep8 = <span class="keyword">new</span> Sheep(sheep.getName(), sheep.getAge(), sheep.getColor());</span><br><span class="line">        Sheep sheep9 = <span class="keyword">new</span> Sheep(sheep.getName(), sheep.getAge(), sheep.getColor());</span><br><span class="line">        Sheep sheep10 = <span class="keyword">new</span> Sheep(sheep.getName(), sheep.getAge(), sheep.getColor());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>传统方式的优缺点：</p><ol><li>优点是比较好理解，简单易操作。</li><li>在创建新的对象时，总是需要重新获取原始对象的属性，如果创建的对象比较复杂，效率较低。</li><li>总是需要初始化对象，而不是动态的获得运行时的状态，不够灵活</li><li>改进的思路分析</li></ol><p>思路：</p><p>Java中Object类是所有类的根类，Object类实现了一个clone方法，该方法可以将一个Java对象复制一份，但是需要克隆的Java类必须要实现一个接口Cloneable，该接口表示该类能够复制且具有复制的能力 =&gt; 原型模式</p><h3 id="基本介绍">基本介绍</h3><ol><li>原型模式（Prototype模式）是指：用原型实例指定创建对象的种类，并且通过拷贝这些原型，创建新的对象。</li><li>原型模式是一种创建型设计模式，允许一个对象再创建另外一个可定制的对象，无需知道创建的细节。</li><li>工作原理是：通过将一个原型对象传给那个要发动创建的对象，这个要发动创建的对象通过请求原型对象拷贝它们自己来实施创建。即对象.clone。</li><li>形象的理解：孙大圣拔出猴毛，变成孙大圣。</li></ol><h3 id="UML类图">UML类图</h3><ol><li>Prototype：原型类，声明一个克隆自己的接口</li><li>ConcretePrototype：具体的原型类，实现一个克隆自己的操作。</li><li>Client：让一个原型对象克隆自己，从而创建一个新的对象（属性一样）</li></ol><h3 id="代码实现">代码实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.thylovecode.prototype.good;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: thy</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2023年09月16日 15:24</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Sheep</span> <span class="keyword">implements</span> <span class="title">Cloneable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> String color;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Sheep</span><span class="params">(String name, <span class="keyword">int</span> age, String color)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        <span class="keyword">this</span>.color = color;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getColor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> color;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setColor</span><span class="params">(String color)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.color = color;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Sheep&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&quot;, color=&#x27;&quot;</span> + color + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 克隆该实例，使用默认的clone方法来完成</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Object <span class="title">clone</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Sheep sheep = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            sheep = (Sheep) <span class="keyword">super</span>.clone();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            System.out.println(e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sheep;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.thylovecode.prototype.good;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: thy</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2023年09月16日 15:54</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Sheep sheep = <span class="keyword">new</span> Sheep(<span class="string">&quot;TOM&quot;</span>, <span class="number">1</span>, <span class="string">&quot;白色&quot;</span>);</span><br><span class="line">        Sheep sheep1 = (Sheep) sheep.clone();</span><br><span class="line">        Sheep sheep2 = (Sheep) sheep.clone();</span><br><span class="line">        Sheep sheep3 = (Sheep) sheep.clone();</span><br><span class="line">        System.out.println(sheep1);</span><br><span class="line">        System.out.println(sheep2);</span><br><span class="line">        System.out.println(sheep3);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="浅拷贝模式">浅拷贝模式</h3><ol><li>对于数据类型是基本数据类型的成员变量，浅拷贝会直接进行值传递，也就是将该属性复制一份给新的对象。</li><li>对于数据类型是引用数据类型的成员变量，比如说成员变量是某个数组，某个类的对象等，那么浅拷贝会进行引用传递，也就是只是将该成员变量的引用值（内存地址）复制一份给新的对象。因为实际上两个对象的成员变量都指向同一个实例，在这种情况下，在一个对象中修改该成员变量会影响到另一个对象的该成员变量值。</li><li>前面我们克隆羊就是浅拷贝</li><li>浅拷贝是使用默认的clone()方法来实现</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sheep = (Sheep)<span class="keyword">super</span>.clone();</span><br></pre></td></tr></table></figure><p>我们更改上面的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.thylovecode.prototype.good;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: thy</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2023年09月16日 15:24</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Sheep</span> <span class="keyword">implements</span> <span class="title">Cloneable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> String color;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Sheep sheep;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Sheep</span><span class="params">(String name, <span class="keyword">int</span> age, String color)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        <span class="keyword">this</span>.color = color;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Sheep <span class="title">getSheep</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sheep;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSheep</span><span class="params">(Sheep sheep)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.sheep = sheep;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getColor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> color;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setColor</span><span class="params">(String color)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.color = color;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Sheep&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&quot;, color=&#x27;&quot;</span> + color + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 克隆该实例，使用默认的clone方法来完成</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Object <span class="title">clone</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Sheep sheep = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            sheep = (Sheep) <span class="keyword">super</span>.clone();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            System.out.println(e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sheep;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.thylovecode.prototype.good;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: thy</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2023年09月16日 15:54</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Sheep sheep = <span class="keyword">new</span> Sheep(<span class="string">&quot;TOM&quot;</span>, <span class="number">1</span>, <span class="string">&quot;白色&quot;</span>);</span><br><span class="line">        sheep.setSheep(<span class="keyword">new</span> Sheep(<span class="string">&quot;Elice&quot;</span>, <span class="number">2</span>, <span class="string">&quot;黑色&quot;</span>));</span><br><span class="line">        Sheep sheep1 = (Sheep) sheep.clone();</span><br><span class="line">        Sheep sheep2 = (Sheep) sheep.clone();</span><br><span class="line">        Sheep sheep3 = (Sheep) sheep.clone();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        System.out.println(sheep1 + <span class="string">&quot;friend sheep:&quot;</span> + sheep1.getSheep().hashCode());</span><br><span class="line">        System.out.println(sheep2 + <span class="string">&quot;friend sheep:&quot;</span> + sheep2.getSheep().hashCode());</span><br><span class="line">        System.out.println(sheep3 + <span class="string">&quot;friend sheep:&quot;</span> + sheep3.getSheep().hashCode());</span><br><span class="line"></span><br><span class="line">        sheep1.setAge(<span class="number">20</span>);</span><br><span class="line">        System.out.println(sheep1);</span><br><span class="line">        System.out.println(sheep2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>运行后，结果显示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Sheep&#123;name=&#x27;TOM&#x27;, age=1, color=&#x27;白色&#x27;&#125;friend sheep:1324119927</span><br><span class="line">Sheep&#123;name=&#x27;TOM&#x27;, age=1, color=&#x27;白色&#x27;&#125;friend sheep:1324119927</span><br><span class="line">Sheep&#123;name=&#x27;TOM&#x27;, age=1, color=&#x27;白色&#x27;&#125;friend sheep:1324119927</span><br><span class="line">Sheep&#123;name=&#x27;TOM&#x27;, age=20, color=&#x27;白色&#x27;&#125;</span><br><span class="line">Sheep&#123;name=&#x27;TOM&#x27;, age=1, color=&#x27;白色&#x27;&#125;</span><br></pre></td></tr></table></figure><h3 id="深拷贝">深拷贝</h3><ol><li><p>复制对象的所有基本数据类型的成员变量值</p></li><li><p>为所有引用数据类型的成员变量申请存储空间，并复制每个引用数据类型成员变量所引用的对象，直到该对象可达的所有对象，也就是说，对象进行深拷贝要对整个对象拷贝。</p></li><li><p>深拷贝实现方式1：重写clone方法来实现深拷贝</p></li><li><p>深拷贝实现方式2：通过对象序列化实现深拷贝</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.thylovecode.prototype.good.deep;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: thy</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2023年09月16日 17:33</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeepCloneableTarget</span> <span class="keyword">implements</span> <span class="title">Serializable</span>, <span class="title">Cloneable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line">    <span class="keyword">private</span> String cloneName;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String cloneClass;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DeepCloneableTarget</span><span class="params">(String cloneName, String cloneClass)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.cloneName = cloneName;</span><br><span class="line">        <span class="keyword">this</span>.cloneClass = cloneClass;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Object <span class="title">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.clone();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.thylovecode.prototype.good.deep;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: thy</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2023年09月16日 17:38</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeepProtoType</span> <span class="keyword">implements</span> <span class="title">Serializable</span>, <span class="title">Cloneable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">public</span> DeepCloneableTarget deepCloneableTarget;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DeepProtoType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DeepProtoType</span><span class="params">(String name, DeepCloneableTarget deepCloneableTarget)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.deepCloneableTarget = deepCloneableTarget;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 深拷贝 1. 使用clone方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Object <span class="title">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class="line">        Object deep = <span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">// 这里完成对基本数据类型的克隆</span></span><br><span class="line">        deep = <span class="keyword">super</span>.clone();</span><br><span class="line">        <span class="comment">// 对引用数据类型进行单独处理</span></span><br><span class="line">        DeepProtoType deepProtoType = (DeepProtoType) deep;</span><br><span class="line">        deepProtoType.deepCloneableTarget = (DeepCloneableTarget) deepCloneableTarget.clone();</span><br><span class="line">        <span class="keyword">return</span> deep;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 深拷贝 2. 使用对象序列化实现深拷贝</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">deepClone</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 创建流对象</span></span><br><span class="line">        ByteArrayOutputStream bos = <span class="keyword">null</span>;</span><br><span class="line">        ObjectOutputStream oos = <span class="keyword">null</span>;</span><br><span class="line">        ByteArrayInputStream bis = <span class="keyword">null</span>;</span><br><span class="line">        ObjectInputStream ois = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 序列化操作</span></span><br><span class="line">            bos = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">            oos = <span class="keyword">new</span> ObjectOutputStream(bos);</span><br><span class="line">            oos.writeObject(<span class="keyword">this</span>); <span class="comment">// 当前这个对象以对象流的方式输出</span></span><br><span class="line">            bis = <span class="keyword">new</span> ByteArrayInputStream(bos.toByteArray());</span><br><span class="line">            ois = <span class="keyword">new</span> ObjectInputStream(bis);</span><br><span class="line">            <span class="keyword">return</span> (DeepProtoType) ois.readObject();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                bos.close();</span><br><span class="line">                oos.close();</span><br><span class="line">                bis.close();</span><br><span class="line">                ois.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.thylovecode.prototype.good.deep;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.thylovecode.prototype.good.deep.DeepCloneableTarget;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: thy</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2023年09月16日 15:54</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        DeepProtoType p1 = <span class="keyword">new</span> DeepProtoType(<span class="string">&quot;宋江&quot;</span>, <span class="keyword">new</span> DeepCloneableTarget(<span class="string">&quot;大牛&quot;</span>, <span class="string">&quot;大牛的类&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 方式一：完成深拷贝</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            DeepProtoType p2 = (DeepProtoType) p1.clone();</span><br><span class="line">            System.out.println(p1.deepCloneableTarget.hashCode());</span><br><span class="line">            System.out.println(p2.deepCloneableTarget.hashCode());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (CloneNotSupportedException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 方式二：完成深拷贝</span></span><br><span class="line"></span><br><span class="line">        DeepProtoType p2 = (DeepProtoType) p1.deepClone();</span><br><span class="line">        System.out.println(p1.deepCloneableTarget.hashCode());</span><br><span class="line">        System.out.println(p2.deepCloneableTarget.hashCode());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>原型模式的注意事项和细节</p><ol><li>创建新的对象比较复杂时，可以利用原型模式简化对象的创建过程，同时也能够提高效率。</li><li>不用重新初始化对象，而是动态地获得对象运行时的状态。</li><li>如果原始对象发生变化（增加或者减少属性），其他克隆对象的也会发生相应的变化，无需修改代码。</li><li>在实现深克隆的时候可能需要比较复杂的代码。</li><li>缺点：需要为每一个类配备一个克隆方法，这对全新的类来说不是很难，但对已有的类进行改造时，需要修改其源代码，违背了OCP原则。</li></ol><h2 id="职责链模式">职责链模式</h2><p>OA系统采购审批需求</p><p>学校OA系统的采购审批需求：需求是</p><ol><li>采购员采购教学器材</li><li>如果金额小于等于5000，由教学主任审批</li><li>如果金额小于等于10000，由院长审批</li><li>如果金额小于等于30000，由副校长审批</li><li>如果金额超过30000以上，由校长审批。</li></ol><p>传统方案解决OA系统审批问题分析</p><ol><li>传统方式是：接收到一个采购请求后，根据采购金额来调用对应的Approver（审批人）完成审批。</li><li>传统方式的问题分析：客户端会用到分支判断（比如switch）来对不同的采购请求处理，这样就存在以下问题(1).如果各个级别的人员审批金额发生变化，在客户端的也需要变化(2).客户端必须明确的知道有多少个审批级别和访问。</li><li>这样对一个采购请求进行处理和Approver（审批人）就存在强耦合关系，不利于代码维护及扩展。</li><li>解决方案：职责链模式。</li></ol><p>基本介绍：</p><ol><li>职责链模式，又叫责任链模式，为请求创建了一个接收者对象的链，这种模式对请求的发送者和接收者进行解耦。</li><li>责任链模式通常每个接收者都包含对另一个接收者的引用，如果下一个对象不能处理请求，那么它会把相同的请求传给下一个接收者，依次类推。</li><li>这种类型的设计模式属于行为型模式</li></ol><p>职责链模式：使多个对象都有机会处理请求，从而避免请求的发送者和接收者之间的耦合关系，将这个对象连成一条链，并沿着这条链传递该请求，直到有一个对象处理它为止。</p><ol><li>Handler：抽象的处理者，定义了一个处理请求的接口，同时含有另外一个Handler对象。</li><li>ConcreteHandlerA：具体的处理者，处理它自己负责的请求，可以访问它的后继者及下一个处理者。如果可以处理当前请求。否则就将该请求交给后继者去处理。从而形成一个职责链。</li><li>Request：含有很多属性，表示一个请求。</li></ol><p><img src="C:%5CUsers%5C86185%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20230916190844229.png" alt="image-20230916190844229"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.thylovecode.responsibilitychain.good;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: thy</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2023年09月16日 18:31</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PurchaseRequest</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> type; <span class="comment">// 请求类型</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> price = <span class="number">0.0f</span>; <span class="comment">// 请求金额</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PurchaseRequest</span><span class="params">(<span class="keyword">int</span> type, <span class="keyword">float</span> price, <span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.type = type;</span><br><span class="line">        <span class="keyword">this</span>.price = price;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> type;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setType</span><span class="params">(<span class="keyword">int</span> type)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.type = type;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">float</span> <span class="title">getPrice</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPrice</span><span class="params">(<span class="keyword">float</span> price)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.price = price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.thylovecode.responsibilitychain.good;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: thy</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2023年09月16日 18:42</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Approver</span> </span>&#123;</span><br><span class="line">    Approver approver; <span class="comment">// 下一个处理者</span></span><br><span class="line"></span><br><span class="line">    String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Approver</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setApprover</span><span class="params">(Approver approver)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.approver = approver;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 处理审批请求的方法,得到一个请求。处理是子类完成，因此将该方法做成抽象</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">processRequest</span><span class="params">(PurchaseRequest request)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.thylovecode.responsibilitychain.good;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: thy</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2023年09月16日 18:29</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DepartmentApprover</span> <span class="keyword">extends</span> <span class="title">Approver</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DepartmentApprover</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">processRequest</span><span class="params">(PurchaseRequest request)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (request.getPrice() &lt; <span class="number">5000</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;请求编号 id = &quot;</span> + request.getId() + <span class="string">&quot;被&quot;</span> + <span class="keyword">this</span>.name + <span class="string">&quot;处理&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            approver.processRequest(request);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.thylovecode.responsibilitychain.good;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: thy</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2023年09月16日 18:29</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CollegeApprover</span> <span class="keyword">extends</span> <span class="title">Approver</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CollegeApprover</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">processRequest</span><span class="params">(PurchaseRequest request)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (request.getPrice() &gt;= <span class="number">5000</span> &amp;&amp; request.getPrice() &lt; <span class="number">10000</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;请求编号 id = &quot;</span> + request.getId() + <span class="string">&quot;被&quot;</span> + <span class="keyword">this</span>.name + <span class="string">&quot;处理&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            approver.processRequest(request);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.thylovecode.responsibilitychain.good;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: thy</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2023年09月16日 18:29</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MasterApprover</span> <span class="keyword">extends</span> <span class="title">Approver</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MasterApprover</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">processRequest</span><span class="params">(PurchaseRequest request)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (request.getPrice() &gt;= <span class="number">10000</span> &amp;&amp; request.getPrice() &lt;= <span class="number">30000</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;请求编号 id = &quot;</span> + request.getId() + <span class="string">&quot;被&quot;</span> + <span class="keyword">this</span>.name + <span class="string">&quot;处理&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            approver.processRequest(request);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.thylovecode.responsibilitychain.good;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: thy</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2023年09月16日 18:29</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DirectorApprover</span> <span class="keyword">extends</span> <span class="title">Approver</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DirectorApprover</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">processRequest</span><span class="params">(PurchaseRequest request)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (request.getPrice() &gt; <span class="number">30000</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;请求编号 id = &quot;</span> + request.getId() + <span class="string">&quot;被&quot;</span> + <span class="keyword">this</span>.name + <span class="string">&quot;处理&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            approver.processRequest(request);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.thylovecode.responsibilitychain.good;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: thy</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2023年09月16日 18:53</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        PurchaseRequest request = <span class="keyword">new</span> PurchaseRequest(<span class="number">1</span>, <span class="number">1000</span>, <span class="number">1</span>);</span><br><span class="line">        DepartmentApprover departmentApprover = <span class="keyword">new</span> DepartmentApprover(<span class="string">&quot;张主任&quot;</span>);</span><br><span class="line">        CollegeApprover collegeApprover = <span class="keyword">new</span> CollegeApprover(<span class="string">&quot;李院长&quot;</span>);</span><br><span class="line">        MasterApprover masterApprover = <span class="keyword">new</span> MasterApprover(<span class="string">&quot;王校长&quot;</span>);</span><br><span class="line">        DirectorApprover directorApprover = <span class="keyword">new</span> DirectorApprover(<span class="string">&quot;唐局长&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 需要将各个审批级别的下一个设置好（处理人构成环形）</span></span><br><span class="line">        departmentApprover.setApprover(collegeApprover);</span><br><span class="line">        collegeApprover.setApprover(masterApprover);</span><br><span class="line">        masterApprover.setApprover(directorApprover);</span><br><span class="line">        directorApprover.setApprover(departmentApprover);</span><br><span class="line"></span><br><span class="line">        masterApprover.processRequest(request);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="代理模式">代理模式</h2><h3 id="概述">概述</h3><p>由于某些原因需要给对象提供一个代理以控制对该对象的访问。这时，访问对象不适合或者不能直接引用目标对象，代理对象作为访问对象和目标对象之间的中介。<br>Java中的代理按照代理类生成时机又分为静态代理和动态代理，静态代理代理类在编译期就生成，而动态代理类则是在Java运行时动态生成，动态代理又有JDK代理和CGLib代理两种。</p><h3 id="结构">结构</h3><p>代理模式分为三种角色：</p><ul><li>抽象主题类：通过接口或者抽象类声明真实主题和代理对象实现的业务方法</li><li>真实主题类：实现了抽象主题中的具体业务，是代理对象所代表的真实对象，是最终要引用的对象。</li><li>代理类：提供了与真实主题相同的接口，其内部含有对真实主题的引用，它可以访问，控制或扩展真实主题的功能。</li></ul><h3 id="静态代理">静态代理</h3><p>我们用以下实例感受动态代理：</p><p>火车站卖票：<br>如果要买火车票的话，需要去火车站买票，坐车到火车站，排队等一系列操作，显然比较麻烦，而火车票在多个地方都有代售点，我们进去代售点买票就方便很多，这个例子就是典型的代理模式，火车站是目标对象，代售点是代理对象。<br><img src="https://img-blog.csdnimg.cn/447d6915f6c24a179ac4742071a124f9.png" alt="在这里插入图片描述"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 卖火车票的接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ISellTickets</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">sell</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 火车站类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TrainStation</span> <span class="keyword">implements</span> <span class="title">ISellTickets</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sell</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;火车站卖票&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 代售点类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProxyPoint</span> <span class="keyword">implements</span> <span class="title">ISellTickets</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> TrainStation trainStation = <span class="keyword">new</span> TrainStation();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sell</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;代理点收取一些服务费用&quot;</span>);</span><br><span class="line">        trainStation.sell();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ProxyPoint proxyPoint = <span class="keyword">new</span> ProxyPoint();</span><br><span class="line">        proxyPoint.sell();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从上面代码中可以看出测试类直接访问的是ProxyPoint类对象，也就是说ProxyPoint作为访问对象和目标对象的中介，同时也对sell方法进行了增强。</p><h3 id="JDK动态代理">JDK动态代理</h3><p>接下来，我们使用动态代理实现上面的案例，先说说JDK提供的动态代理，Java中提供了一个动态代理类Proxy，Proxy并不是我们上述所说的代理对象的类，而是提供了一个创建代理对象的静态方法（newProxyInstance方法）来获取代理对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取代理对象的工厂类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProxyFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 声明目标对象</span></span><br><span class="line">    <span class="keyword">private</span> TrainStation trainStation = <span class="keyword">new</span> TrainStation();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * ClassLoader loader：类加载器，用于加载代理类，可以通过目标对象获取类加载器</span></span><br><span class="line"><span class="comment">     * Class&lt;?&gt;[] interfaces：代理类实现的接口的字节码对象</span></span><br><span class="line"><span class="comment">     * InvocationHandler h：代理对象的调用处理程序</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ISellTickets <span class="title">getProxyObject</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ISellTickets proxyInstance = (ISellTickets) Proxy.newProxyInstance(</span><br><span class="line">                trainStation.getClass().getClassLoader(),</span><br><span class="line">                trainStation.getClass().getInterfaces(),</span><br><span class="line">                <span class="keyword">new</span> InvocationHandler() &#123;</span><br><span class="line">                    <span class="comment">/**</span></span><br><span class="line"><span class="comment">                     *</span></span><br><span class="line"><span class="comment">                     * <span class="doctag">@param</span> proxy 代理对象，和proxyObject对象是一个对象，在invoke方法中基本不用</span></span><br><span class="line"><span class="comment">                     *</span></span><br><span class="line"><span class="comment">                     * <span class="doctag">@param</span> method 对接口中的方法进行封装的method方法</span></span><br><span class="line"><span class="comment">                     *</span></span><br><span class="line"><span class="comment">                     * <span class="doctag">@param</span> args 调用方法的实际参数</span></span><br><span class="line"><span class="comment">                     *</span></span><br><span class="line"><span class="comment">                     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">                     * <span class="doctag">@throws</span> Throwable</span></span><br><span class="line"><span class="comment">                     */</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">                        System.out.println(<span class="string">&quot;代售点收取一定的服务费用（JDK动态代理）&quot;</span>);</span><br><span class="line">                        method.invoke(trainStation, <span class="keyword">null</span>);</span><br><span class="line">                        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">        );</span><br><span class="line">        <span class="keyword">return</span> proxyInstance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 获取代理对象</span></span><br><span class="line">        ProxyFactory proxyFactory = <span class="keyword">new</span> ProxyFactory();</span><br><span class="line">        ISellTickets proxyObject =</span><br><span class="line">                proxyFactory.getProxyObject();</span><br><span class="line">        proxyObject.sell();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>ProxyFactory是代理类吗？</li><li>ProxyFactory不是代理模式中所说的代理类，而代理类是程序在运行过程中动态的在内存中生成的类。通过阿里巴巴开源的Java诊断工具（Arthas【阿尔萨斯】）查看代理类的结构。</li></ul><p>从生成的类中，我们可以得到：</p><ul><li>代理类（$Proxy0）实现了SellTickets，这也就印证了我们之前说的真实类和代理类实现同样的接口。</li><li>代理类（$Proxy0）将我们提供了的匿名内部类对象传递给了父类。</li></ul><p>执行流程如下：</p><p>1.在测试类中通过代理对象调用sell()方法<br>2.根据多态的特性，执行的是代理类（<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>P</mi><mi>r</mi><mi>o</mi><mi>x</mi><mi>y</mi><mn>0</mn><mtext>）中的</mtext><mi>s</mi><mi>e</mi><mi>l</mi><mi>l</mi><mo stretchy="false">(</mo><mo stretchy="false">)</mo><mtext>方法</mtext><mn>3.</mn><mtext>代理类（</mtext></mrow><annotation encoding="application/x-tex">Proxy0）中的sell()方法3.代理类（</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mord mathnormal">ro</span><span class="mord mathnormal">x</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mord">0</span><span class="mord cjk_fallback">）中的</span><span class="mord mathnormal">se</span><span class="mord mathnormal" style="margin-right:0.01968em;">ll</span><span class="mopen">(</span><span class="mclose">)</span><span class="mord cjk_fallback">方法</span><span class="mord">3.</span><span class="mord cjk_fallback">代理类（</span></span></span></span>Proxy0）中的sell()方法中又调用了InvocationHandler接口的自实现对象的invoke方法。<br>4.invoke方法通过反射执行了真实对象所属类（TrainStation）中的sell方法。</p><h3 id="CGLIB动态代理">CGLIB动态代理</h3><p>同样是上面的案例，我们使用CGLIB代理实现，如果没有定义SellTickets接口，只定义了TrainStation（火车站类）。很显然JDK代理是无法使用了，因为JDK动态代理要求必须定义接口，对接口进行代理。<br>CGLIB是一个功能强大，高性能的代码生成包。它为没有实现接口的类提供代理。为JDK的动态代理提供了很好的补充。<br>CGLIB是第三方提供的包，所以需要引入jar包。</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;cglib&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;cglib&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;2.2.2&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 代理对象工厂，用来获取代理对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProxyFactory</span> <span class="keyword">implements</span> <span class="title">MethodInterceptor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> TrainStation trainStation = <span class="keyword">new</span> TrainStation();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> TrainStation <span class="title">getProxyObject</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 创建在Enhancer对象，类似于JDK代理对象中的Proxy类</span></span><br><span class="line">        Enhancer enhancer = <span class="keyword">new</span> Enhancer();</span><br><span class="line">        <span class="comment">// 设置父类的字节码对象</span></span><br><span class="line">        enhancer.setSuperclass(TrainStation.class);</span><br><span class="line">        <span class="comment">// 设置回调函数</span></span><br><span class="line">        enhancer.setCallback(<span class="keyword">this</span>);</span><br><span class="line">        <span class="comment">// 创建代理对象</span></span><br><span class="line">        TrainStation proxyObject = (TrainStation) enhancer.create();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> proxyObject;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">intercept</span><span class="params">(Object o, Method method, Object[] objects, MethodProxy methodProxy)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;代售点收取服务费用（CGLIB）&quot;</span>);</span><br><span class="line">        <span class="comment">// 要调用目标对象的方法</span></span><br><span class="line">        Object object = method.invoke(trainStation, objects);</span><br><span class="line">        <span class="keyword">return</span> object;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 创建代理工厂对象</span></span><br><span class="line">        ProxyFactory proxyFactory = <span class="keyword">new</span> ProxyFactory();</span><br><span class="line">        <span class="comment">// 获取代理对象</span></span><br><span class="line">        TrainStation proxyObject = proxyFactory.getProxyObject();</span><br><span class="line">        <span class="comment">// 调用方法卖票</span></span><br><span class="line">        proxyObject.sell();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="三种代理的对比">三种代理的对比</h3><ul><li>JDK代理和CGLIB代理<br>使用CGLIB实现动态代理，CGLIB底层采用ASM字节码生成框架，使用字节码技术生成代理类，在JDK1.6之前比使用Java反射效率要高，唯一需要注意的是，CGLIB不能对声明为final的类或者方法进行代理，因为CGLIB原理是动态生成被代理类的子类。<br>在JDK1.6，1.7，1.8逐步对JDK动态代理优化之后，在调用次数较少时，JDK代理效率高于CGLIB，只有当进行大量调用的时候，JDK1.6和JDK1.7比CGLIB代理效率低，但是到JDK1.8时，JDK代理效率高于CGLIB代理。<strong>所以有接口使用JDK动态代理，如果没有接口使用CGLIB代理。</strong></li><li>动态代理和静态代理<br><strong>动态代理和静态代理相比较，最大的好处是接口中声明的所有方法都被转移到调用器一个集中的方法中处理（InvocationHandler.invoke）</strong>。这样，在接口方法数量比较多的时候，我们可以进行灵活处理。而不需要像静态代理那样每一个方法进行中转。<br>如果接口增加一个方法，静态代理模式除了所有实现类需要实现这个方法外，所有代理类也需要实现这个方法。增加了代码维护的复杂度，而动态代理不会出现上述问题。</li></ul><h3 id="代理模式的优点">代理模式的优点</h3><p>优点：</p><ul><li>代理模式在客户端和目标对象之间起到一个中介作用和保护目标对象的作用。</li><li>代理对象可以扩展目标对象的功能。</li><li>代理模式能将客户端与目标对象分离，在一定程度上减少了系统的耦合度。</li></ul><p>缺点：</p><ul><li>增加了系统的复杂度</li></ul><h3 id="使用场景">使用场景</h3><ul><li>远程代理<br>本地服务通过网络请求远程服务，为了实现本地到远程的通信，我们需要实现网络通信，处理其中可能出现的异常。为良好的代码设计和可维护性，我们将网络通信隐藏起来，只暴露给本地接口一个服务，通过该接口即可访问远程服务提供的功能，而不必过分关心通信部分的细节。</li><li>防火墙代理<br>当你将浏览器配置成使用代理功能时，防火墙就将你的浏览器的请求转给互联网；当互联网返回响应时，代理服务器再将它转给你的浏览器。</li><li>保护代理<br>控制一个对象的访问，如果需要，可以给不同的用户提供不同级别的访问权限。</li></ul><h2 id="模板方法模式">模板方法模式</h2><h3 id="豆浆制作问题">豆浆制作问题</h3><p>编写制作豆浆的程序，说明如下：</p><ol><li>制作豆浆的流程：选材 —&gt; 添加配料 —&gt; 浸泡 —&gt; 放到豆浆机打碎</li><li>通过添加不同的配料，可以制造出不同口味的豆浆</li><li>选材，浸泡和放到豆浆机打碎这几个步骤对于制作每种口味的豆浆都是一样的</li><li>请使用模板方法模式完成</li></ol><p>基本介绍：</p><ul><li>模板方法模式，又叫模板模式，在一个抽象类公开定义了执行它的方法模板，它的子类可以按需要重写方法实现，但调用将以抽象类中定义的方式进行。</li><li>简单说，模板方法模式定义一个操作中的算法的骨架，而将一些步骤延迟到子类中，使得子类可以不改变一个算法的结构，就可以重定义该算法的某些特定步骤。</li><li>这种类型的设计模式属于行为型模式</li></ul><p>对原理类图的说明：</p><ol><li>AbstractClass抽象类，类中实现了模板方法，定义了算法骨架，具体子类需要去实现，其他的抽象方法operation2，3，4</li><li>ConcreteClass实现抽象方法operation2，3，4，以完成算法中特定子类的步骤</li></ol><p><img src="https://img-blog.csdnimg.cn/b9a323f1f35e4843b86e0581665ea1cd.png" alt="在这里插入图片描述"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.template;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 抽象类表示豆浆</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">SoyaMilk</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 模板方法，make，模板方法模式可以做成final，不让子类去覆盖</span></span><br><span class="line">    <span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">make</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        select();</span><br><span class="line">        addCondiments();</span><br><span class="line">        soak();</span><br><span class="line">        beat();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 选材料</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">select</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;第一步：选择好的新鲜黄豆&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 添加不同的配料，子类具体实现</span></span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">addCondiments</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 浸泡</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">soak</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;第三步：黄豆和配料开始浸泡，需要三小时&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">beat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;第四步：黄豆和配料放到豆浆机打&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.template;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedBeanSoyaMilk</span> <span class="keyword">extends</span> <span class="title">SoyaMilk</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">addCondiments</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;加入红豆作为配料&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.template;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PeannutSoyaMilk</span> <span class="keyword">extends</span> <span class="title">SoyaMilk</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">addCondiments</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;加入上好的花生&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.template;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;制作红豆豆浆&quot;</span>);</span><br><span class="line">        RedBeanSoyaMilk redBeanSoyaMilk = <span class="keyword">new</span> RedBeanSoyaMilk();</span><br><span class="line">        redBeanSoyaMilk.make();</span><br><span class="line">        System.out.println(<span class="string">&quot;制作花生豆浆&quot;</span>);</span><br><span class="line">        PeannutSoyaMilk peannutSoyaMilk = <span class="keyword">new</span> PeannutSoyaMilk();</span><br><span class="line">        peannutSoyaMilk.make();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="模板方法模式的钩子方法">模板方法模式的钩子方法</h3><ol><li>在模板方法的父类中，我们可以定义一个方法，它默认不做任何事，子类可以视情况要不要覆盖它，该方法称为“钩子”。</li><li>还是用上面做豆浆的例子来讲解，比如，我们还希望制作纯豆浆，不添加任何的配料，请使用钩子方法对前面的模板方法进行改造。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 抽象类表示豆浆</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">SoyaMilk</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 模板方法，make，模板方法模式可以做成final，不让子类去覆盖</span></span><br><span class="line">    <span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">make</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        select();</span><br><span class="line">        <span class="keyword">if</span> (customerWantCondiments()) &#123;</span><br><span class="line">            addCondiments();</span><br><span class="line">        &#125;</span><br><span class="line">        soak();</span><br><span class="line">        beat();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 选材料</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">select</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;第一步：选择好的新鲜黄豆&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 添加不同的配料，子类具体实现</span></span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">addCondiments</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 浸泡</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">soak</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;第三步：黄豆和配料开始浸泡，需要三小时&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">beat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;第四步：黄豆和配料放到豆浆机打&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 钩子方法</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">customerWantCondiments</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;制作红豆豆浆&quot;</span>);</span><br><span class="line">        RedBeanSoyaMilk redBeanSoyaMilk = <span class="keyword">new</span> RedBeanSoyaMilk();</span><br><span class="line">        redBeanSoyaMilk.make();</span><br><span class="line">        System.out.println(<span class="string">&quot;制作花生豆浆&quot;</span>);</span><br><span class="line">        PeannutSoyaMilk peannutSoyaMilk = <span class="keyword">new</span> PeannutSoyaMilk();</span><br><span class="line">        peannutSoyaMilk.make();</span><br><span class="line">        System.out.println(<span class="string">&quot;制作纯豆浆&quot;</span>);</span><br><span class="line">        PureSoyaMilk pureSoyaMilk = <span class="keyword">new</span> PureSoyaMilk();</span><br><span class="line">        pureSoyaMilk.make();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="策略模式概述">策略模式概述</h2><p>先看下面的图片，我们去旅行的方式有很多，可以骑自行车，坐汽车，坐飞机。</p><p>作为一个程序员，我们也可以选择很多开发工具，当然可以进行开发的工具有很多，可以选择IDEA开发，也可以选择eclipse。也可以选择一些其他的工具。</p><p>定义：<br>该模式定义了一系列算法，并将算法封装起来，使它们可以相互替换，且算法的变化不会影响算法的客户，策略模式属于对象行为模式，它对算法进行封装，把使用算法的责任和算法的实现分隔开来，并委派给不同的对象对这些算法进行管理。</p><h3 id="结构-2">结构</h3><p>策略模式的主要角色如下：</p><ul><li>抽象策略（Strategy）类：这是一个抽象角色，通常由一个接口或者抽象类实现，此角色给出所有的具体策略类所需的接口。</li><li>具体策略类（Concrete Strategy）类：实现了抽象策略定义的接口，提供具体的算法实现或者行为。</li><li>环境（Context）类：持有一个策略类的引用，最终给客户端调用。</li></ul><h3 id="案例实现">案例实现</h3><p>一家百货公司在年度的促销活动，针对不同的节日（春节，中秋节，圣诞节）推出不同的促销活动，由促销员将促销活动展现给客户。</p><p><img src="https://img-blog.csdnimg.cn/926d5713556f4d3383dd32e3acc557a9.png" alt="在这里插入图片描述"></p><p>代码如下：<br>定义百货公司所有促销活动的公共接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Strategy</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>三种实现类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StrategyA</span> <span class="keyword">implements</span> <span class="title">Strategy</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;买一送一&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StrategyB</span> <span class="keyword">implements</span> <span class="title">Strategy</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;满两百，减五十&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StrategyC</span> <span class="keyword">implements</span> <span class="title">Strategy</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;满1000元加一元换购任意200元以下产品&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定义环境类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SalesMan</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 聚合策略类对象</span></span><br><span class="line">    <span class="keyword">private</span> Strategy strategy;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SalesMan</span><span class="params">(Strategy strategy)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.strategy = strategy;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 有促销员展示促销活动给用户</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">salesManShow</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        strategy.show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>客户端如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 春节来了，使用春节促销活动</span></span><br><span class="line">        SalesMan salesMan = <span class="keyword">new</span> SalesMan(<span class="keyword">new</span> StrategyA());</span><br><span class="line">        salesMan.salesManShow();</span><br><span class="line">        System.out.println(<span class="string">&quot;==============&quot;</span>);</span><br><span class="line">        salesMan = <span class="keyword">new</span> SalesMan(<span class="keyword">new</span> StrategyB());</span><br><span class="line">        salesMan.salesManShow();</span><br><span class="line">        System.out.println(<span class="string">&quot;==============&quot;</span>);</span><br><span class="line">        salesMan = <span class="keyword">new</span> SalesMan(<span class="keyword">new</span> StrategyC());</span><br><span class="line">        salesMan.salesManShow();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="策略类的优缺点及使用场景">策略类的优缺点及使用场景</h3><p>1.优点</p><ul><li>策略类之间可以自由切换<br>由于策略类都实现同一个接口，所以它们之间可以自由切换。</li><li>易于扩展<br>增加一个新的策略类只需要添加一个具体的策略类即可，基本不需要改变原有的代码，符合开闭原则。</li><li>避免使用多重条件语句（if - else），充分体现面向对象设计思想。</li></ul><p>2.缺点</p><ul><li>客户端必须知道所有的策略类，并自行决定使用哪一个策略类。</li><li>策略模式将造成很多的策略类，可以通过享元模式在一定程度上减少对象的数量。</li></ul><h3 id="使用场景-2">使用场景</h3><ul><li>一个系统需要动态地在几种算法中选择一种时，可将每个算法封装到策略类中。</li><li>一个类定义了多种行为，并且这些行为在这个类的操作中以多个条件语句的形式出现，可将每个分支移入它们各自的策略类中以代替这些条件语句。</li><li>系统中算法彼此完全独立，且要求对客户端隐藏具体的算法实现细节时。</li><li>系统要求使用算法的客户不应该知道其操作的数据时，可使用策略模式来隐藏与算法相关的数据结构。</li><li>多个类只区别表现行为不同，可以使用策略模式，在运行时动态选择具体要执行的行为。</li></ul><h2 id="观察者模式">观察者模式</h2><h3 id="天气预报项目需求">天气预报项目需求</h3><p>天气预报项目需求，具体需求如下：<br>1.气象站可以将每天测量到的温度，湿度，气压等等以公告的形式发布出去（比如发布到自己的网站或第三方）<br>2.需要设计开放型API，便于其他第三方也能接入气象站获取数据<br>3.提供温度，气压和湿度的接口<br>4.测量数据更新时，要能实时的通知给第三方</p><h3 id="普通方案">普通方案</h3><p>WeatherData类<br>通过对气象站项目的分析，我们可以设计出一个WeatherDate类</p><table><thead><tr><th>WeatherData</th></tr></thead><tbody><tr><td>getTemperature</td></tr><tr><td>getHumidity</td></tr><tr><td>getPressure</td></tr><tr><td>dataChange</td></tr></tbody></table><p>说明：<br>通过getXxx方法，可以让第三方接入，并得到相关信息。<br>当数据有更新时，气象站通过调用dataChange()去更新数据，当第三方再次获取时，就能得到最新数据，当然也可以推送。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.observer;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 类是核心</span></span><br><span class="line"><span class="comment"> * 1.包含最新的天气情况信息</span></span><br><span class="line"><span class="comment"> * 2.含有CurrentConditions对象</span></span><br><span class="line"><span class="comment"> * 3.当数据有更新时，就主动的调用CurrentConditions对象的update方法（含display），这样它们接入方就看到最新的消息</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WeatherData</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> temperature;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> pressure;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> humidity;</span><br><span class="line">    <span class="keyword">private</span> CurrentConditions currentConditions;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">WeatherData</span><span class="params">(CurrentConditions currentConditions)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.currentConditions = currentConditions;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">float</span> <span class="title">getTemperature</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> temperature;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">float</span> <span class="title">getPressure</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> pressure;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">float</span> <span class="title">getHumidity</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> humidity;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dataChange</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        currentConditions.update(getTemperature(), getPressure(), getHumidity());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setData</span><span class="params">(<span class="keyword">float</span> temperature, <span class="keyword">float</span> pressure, <span class="keyword">float</span> humidity)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.temperature = temperature;</span><br><span class="line">        <span class="keyword">this</span>.pressure = pressure;</span><br><span class="line">        <span class="keyword">this</span>.humidity = humidity;</span><br><span class="line">        <span class="comment">// 调用dataChange，将最新的消息推送给接入方currentConditions</span></span><br><span class="line">        dataChange();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.observer;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 显示当前天气情况（可以理解成气象站自己的网站）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CurrentConditions</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 温度，气压，湿度</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> temperature;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> pressure;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> humidity;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 更新天气情况，是由WeatherData来调用，使用推送</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">float</span> temperature, <span class="keyword">float</span> pressure, <span class="keyword">float</span> humidity)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.temperature = temperature;</span><br><span class="line">        <span class="keyword">this</span>.pressure = pressure;</span><br><span class="line">        <span class="keyword">this</span>.humidity = humidity;</span><br><span class="line">        display();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;***Today mTemperature:&quot;</span> + temperature + <span class="string">&quot;***&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;***Today mPressure:&quot;</span> + pressure + <span class="string">&quot;***&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;***Today mHumidity:&quot;</span> + humidity + <span class="string">&quot;***&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.observer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WeatherDataTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSetData</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 创建接入方 currentConditions</span></span><br><span class="line">        CurrentConditions currentConditions = <span class="keyword">new</span> CurrentConditions();</span><br><span class="line">       <span class="comment">// 创建WeatherData 并将接入方 currentConditions 传递到 WeatherData 中</span></span><br><span class="line">        WeatherData weatherData = <span class="keyword">new</span> WeatherData(currentConditions);</span><br><span class="line">        weatherData.setData(<span class="number">30</span>, <span class="number">150</span>, <span class="number">40</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/c51ffc969af54fe9b1fa238190690614.png" alt="在这里插入图片描述"></p><ul><li>上述方案存在的问题</li></ul><ol><li>其他第三方接入气象站获取数据的问题</li><li>无法在运行时动态的添加第三方</li><li>违反了OCP原则</li></ol><p>观察者模式原理</p><ul><li><p>观察者模式类似定牛奶业务</p><ul><li>奶站/气象局：Subject</li><li>用户/第三方网站：Observer</li></ul></li><li><p>Subject：登记注册，移除和通知</p></li></ul><ol><li>registerObserver：注册</li><li>removeObserver：移除</li><li>notifyObservers()：通知所有注册的用户，根据不同需求，可以是更新数据，让用户来取，也可以是实施推送，看具体需求决定。</li></ol><p>观察者模式：对象之间多对一依赖的一种设计方案，被依赖的对象为Subject，依赖的对象为Observer，Subject通知Observer变化，比如这里的奶站是Subject，是1的一方，用户是Observer，是多的一方。<br><img src="https://img-blog.csdnimg.cn/80fcdfc2759d4d619cbcb978a6da4b53.png" alt="在这里插入图片描述"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.observer.good;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 让WeatherData实现</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Subject</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerObserver</span><span class="params">(Observer o)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeObserver</span><span class="params">(Observer o)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">notifyObservers</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.observer.good;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 观察者接口，有观察者实现</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Observer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">float</span> temperature, <span class="keyword">float</span> pressure, <span class="keyword">float</span> humidity)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.observer.good;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WeatherData</span> <span class="keyword">implements</span> <span class="title">Subject</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> temperature;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> pressure;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> humidity;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ArrayList&lt;Observer&gt; observers;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">WeatherData</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        observers = <span class="keyword">new</span> ArrayList&lt;Observer&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">float</span> <span class="title">getTemperature</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> temperature;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">float</span> <span class="title">getPressure</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> pressure;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">float</span> <span class="title">getHumidity</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> humidity;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setData</span><span class="params">(<span class="keyword">float</span> temperature, <span class="keyword">float</span> pressure, <span class="keyword">float</span> humidity)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.temperature = temperature;</span><br><span class="line">        <span class="keyword">this</span>.pressure = pressure;</span><br><span class="line">        <span class="keyword">this</span>.humidity = humidity;</span><br><span class="line">        <span class="comment">// 调用dataChange，将最新的消息推送给接入方currentConditions</span></span><br><span class="line">        notifyObservers();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerObserver</span><span class="params">(Observer o)</span> </span>&#123;</span><br><span class="line">        observers.add(o);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeObserver</span><span class="params">(Observer o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (observers.contains(o)) &#123;</span><br><span class="line">            observers.remove(o);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">notifyObservers</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (Observer observer : observers) &#123;</span><br><span class="line">            observer.update(getTemperature(), getPressure(), getHumidity());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.observer.good;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CurrentConditions</span> <span class="keyword">implements</span> <span class="title">Observer</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> temperature;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> pressure;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> humidity;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 更新天气情况，是由WeatherData来调用，使用推送</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">float</span> temperature, <span class="keyword">float</span> pressure, <span class="keyword">float</span> humidity)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.temperature = temperature;</span><br><span class="line">        <span class="keyword">this</span>.pressure = pressure;</span><br><span class="line">        <span class="keyword">this</span>.humidity = humidity;</span><br><span class="line">        display();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;***Today mTemperature:&quot;</span> + temperature + <span class="string">&quot;***&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;***Today mPressure:&quot;</span> + pressure + <span class="string">&quot;***&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;***Today mHumidity:&quot;</span> + humidity + <span class="string">&quot;***&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.observer.good;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SinaWeather</span> <span class="keyword">implements</span> <span class="title">Observer</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> temperature;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> pressure;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> humidity;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 更新天气情况，是由WeatherData来调用，使用推送</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">float</span> temperature, <span class="keyword">float</span> pressure, <span class="keyword">float</span> humidity)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.temperature = temperature;</span><br><span class="line">        <span class="keyword">this</span>.pressure = pressure;</span><br><span class="line">        <span class="keyword">this</span>.humidity = humidity;</span><br><span class="line">        display();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;***新浪 mTemperature:&quot;</span> + temperature + <span class="string">&quot;***&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;***新浪 mPressure:&quot;</span> + pressure + <span class="string">&quot;***&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;***新浪 mHumidity:&quot;</span> + humidity + <span class="string">&quot;***&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.observer;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.example.observer.good.CurrentConditions;</span><br><span class="line"><span class="keyword">import</span> org.example.observer.good.SinaWeather;</span><br><span class="line"><span class="keyword">import</span> org.example.observer.good.WeatherData;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WeatherDataTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSetData</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        CurrentConditions currentConditions = <span class="keyword">new</span> CurrentConditions();</span><br><span class="line">        WeatherData weatherData = <span class="keyword">new</span> WeatherData();</span><br><span class="line">        weatherData.registerObserver(currentConditions);</span><br><span class="line">        weatherData.setData(<span class="number">30</span>, <span class="number">150</span>, <span class="number">40</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;=================&quot;</span>);</span><br><span class="line">        SinaWeather sinaWeather = <span class="keyword">new</span> SinaWeather();</span><br><span class="line">        weatherData.registerObserver(sinaWeather);</span><br><span class="line"></span><br><span class="line">        weatherData.setData(<span class="number">30</span>, <span class="number">150</span>, <span class="number">40</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="适配器模式">适配器模式</h2><h3 id="定义">定义</h3><p>将一个类的接口转换为客户希望的另一个接口，使得原本由于接口不兼容而不能一起工作的类能一起工作。<br>适配器模式分为类适配器模式和对象适配器模式，前者类之间的耦合比后者高，且要求程序员了解现有组件库中的相关组件的内部结构，所以应用相对少点。</p><h3 id="结构-3">结构</h3><p>适配器模式（Adapter）包含以下主要角色：</p><ul><li>目标（Target）接口：当前系统业务所期待的接口，它可以是抽象类或接口。</li><li>适配者（Adaptee）类：它是被访问和适配现存组件库中的组件接口。</li><li>适配器（Adapter）类：它是一个转换器，通过继承或引用适配者的对象，把适配者接口转换为目标接口，让客户按目标接口的格式访问适配者。</li></ul><h3 id="类适配器模式">类适配器模式</h3><p>实现方式：定义一个适配器类来实现当前系统的业务接口，同时又继承现有组件库已经存在的组件。</p><p>【例】读卡器<br>现有一台电脑只能读取SD卡，而要读取TF卡中的内容的话就需要使用到适配器模式，创建一个读卡器，将TF卡的内容读取出来。类图如下：</p><p><img src="https://img-blog.csdnimg.cn/d17035173927465d8eea76eb9402b213.png" alt="在这里插入图片描述"></p><h2 id="对象适配器模式">对象适配器模式</h2><p>实现方式：对象适配器模式可采用将现有组件库中已经实现的组件引入适配器类中，该类同时实现当前系统的业务接口。</p><p>【例】读卡器<br>我们使用对象适配器模式将读卡器的案例进行改写，类图如下：<br><img src="https://img-blog.csdnimg.cn/50fe08ae9fa44ffa954e1f24206e924a.png" alt="在这里插入图片描述"><br>主要修改的是SDAdapterTF类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SDAdapterTF</span> <span class="keyword">implements</span> <span class="title">SDCard</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 声明适配者类</span></span><br><span class="line">    <span class="keyword">private</span> TFCard tfCard;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SDAdapterTF</span><span class="params">(TFCard tfCard)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.tfCard = tfCard;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">readSD</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;adapter read TFCard&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> tfCard.readTF();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">writeSD</span><span class="params">(String msg)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;adapter write TFCard.&quot;</span>);</span><br><span class="line">        tfCard.writeTF(msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>注意：还有一个适配器模式是接口适配器模式，当不希望实现一个接口中所有的方法时，可以创建一个抽象类Adapter，实现所有方法，而此时我们只需要继承该抽象类即可。</p></blockquote><h3 id="应用场景">应用场景</h3><ul><li>以前开发的系统存在满足新系统功能需求的类，但其接口同新系统的接口不一致。</li><li>使用第三方提供的组件，但组件接口定义和自己要求的接口定义不同。</li></ul><h3 id="JDK源码解析">JDK源码解析</h3><p>Reader（字符流）、InputStream（字节流）的适配使用的就是InputStreamReader和OutputStreamWriter。<br>InputStreamReader和OutputStreamWriter分别继承自java.io包中的Reader和Writer，对他们中抽象的未实现的方法给出实现。如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span> <span class="keyword">throws</span> IOException</span>&#123;</span><br><span class="line"><span class="keyword">return</span> sd.read();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">(<span class="keyword">char</span> cbuf[], <span class="keyword">int</span> offset, <span class="keyword">int</span> length)</span> <span class="keyword">throws</span> IOException</span>&#123;</span><br><span class="line"><span class="keyword">return</span> sd.read(cbuf, offset, length);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如上代码中的sd（StreamDecoder类对象），在Sun的JDK实现中，实际的方法实现是对sun.nio.cs.StreamDocoder类的同名方法的调用封装，类结构图如下：</p><h2 id="装饰者模式">装饰者模式</h2><h3 id="概述-2">概述</h3><p>我们先来看一个快餐店的例子。快餐店有炒面，炒饭这些套餐。可以附加额外的鸡蛋，火腿，培根这些蔬菜，当然加配菜需要额外加钱，每个配菜的价钱通常不太一样。那么，计算总价就会显得比较麻烦。</p><p>使用继承的方式存在的问题：</p><ul><li>扩展性不好</li><li>如果要再加一种配料（火腿肠），我们就会发现需要给FriedRice和FriedNoodles分别定义一个子类。如果要新增一个快餐品类的话，就需要定义更多的子类。</li><li>产生过多的子类。</li></ul><p>定义：<br>指在不改变现有对象结构的情况下，动态地给该对象增加一些职责（即增加其额外功能）的模式。</p><h3 id="结构-4">结构</h3><p>装饰（Decorator）模式中的角色：</p><ul><li>抽象构建（Component）角色：定义一个抽象接口以规范准备接收附加责任的对象。</li><li>具体构建（Concrete Component）角色：实现抽象构建，通过装饰角色为其添加一些职责。</li><li>抽象装饰（Decorator）角色：继承或实现抽象构建，并包含具体构建的实例，可以通过其子类扩展具体构建的功能。</li><li>具体装饰（ConcreteDecorator）角色：实现抽象装饰的相关方法，开始具体构建对象添加附加的责任。</li></ul><h3 id="案例">案例</h3><p>我们使用装饰者模式对快餐店案例进行改进，体会装饰者模式的精髓。<br>类图如下：<br><img src="https://img-blog.csdnimg.cn/a8317125a856408295092e2dcfca5b6c.png" alt="在这里插入图片描述"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 快餐类</span></span><br><span class="line"><span class="comment"> * 抽象构件角色</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">FastFood</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> price; <span class="comment">// 价格</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String desc; <span class="comment">// 描述</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FastFood</span><span class="params">(<span class="keyword">float</span> price, String desc)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.price = price;</span><br><span class="line">        <span class="keyword">this</span>.desc = desc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FastFood</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">float</span> <span class="title">getPrice</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPrice</span><span class="params">(<span class="keyword">float</span> price)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.price = price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getDesc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> desc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDesc</span><span class="params">(String desc)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.desc = desc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">float</span> <span class="title">cost</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 炒面</span></span><br><span class="line"><span class="comment"> * 具体的构建角色</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FriedNoodles</span> <span class="keyword">extends</span> <span class="title">FastFood</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FriedNoodles</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(<span class="number">12</span>, <span class="string">&quot;炒面&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">float</span> <span class="title">cost</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getPrice();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 炒饭</span></span><br><span class="line"><span class="comment"> * 具体构件角色</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FriedRice</span> <span class="keyword">extends</span> <span class="title">FastFood</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FriedRice</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(<span class="number">10</span>, <span class="string">&quot;炒饭&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">float</span> <span class="title">cost</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.getPrice();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 装饰者类</span></span><br><span class="line"><span class="comment"> * 抽象装饰者角色</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Garnish</span> <span class="keyword">extends</span> <span class="title">FastFood</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 聚合声明快餐类的变量</span></span><br><span class="line">    <span class="keyword">private</span> FastFood fastFood;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> FastFood <span class="title">getFastFood</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> fastFood;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setFastFood</span><span class="params">(FastFood fastFood)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.fastFood = fastFood;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">float</span> <span class="title">cost</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Garnish</span><span class="params">(<span class="keyword">float</span> price, String desc, FastFood fastFood)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(price, desc);</span><br><span class="line">        <span class="keyword">this</span>.fastFood = fastFood;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 鸡蛋类</span></span><br><span class="line"><span class="comment"> * 具体的装饰者（继承装饰者类）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Egg</span> <span class="keyword">extends</span> <span class="title">Garnish</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Egg</span><span class="params">(FastFood fastFood)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(<span class="number">1</span>, <span class="string">&quot;鸡蛋&quot;</span>, fastFood);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">float</span> <span class="title">cost</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getPrice() + getFastFood().cost();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getDesc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.getDesc() + getFastFood().getDesc();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 培根类</span></span><br><span class="line"><span class="comment"> * 具体的装饰者（继承装饰者类）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Bacon</span> <span class="keyword">extends</span> <span class="title">Garnish</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Bacon</span><span class="params">(FastFood fastFood)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(<span class="number">2</span>, <span class="string">&quot;培根&quot;</span>, fastFood);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">float</span> <span class="title">cost</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getPrice() + getFastFood().cost();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getDesc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.getDesc() + getFastFood().getDesc();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 点一份炒饭</span></span><br><span class="line">        FastFood food = <span class="keyword">new</span> FriedRice();</span><br><span class="line">        System.out.println(food.getDesc() + <span class="string">&quot; &quot;</span> + food.cost() + <span class="string">&quot;元&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;==============&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 在上面的炒饭中加一个鸡蛋</span></span><br><span class="line">        food = <span class="keyword">new</span> Egg(food);</span><br><span class="line">        System.out.println(food.getDesc() + <span class="string">&quot; &quot;</span> + food.cost() + <span class="string">&quot;元&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>好处：</p><ul><li>装饰者模式可以带来比继承更加灵活性的扩展功能，使用更加方便，可以通过组合不同的装饰者对象来获取具有不同行为状态的多样化的结果。装饰者模式比继承更具良好的扩展性，完美地遵循开闭原则，继承是静态的附加责任，装饰者则是动态的附加责任。</li><li>装饰类和被装饰类可以独立发展，不会相互耦合，装饰模式是继承的一个替代模式，装饰模式可以动态拓展一个实现类的功能。</li></ul><h3 id="使用场景-3">使用场景</h3><ul><li>当不能采用继承的方式对系统进行扩充或者采用继承不利于系统扩展和维护时。<br>不能采用继承的情况主要有两类：<ul><li>第一类是系统中存在大量独立的拓展，为支持每一种组合将产生大量的子类，使得子类数目呈爆炸式增长。</li><li>第二类是因为类定义不能继承（如final类）</li></ul></li><li>在不影响其他对象的情况下，以动态，透明的方式给单个对象添加职责。</li><li>当对象的功能要求可以动态地添加，也可以再动态地撤销时。</li></ul><h2 id="外观模式">外观模式</h2><h3 id="概述-3">概述</h3><p>有些人可能炒过股票，但其实大部分人都不太懂，这种没有足够了解证券知识的情况下做股票是很容易亏损的，刚开始炒股票肯定都会想，如果有个懂行的帮帮手该多好，其实基金就是个好帮手，支付宝里就有许多的基金，它将投资者分散的资金集中起来，交由专业的经理人进行管理，投资于股票，债券，外汇等领域，而基金投资的收益归持有者所有，管理机构收取一定比例的托管管理费用。</p><h3 id="定义-2">定义</h3><p>又名门面模式，是一种通过为多个复杂的子系统提供一个一致的接口，而使这些子系统更加容易被访问的模式，该模式对外有一个统一接口，外部应用不用关心内部子系统的具体的细节，这样会大大降低应用程序的复杂度，提高了程序的可维护性。</p><p>外观（Facade）模式是“迪米特法则”的典型应用。</p><h3 id="结构-5">结构</h3><p>外观（Facade）模式包含以下主要角色：</p><ul><li>外观（Facade）角色：为多个子系统对外提供一个共同的接口。</li><li>子系统（Sub System）角色：实现系统的部分功能，客户可以通过外观角色访问它。</li></ul><h3 id="案例-2">案例</h3><p>【例】智能家电控制<br>小明的爷爷已经60岁了，一个人在家生活，每次都需要打开灯，打开电视，打开空调；睡觉时关闭灯，关闭电视，关闭空调；操作起来比较麻烦，所以小明给爷爷买了智能音箱，可以通过语音直接控制这些智能家电的开启和关闭。</p><p><img src="https://img-blog.csdnimg.cn/574ae7e6bf8746f294df21dc0f2bd81c.png" alt="在这里插入图片描述"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 空调类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AirCondition</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">on</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;打开空调....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">off</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;关闭空调....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 电灯类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Light</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 开灯</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">on</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;打开电灯....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 关灯</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">off</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;关闭电灯....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 电视机类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Tv</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">on</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;打开电视机....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">off</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;关闭电视机....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 外观类</span></span><br><span class="line"><span class="comment"> * 主要和该类对象进行交互</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SmartApplicationFacade</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 聚合电灯对象，电视机对象，空调对象</span></span><br><span class="line">    <span class="keyword">private</span> Light light;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Tv tv;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> AirCondition airCondition;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SmartApplicationFacade</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        light = <span class="keyword">new</span> Light();</span><br><span class="line">        tv = <span class="keyword">new</span> Tv();</span><br><span class="line">        airCondition = <span class="keyword">new</span> AirCondition();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 通过语音控制</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">say</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (message.contains(<span class="string">&quot;打开&quot;</span>)) &#123;</span><br><span class="line">            on();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (message.contains(<span class="string">&quot;关闭&quot;</span>)) &#123;</span><br><span class="line">            off();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;听不懂&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">off</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        light.off();</span><br><span class="line">        airCondition.off();</span><br><span class="line">        tv.off();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">on</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        light.on();</span><br><span class="line">        airCondition.on();</span><br><span class="line">        tv.on();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>好处：</p><ul><li>降低了子系统与客户端之间的耦合度，使得子系统的变化不会影响调用它的客户类。</li><li>对客户屏蔽了子系统组件，减少了客户处理的对象数目，并使得子系统使用起来更加容易。</li></ul><p>缺点：</p><ul><li>不符合开闭原则，修改很麻烦</li></ul><h3 id="使用场景-4">使用场景</h3><ul><li>对分层系统构建时，使用外观模式定义子系统中每层的入口点可以简化子系统之间的依赖关系。</li><li>当一个复杂系统的子系统很多时，外观模式可以为系统设计一个简单的接口供外界访问。</li><li>当客户端与多个子系统之间存在很大联系时，引入外观模式可以将它们分离，从而提高子系统的独立性和可移植性。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h1&gt;设计模式&lt;/h1&gt;
&lt;h2 id=&quot;工厂模式&quot;&gt;工厂模式&lt;/h2&gt;
&lt;p&gt;工厂模式也被称为简单工厂，是创建型模式的一种，这种模式提供了按需创建对象的最佳方式，这种设计模式不会对外暴露创建细节，并且会提供一个统一的接口创建对象，例如，机械厂可以生产</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>React基础</title>
    <link href="http://example.com/2023/09/16/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/React%E5%9F%BA%E7%A1%80/"/>
    <id>http://example.com/2023/09/16/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/React%E5%9F%BA%E7%A1%80/</id>
    <published>2023-09-16T06:47:44.000Z</published>
    <updated>2023-09-24T13:11:28.786Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1>React</h1><h2 id="React是什么">React是什么</h2><p>用于构建用户界面的Javascript库。</p><p>如果没有React时，我们写前端页面：</p><ol><li>发送请求获取数据</li><li>处理数据</li><li>操作DOM显示页面</li></ol><p>React是一个将数据渲染为HTML视图的开源Javascript库。</p><h2 id="React是谁开发的">React是谁开发的</h2><p>由Facebook开发</p><h2 id="为什么要学习React">为什么要学习React</h2><ol><li>原生Javascript操作DOM繁琐，效率低（DOM-API操作UI）</li><li>使用Javascript直接操作DOM，浏览器会进行大量的重绘重排。</li><li>原生Javascript没有组件化编码方案，代码复用率低。</li></ol><h2 id="React的特点">React的特点</h2><ol><li>采用组件化模式，声明式编码，提高开发效率及组件复用率。</li><li>在React Native中可以使用React语法进行移动端开发。</li><li>使用虚拟DOM+优秀的Diffing算法，尽量减少与真实DOM的交互。</li></ol><h2 id="创建React项目">创建React项目</h2><p>1、安装 create-react-app</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g create-react-app</span><br></pre></td></tr></table></figure><p>2、检测 create-react-app 是否安装成功</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create-react-app -V</span><br></pre></td></tr></table></figure><p>3、创建 React 项目</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npx create-react-app my-app</span><br><span class="line">cd my-app</span><br><span class="line">npm start</span><br></pre></td></tr></table></figure><h3 id="JSX是什么">JSX是什么</h3><p>JSX是Javascript XML的简写，表示在Javascript代码中写XML代码</p><p>优势：声明式语法更加直观，与HTML结构相同，降低了学习成本，提升开发效率。</p><p>JSX是React的核心内容</p><p>1.使用JSX语法，创建React元素</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用JSX语法，创建React元素</span></span><br><span class="line"><span class="keyword">const</span> title = <span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello JSX<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>2.使用ReactDOM.render()方法创建react元素到页面中</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 渲染创建好的React元素</span></span><br><span class="line">ReactDOM.render(title,root)</span><br></pre></td></tr></table></figure><h3 id="为什么脚手架可以使用JSX语法">为什么脚手架可以使用JSX语法</h3><p>1.JSX不是ECMAScript语法，它是ECMAScript的语法扩展。</p><p>2.需要使用babel编译处理后，才能在浏览器环境中使用。</p><p>3.create-react-app脚手架中已经默认有该配置，无需手动配置。</p><p>4.编译JSX语法的包为：@babel/preset-react</p><h3 id="JSX使用的注意点">JSX使用的注意点</h3><p>1.React元素的属性名使用驼峰命名码。</p><p>2.特殊属性名：class -&gt; className、for -&gt; htmlFor、tabindex -&gt; tabIndex</p><p>3.没有子节点的React元素可以用/&gt;结束</p><p>4.推荐：使用小括号包裹JSX，从而避免JS中的自动插入分号陷阱</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用小括号包裹JSX</span></span><br><span class="line"><span class="keyword">const</span> dv = (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>Hello JSX<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="JSX中使用Javascript表达式">JSX中使用Javascript表达式</h3><p>嵌入JS表达式：</p><ul><li>数据存储在JS中</li><li>语法： { JavaScript表达式 }</li><li>注意：语法中是单大括号</li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> name = <span class="string">&#x27;jack&#x27;</span></span><br><span class="line"><span class="keyword">const</span> dv = (</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>你好，我叫???<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> name = <span class="string">&#x27;jack&#x27;</span></span><br><span class="line"><span class="keyword">const</span> dv = (</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>你好，我叫 &#123;name&#125; <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>注意点</p><ul><li>单大括号中可以使用任意的JavaScript表达式</li><li>JSX自身也是JS表达式</li><li>注意：JS中的对象是一个例外，一般只会出现在style属性中</li><li>注意：不能在{}中出现语句（比如：if/for等）</li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> h1 = <span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>我是JSX<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line">      </span><br><span class="line"><span class="keyword">const</span> dv = (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>嵌入表达式：&#123;h1&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="JSX的条件渲染">JSX的条件渲染</h3><ul><li>loading效果</li><li>条件渲染：根据条件渲染特定的JSX结构</li><li>可以使用if/else或者三元运算符或者逻辑与运算符来实现</li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> isLoading = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> loadData = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(isLoading)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>loading...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>数据加载完成，此处显示加载后的数据<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> title = (</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="xml">        条件渲染：</span></span><br><span class="line"><span class="xml">        &#123;loadData()&#125;</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="JSX的列表渲染">JSX的列表渲染</h3><ul><li>如果要渲染一组数据，应该使用数组的map()方法</li><li>注意：渲染列表时应该添加key属性，key属性的值要保证唯一</li><li>原则：map()遍历谁，就给谁添加key属性</li><li>注意：尽量避免使用索引号作为key</li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> songs = [</span><br><span class="line">    &#123;<span class="attr">id</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">&#x27;痴心绝对&#x27;</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">id</span>: <span class="number">2</span>, <span class="attr">name</span>: <span class="string">&#x27;像我这样的人&#x27;</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">id</span>: <span class="number">3</span>, <span class="attr">name</span>: <span class="string">&#x27;南山南&#x27;</span>&#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> list = (</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml">        &#123;songs.map(item =&gt; <span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&#123;item.id&#125;</span>&gt;</span>&#123;item.name&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span>)&#125;</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="JSX的样式处理">JSX的样式处理</h3><p>1.行内样式 - style</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;h1 style=&#123;&#123;<span class="attr">color</span>: <span class="string">&#x27;red&#x27;</span>, <span class="attr">backgroundColor</span>: <span class="string">&#x27;skyblue&#x27;</span>&#125;&#125;&gt;</span><br><span class="line">JSX的样式处理</span><br><span class="line">&lt;/h1&gt;</span><br></pre></td></tr></table></figure><p>2.类名 - className（推荐）</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;h1 className=<span class="string">&quot;title&quot;</span>&gt;</span><br><span class="line">JSX的样式处理</span><br><span class="line">&lt;/h1&gt;</span><br></pre></td></tr></table></figure><h3 id="React组件基础">React组件基础</h3><ul><li>能够使用函数创建组件</li><li>能够使用class创建组件</li><li>能够给React元素绑定事件</li><li>能够使用state和setState()</li><li>能够处理事件中的this指向问题</li><li>能够使用受控组件方式处理表单</li></ul><h3 id="React组件介绍">React组件介绍</h3><ul><li>组件是React的一等公民，使用React就是在用组件</li><li>组件表示页面中的部分功能</li><li>组合多个组件实现完整的页面功能</li><li>特点：可复用，独立，可组合</li></ul><h3 id="React组件的两种创建方式">React组件的两种创建方式</h3><ul><li>函数组件：使用JS的函数（或者箭头函数）创建的组件</li><li>约定1：函数名称必须以大写字母开头</li><li>约定2：函数组件必须有返回值，表示该组件的结构</li><li>如果返回值为null，表示不渲染任何内容</li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Hello</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>这是我的第一个函数组件！<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>渲染函数组件：用函数名作为组件标签名</li><li>组件标签可以是单标签也可以是双标签</li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Hello</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>这是我的第一个函数组件！<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">Hello</span> /&gt;</span></span>, root)</span><br></pre></td></tr></table></figure><ul><li>使用JS中的函数创建的组件叫做：函数组件</li><li>函数组件必须有返回值</li><li>组件名称必须以大写字母开头，React据此区分组件和普通React元素</li><li>使用函数名作为组件标签名</li></ul><h3 id="使用类创建组件">使用类创建组件</h3><ul><li>类组件：使用ES6的class创建的组件</li><li>约定1：类名称也必须以大写字母开头</li><li>约定2：类组件应该继承React.Component父类，从而可以使用父类中提供的方法或者属性</li><li>约定3：类组件必须提供render()方法</li><li>约定4：render()方法必须有返回值，表示该组件的结构</li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Hello</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">        <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>这是我的第一个类组件<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">Hello</span> /&gt;</span></span>, <span class="built_in">document</span>.getElementById(<span class="string">&#x27;root&#x27;</span>))</span><br></pre></td></tr></table></figure><h3 id="抽离为独立JS文件">抽离为独立JS文件</h3><ul><li>思考：项目中的组件多了以后，该如何组织这些组件呢？</li><li>选择一：将所有组件放在同一个JS文件中</li><li>选择二：将每个组件放在单独的JS文件中</li><li>组件作为一个独立的个体，一般都会放到一个单独的JS文件中</li></ul><p>抽离为独立JS文件：</p><ol><li>创建App.js</li><li>在App.js中导入React</li><li>创建组件（函数或类）</li><li>在App.js中导出该组件</li><li>在index.js中导入App组件</li><li>渲染组件</li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;App&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">header</span> <span class="attr">className</span>=<span class="string">&quot;App-header&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&#123;logo&#125;</span> <span class="attr">className</span>=<span class="string">&quot;App-logo&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;logo&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">          Edit <span class="tag">&lt;<span class="name">code</span>&gt;</span>src/App.js<span class="tag">&lt;/<span class="name">code</span>&gt;</span> and save to reload.</span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">a</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">          <span class="attr">className</span>=<span class="string">&quot;App-link&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">          <span class="attr">href</span>=<span class="string">&quot;https://reactjs.org&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">          <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">          <span class="attr">rel</span>=<span class="string">&quot;noopener noreferrer&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">        &gt;</span></span></span><br><span class="line"><span class="xml">          Learn React</span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">header</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> App;</span><br></pre></td></tr></table></figure><h3 id="React事件处理">React事件处理</h3><ul><li>React事件绑定语法与DOM事件语法相似</li><li>语法：on+事件名称={事件处理程序}，比如：onClick = {() =&gt; {}}</li><li>注意：React事件采用驼峰命名法，比如：onMouseEnter、onFocus</li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">handleClick</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;单击事件触发了&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">        <span class="xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.handleClick&#125;</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>在函数组件中绑定事件</li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">handleClick</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;单击事件触发了&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;handleClick&#125;</span>&gt;</span>点我<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="事件对象">事件对象</h3><ul><li><p>可以通过事件处理程序的参数获取到事件对象</p></li><li><p>React中的事件对象叫做：合成事件（对象）</p></li><li><p>合成事件：兼容所有浏览器，无需担心跨浏览器兼容性问题</p></li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">handleClick</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    e.preventDefault()</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;事件对象&#x27;</span>,e)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;a onClick=&#123;handleClick&#125;&gt;点我，不会跳转页面&lt;/a&gt;</span><br></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./App.css&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">handleClick</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;a标签的单击事件触发了&#x27;</span>)</span><br><span class="line">        e.preventDefault()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://www.baidu.com&quot;</span> <span class="attr">onClick</span>=<span class="string">&#123;handleClick&#125;</span>&gt;</span>百度<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> App;</span><br></pre></td></tr></table></figure><h3 id="有状态组件和无状态组件">有状态组件和无状态组件</h3><ul><li>函数组件又叫做无状态组件，类组件又叫做有状态组件</li><li>状态（state）即数据</li><li>函数组件没有自己的状态，只负责数据展示（静）</li><li>类组件有自己的状态，负责更新UI，让页面动起来</li></ul><p>比如计数器案例，点击按钮让数值加1，0和1就是不同时刻的状态，而由0变为1就表示状态发生了变化，状态变化后，UI也要相应更新，React想要实现该功能，就要使用有状态组件完成。</p><h3 id="组件中的state和setState">组件中的state和setState</h3><p>1.state的基本使用</p><p>2.setState修改状态</p><ul><li>状态即数据，是组件内部的私有数据，只能在组件内部使用</li><li>state的值是对象，表示一个组件中可以有多个数据</li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Hello</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>();</span><br><span class="line">        <span class="built_in">this</span>.state = &#123;</span><br><span class="line">            <span class="attr">count</span>: <span class="number">0</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>有状态组件<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用ES6语法，上述代码可以简化为下面的代码：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Hello</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">    state = &#123;</span><br><span class="line">        <span class="attr">count</span>: <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>有状态组件<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Hello</span><br></pre></td></tr></table></figure><ul><li>获取状态：this.state</li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Hello</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">    state = &#123;</span><br><span class="line">        <span class="attr">count</span>: <span class="number">3</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>有状态组件：&#123;this.state.count&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Hello</span><br></pre></td></tr></table></figure><ul><li>状态即数据</li><li>状态是私有的，只能在组件内部使用</li><li>通过this.state来获取状态</li></ul><h3 id="setState">setState</h3><ul><li>状态是可变的</li><li>语法：this.setState({要修改的数据})</li><li>注意：不要直接修改state中的值，这是错误的</li><li>setState()作用：1.修改state 2.更新UI</li><li>思想：数据驱动视图</li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Hello</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">    state = &#123;</span><br><span class="line">        <span class="attr">count</span>: <span class="number">3</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;this.state.count&#125;</span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="xml">                    this.setState(&#123;</span></span><br><span class="line"><span class="xml">                        count: this.state.count + 1</span></span><br><span class="line"><span class="xml">                    &#125;)</span></span><br><span class="line"><span class="xml">                &#125;&#125;&gt;+1</span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Hello</span><br></pre></td></tr></table></figure><h3 id="从JSX抽离事件处理程序">从JSX抽离事件处理程序</h3><ul><li>JSX中参杂过多JS逻辑代码，会显得非常混乱</li><li>推荐：将逻辑抽离到单独的方法中，保证JSX结构清晰</li></ul><h3 id="事件绑定this指向">事件绑定this指向</h3><p>1.箭头函数</p><p>2.Function.prototype.bind()</p><p>3.class的实例方法</p><h4 id="箭头函数">箭头函数</h4><ul><li>利用箭头函数自身不绑定this的特点</li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Hello</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">    state = &#123;</span><br><span class="line">        <span class="attr">count</span>: <span class="number">3</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">onIncrement</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.setState(&#123;</span><br><span class="line">            <span class="attr">count</span>: <span class="built_in">this</span>.state.count + <span class="number">1</span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="comment">// 箭头函数中的this指向外部环境，此处为render方法</span></span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>有状态组件：&#123;this.state.count&#125;</span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> this.onIncrement()&#125;&gt;+1</span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Hello</span><br></pre></td></tr></table></figure><h4 id="Function-prototype-bind">Function.prototype.bind</h4><ul><li>利用ES5中的bind方法，将事件处理程序中的this与组件实例绑定到一起。</li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Hello</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">    state = &#123;</span><br><span class="line">        <span class="attr">count</span>: <span class="number">3</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>();</span><br><span class="line">        <span class="built_in">this</span>.onIncrement = <span class="built_in">this</span>.onIncrement.bind(<span class="built_in">this</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">onIncrement</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.setState(&#123;</span><br><span class="line">            <span class="attr">count</span>: <span class="built_in">this</span>.state.count + <span class="number">1</span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>有状态组件：&#123;this.state.count&#125;</span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.onIncrement&#125;</span>&gt;</span>+1</span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Hello</span><br></pre></td></tr></table></figure><h4 id="class实例方法">class实例方法</h4><ul><li>利用箭头函数形式的class实例方法</li><li>注意：该语法是实验性语法，但是，由于babel的存在可以直接使用</li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Hello</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">    state = &#123;</span><br><span class="line">        <span class="attr">count</span>: <span class="number">3</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    onIncrement = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.setState(&#123;</span><br><span class="line">            <span class="attr">count</span>: <span class="built_in">this</span>.state.count + <span class="number">1</span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>有状态组件：&#123;this.state.count&#125;</span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.onIncrement&#125;</span>&gt;</span>+1</span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Hello</span><br></pre></td></tr></table></figure><h3 id="事件绑定this指向-2">事件绑定this指向</h3><p>总结：</p><ol><li>推荐：使用class的实例方法</li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Hello</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">    onIncrement = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.setState(&#123;...&#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="React表单处理">React表单处理</h2><ol><li>受控组件</li><li>非受控组件（DOM方式）</li></ol><ul><li>HTML中的表单元素是可输入的，也就是有自己的可变状态</li><li>而，React中可变状态通常保存在state中，并且只能通过setState()方法来修改</li><li>React将state与表单元素值value绑定在一起，由state的值来控制表单元素的值</li><li>受控组件：其值收到React控制的表单元素</li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type=<span class="string">&quot;text&quot;</span> value=&#123;<span class="built_in">this</span>.state.txt&#125; /&gt;</span><br></pre></td></tr></table></figure><h3 id="受控组件">受控组件</h3><p>步骤：</p><ol><li>在state中添加一个状态，作为表单元素的value值（控制表单元素值的来源）</li><li>给表单元素绑定change事件，将表单元素的值设置为state的值（控制表单元素值的变化）</li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">state = &#123; <span class="attr">txt</span>: <span class="string">&#x27;&#x27;</span> &#125; </span><br></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type=<span class="string">&quot;text&quot;</span> value=&#123;<span class="built_in">this</span>.state.txt&#125; /&gt;</span><br></pre></td></tr></table></figure><ol start="2"><li>给表单元素绑定change事件，将表单元素的值设置为state的值（控制表单元素值的变化）</li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type=<span class="string">&quot;text&quot;</span> value=&#123;<span class="built_in">this</span>.state.txt&#125; </span><br><span class="line">onChange=&#123;<span class="function"><span class="params">e</span> =&gt;</span> <span class="built_in">this</span>.setState(&#123;<span class="attr">txt</span>: e.target.value&#125;)&#125;    </span><br><span class="line">/&gt;</span><br></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Hello</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">    state = &#123;</span><br><span class="line">        <span class="attr">txt</span>: <span class="string">&#x27;&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;txt&quot;</span> <span class="attr">value</span>=<span class="string">&#123;this.state.txt&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">                       <span class="attr">onChange</span>=<span class="string">&#123;this.handleChange&#125;/</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    handleChange = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.setState(&#123;</span><br><span class="line">            <span class="attr">txt</span>: e.target.value</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Hello</span><br></pre></td></tr></table></figure><h3 id="受控组件示例">受控组件示例</h3><p>示例：</p><ol><li>文本框，富文本框，下拉框</li><li>复选框</li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Hello</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">    state = &#123;</span><br><span class="line">        <span class="attr">txt</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        <span class="attr">content</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        <span class="attr">city</span>: <span class="string">&#x27;sh&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;txt&quot;</span> <span class="attr">value</span>=<span class="string">&#123;this.state.txt&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">                       <span class="attr">onChange</span>=<span class="string">&#123;this.handleChange&#125;/</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;this.state.txt&#125;</span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span></span><br><span class="line"><span class="xml">                &#123;/*富文本框*/&#125;</span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">value</span>=<span class="string">&#123;this.state.content&#125;</span> <span class="attr">onChange</span>=<span class="string">&#123;this.handleContentChange&#125;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">select</span> <span class="attr">value</span>=<span class="string">&#123;this.state.city&#125;</span> <span class="attr">onChange</span>=<span class="string">&#123;this.handleCity&#125;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;sh&quot;</span>&gt;</span>上海<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;bj&quot;</span>&gt;</span>北京<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;广州&quot;</span>&gt;</span>广州<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    handleChange = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.setState(&#123;</span><br><span class="line">            <span class="attr">txt</span>: e.target.value</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    handleContentChange = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.setState(&#123;</span><br><span class="line">            <span class="attr">content</span>: e.target.value</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    handleCity = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.setState(&#123;</span><br><span class="line">            <span class="attr">city</span>: e.target.value</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Hello</span><br></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Hello</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">    state = &#123;</span><br><span class="line">        <span class="attr">txt</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        <span class="attr">content</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        <span class="attr">city</span>: <span class="string">&#x27;sh&#x27;</span>,</span><br><span class="line">        <span class="attr">isChecked</span>: <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;txt&quot;</span> <span class="attr">value</span>=<span class="string">&#123;this.state.txt&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">                       <span class="attr">onChange</span>=<span class="string">&#123;this.handleChange&#125;/</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;this.state.txt&#125;</span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span></span><br><span class="line"><span class="xml">                &#123;/*富文本框*/&#125;</span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">value</span>=<span class="string">&#123;this.state.content&#125;</span> <span class="attr">onChange</span>=<span class="string">&#123;this.handleContentChange&#125;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">select</span> <span class="attr">value</span>=<span class="string">&#123;this.state.city&#125;</span> <span class="attr">onChange</span>=<span class="string">&#123;this.handleCity&#125;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;sh&quot;</span>&gt;</span>上海<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;bj&quot;</span>&gt;</span>北京<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;广州&quot;</span>&gt;</span>广州<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">checked</span>=<span class="string">&#123;this.state.isChecked&#125;</span> <span class="attr">onChange</span>=<span class="string">&#123;this.handleChecked&#125;/</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    handleChange = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.setState(&#123;</span><br><span class="line">            <span class="attr">txt</span>: e.target.value</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    handleContentChange = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.setState(&#123;</span><br><span class="line">            <span class="attr">content</span>: e.target.value</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    handleCity = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.setState(&#123;</span><br><span class="line">            <span class="attr">city</span>: e.target.value</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    handleChecked = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.setState(&#123;</span><br><span class="line">            <span class="attr">isChecked</span>: e.target.value</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Hello</span><br></pre></td></tr></table></figure><p>示例总结：</p><ol><li>文本框，富文本框，下拉框操作value属性</li><li>复选框操作checked属性</li></ol><h3 id="多表单元素优化">多表单元素优化</h3><ul><li>问题：每个表单元素都有一个单独的事件处理程序太繁琐</li><li>优化：使用一个事件处理程序同时处理多个表单元素</li></ul><p>多表单元素优化步骤：</p><ol><li>给表单元素添加name属性，名称与state相同</li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;input</span><br><span class="line">    type=<span class="string">&quot;text&quot;</span></span><br><span class="line">    name=<span class="string">&quot;txt&quot;</span></span><br><span class="line">    value=&#123;<span class="built_in">this</span>.state.txt</span><br><span class="line">onChange=&#123;<span class="built_in">this</span>.handleForm&#125;          </span><br><span class="line">/&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>要根据表单元素类型获取对应值</li><li>在change事件处理程序中通过[name]来修改对应的state值</li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 根据表单元素类型获取值</span></span><br><span class="line"><span class="keyword">const</span> value = target.type === <span class="string">&#x27;checkbox&#x27;</span></span><br><span class="line">? target.checked</span><br><span class="line">: target.value</span><br><span class="line"></span><br><span class="line"><span class="comment">// 根据name设置对应state</span></span><br><span class="line"><span class="built_in">this</span>.setState(&#123;</span><br><span class="line">    [name]: value</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Hello</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">    state = &#123;</span><br><span class="line">        <span class="attr">txt</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        <span class="attr">content</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        <span class="attr">city</span>: <span class="string">&#x27;sh&#x27;</span>,</span><br><span class="line">        <span class="attr">isChecked</span>: <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;txt&quot;</span> <span class="attr">type</span>=<span class="string">&quot;txt&quot;</span> <span class="attr">value</span>=<span class="string">&#123;this.state.txt&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">                       <span class="attr">onChange</span>=<span class="string">&#123;this.handleChange&#125;/</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;this.state.txt&#125;</span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span></span><br><span class="line"><span class="xml">                &#123;/*富文本框*/&#125;</span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">name</span>=<span class="string">&quot;content&quot;</span> <span class="attr">value</span>=<span class="string">&#123;this.state.content&#125;</span> <span class="attr">onChange</span>=<span class="string">&#123;this.handleChange&#125;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">&quot;city&quot;</span> <span class="attr">value</span>=<span class="string">&#123;this.state.city&#125;</span> <span class="attr">onChange</span>=<span class="string">&#123;this.handleChange&#125;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;sh&quot;</span>&gt;</span>上海<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;bj&quot;</span>&gt;</span>北京<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;gz&quot;</span>&gt;</span>广州<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;isChecked&quot;</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">checked</span>=<span class="string">&#123;this.state.isChecked&#125;</span> <span class="attr">onChange</span>=<span class="string">&#123;this.handleChange&#125;/</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    handleChange = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 获取当前DOM对象</span></span><br><span class="line">        <span class="keyword">const</span> target = e.target</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 根据类型获取值</span></span><br><span class="line">        <span class="keyword">const</span> value = target.type === <span class="string">&#x27;checkbox&#x27;</span></span><br><span class="line">            ? target.checked</span><br><span class="line">            : target.value</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> name = target.name</span><br><span class="line"></span><br><span class="line">        <span class="built_in">this</span>.setState(&#123;</span><br><span class="line">            [name]: value</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Hello</span><br></pre></td></tr></table></figure><h3 id="非受控组件">非受控组件</h3><ul><li>说明：借助ref，使用原生DOM方式来获取表单元素值</li><li>ref的作用：获取DOM组件</li></ul><p>使用步骤：</p><ol><li>调用React.createRef()方法创建一个ref对象</li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">super</span>()</span><br><span class="line">    <span class="built_in">this</span>.txtRef = React.createRef()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>创建好的ref对象添加到文本框中</li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type=<span class="string">&quot;text&quot;</span> ref=&#123;<span class="built_in">this</span>.txtRef&#125; /&gt;</span><br></pre></td></tr></table></figure><ol start="3"><li>通过ref对象获取到文本框的值</li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Console.log(<span class="built_in">this</span>.txtRef.current.value)</span><br></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Hello</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建ref</span></span><br><span class="line">        <span class="built_in">this</span>.txtRef = React.createRef()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">ref</span>=<span class="string">&#123;this.txtRef&#125;/</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.getTxt&#125;</span>&gt;</span>获取文本框的值<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    getTxt = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">this</span>.txtRef.current.value)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Hello</span><br></pre></td></tr></table></figure><p>React组件基础</p><ol><li>组件的两种创建方式：函数组件和类组件</li><li>无状态（函数）组件，负责静态结构显示</li><li>有状态（类）组件，负责更新UI，让页面动起来</li><li>绑定事件注意this指向问题</li><li>推荐使用受控组件来处理表单</li><li>完全利用JS语言的能力创建组件，这是React的思想</li></ol><h2 id="案例：评论列表">案例：评论列表</h2><ul><li>渲染评论列表（列表渲染）</li><li>没有评论列表时渲染：暂无评论（条件渲染）</li><li>获取评论信息，包括评论人和评论内容（受控组件）</li><li>发表评论，更新评论列表（setState()）</li></ul><h3 id="渲染评论列表">渲染评论列表</h3><ol><li>在state中初始化评论列表</li><li>使用数组的map方法遍历state中的列表数据</li><li>给每个被遍历的li元素添加key属性</li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Hello</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    state = &#123;</span><br><span class="line">        <span class="attr">comments</span>: [</span><br><span class="line">            &#123;<span class="attr">id</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">&#x27;jack&#x27;</span>, <span class="attr">content</span>: <span class="string">&#x27;沙发！！！&#x27;</span>&#125;,</span><br><span class="line">            &#123;<span class="attr">id</span>: <span class="number">2</span>, <span class="attr">name</span>: <span class="string">&#x27;rose&#x27;</span>, <span class="attr">content</span>: <span class="string">&#x27;板凳！！！&#x27;</span>&#125;,</span><br><span class="line">            &#123;<span class="attr">id</span>: <span class="number">3</span>, <span class="attr">name</span>: <span class="string">&#x27;tom&#x27;</span>, <span class="attr">content</span>: <span class="string">&#x27;楼主好人！！！&#x27;</span>&#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">className</span>=<span class="string">&quot;user&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入评论人&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">textarea</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">                        <span class="attr">className</span>=<span class="string">&quot;content&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">                        <span class="attr">cols</span>=<span class="string">&quot;30&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">                        <span class="attr">rows</span>=<span class="string">&quot;10&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">                        <span class="attr">placeholder</span>=<span class="string">&quot;请输入评论内容&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">button</span>&gt;</span>发表评论<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;no-comment&quot;</span>&gt;</span>暂无评论，快去评论把~<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        &#123;</span></span><br><span class="line"><span class="xml">                            this.state.comments.map(item =&gt; (</span></span><br><span class="line"><span class="xml">                                <span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&#123;item.id&#125;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                                    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>评论人：&#123;item.name&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="xml">                                    <span class="tag">&lt;<span class="name">p</span>&gt;</span>评论内容：&#123;item.content&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">                                <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">                            ))</span></span><br><span class="line"><span class="xml">                        &#125;</span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Hello</span><br></pre></td></tr></table></figure><h3 id="渲染暂无评论">渲染暂无评论</h3><ol><li>判断列表数据的长度是否为0</li><li>如果为0，则渲染暂无评论</li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Hello</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    state = &#123;</span><br><span class="line">        <span class="attr">comments</span>: [</span><br><span class="line">            &#123;<span class="attr">id</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">&#x27;jack&#x27;</span>, <span class="attr">content</span>: <span class="string">&#x27;沙发！！！&#x27;</span>&#125;,</span><br><span class="line">            &#123;<span class="attr">id</span>: <span class="number">2</span>, <span class="attr">name</span>: <span class="string">&#x27;rose&#x27;</span>, <span class="attr">content</span>: <span class="string">&#x27;板凳！！！&#x27;</span>&#125;,</span><br><span class="line">            &#123;<span class="attr">id</span>: <span class="number">3</span>, <span class="attr">name</span>: <span class="string">&#x27;tom&#x27;</span>, <span class="attr">content</span>: <span class="string">&#x27;楼主好人！！！&#x27;</span>&#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">className</span>=<span class="string">&quot;user&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入评论人&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">textarea</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">                        <span class="attr">className</span>=<span class="string">&quot;content&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">                        <span class="attr">cols</span>=<span class="string">&quot;30&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">                        <span class="attr">rows</span>=<span class="string">&quot;10&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">                        <span class="attr">placeholder</span>=<span class="string">&quot;请输入评论内容&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">button</span>&gt;</span>发表评论<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    &#123;/*通过条件渲染决定渲染什么内容*/&#125;</span></span><br><span class="line"><span class="xml">                    &#123;</span></span><br><span class="line"><span class="xml">                        this.state.comments.length === 0</span></span><br><span class="line"><span class="xml">                            ? (<span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;no-comment&quot;</span>&gt;</span>暂无评论，快去评论把~<span class="tag">&lt;/<span class="name">div</span>&gt;</span>)</span></span><br><span class="line"><span class="xml">                            : (<span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml">                                &#123;</span></span><br><span class="line"><span class="xml">                                    this.state.comments.map(item =&gt; (</span></span><br><span class="line"><span class="xml">                                        <span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&#123;item.id&#125;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                                            <span class="tag">&lt;<span class="name">h3</span>&gt;</span>评论人：&#123;item.name&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="xml">                                            <span class="tag">&lt;<span class="name">p</span>&gt;</span>评论内容：&#123;item.content&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">                                        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">                                    ))</span></span><br><span class="line"><span class="xml">                                &#125;</span></span><br><span class="line"><span class="xml">                            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span>)</span></span><br><span class="line"><span class="xml">                    &#125;</span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Hello</span><br></pre></td></tr></table></figure><p>上面的代码可以简写为：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Hello</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    state = &#123;</span><br><span class="line">        <span class="attr">comments</span>: [</span><br><span class="line">            &#123;<span class="attr">id</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">&#x27;jack&#x27;</span>, <span class="attr">content</span>: <span class="string">&#x27;沙发！！！&#x27;</span>&#125;,</span><br><span class="line">            &#123;<span class="attr">id</span>: <span class="number">2</span>, <span class="attr">name</span>: <span class="string">&#x27;rose&#x27;</span>, <span class="attr">content</span>: <span class="string">&#x27;板凳！！！&#x27;</span>&#125;,</span><br><span class="line">            &#123;<span class="attr">id</span>: <span class="number">3</span>, <span class="attr">name</span>: <span class="string">&#x27;tom&#x27;</span>, <span class="attr">content</span>: <span class="string">&#x27;楼主好人！！！&#x27;</span>&#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">className</span>=<span class="string">&quot;user&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入评论人&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">textarea</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">                        <span class="attr">className</span>=<span class="string">&quot;content&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">                        <span class="attr">cols</span>=<span class="string">&quot;30&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">                        <span class="attr">rows</span>=<span class="string">&quot;10&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">                        <span class="attr">placeholder</span>=<span class="string">&quot;请输入评论内容&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">button</span>&gt;</span>发表评论<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    &#123;/*通过条件渲染决定渲染什么内容*/&#125;</span></span><br><span class="line"><span class="xml">                    &#123;</span></span><br><span class="line"><span class="xml">                        this.renderList()</span></span><br><span class="line"><span class="xml">                    &#125;</span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">renderList</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> &#123;comments&#125; = <span class="built_in">this</span>.state</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (comments.length === <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;no-comment&quot;</span>&gt;</span>暂无评论，快去评论把~<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> (<span class="xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml">            &#123;</span></span><br><span class="line"><span class="xml">                comments.map(item =&gt; (</span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&#123;item.id&#125;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;<span class="name">h3</span>&gt;</span>评论人：&#123;item.name&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;<span class="name">p</span>&gt;</span>评论内容：&#123;item.content&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">                ))</span></span><br><span class="line"><span class="xml">            &#125;</span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Hello</span><br></pre></td></tr></table></figure><h3 id="获取评论信息">获取评论信息</h3><ol><li>使用受控组件方式处理表单元素</li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Hello</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    state = &#123;</span><br><span class="line">        <span class="attr">comments</span>: [</span><br><span class="line">            &#123;<span class="attr">id</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">&#x27;jack&#x27;</span>, <span class="attr">content</span>: <span class="string">&#x27;沙发！！！&#x27;</span>&#125;,</span><br><span class="line">            &#123;<span class="attr">id</span>: <span class="number">2</span>, <span class="attr">name</span>: <span class="string">&#x27;rose&#x27;</span>, <span class="attr">content</span>: <span class="string">&#x27;板凳！！！&#x27;</span>&#125;,</span><br><span class="line">            &#123;<span class="attr">id</span>: <span class="number">3</span>, <span class="attr">name</span>: <span class="string">&#x27;tom&#x27;</span>, <span class="attr">content</span>: <span class="string">&#x27;楼主好人！！！&#x27;</span>&#125;</span><br><span class="line">        ],</span><br><span class="line"></span><br><span class="line">        <span class="attr">userName</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line"></span><br><span class="line">        <span class="attr">userContent</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">className</span>=<span class="string">&quot;user&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入评论人&quot;</span> <span class="attr">value</span>=<span class="string">&#123;this.state.userName&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">                           <span class="attr">name</span>=<span class="string">&quot;userName&quot;</span> <span class="attr">onChange</span>=<span class="string">&#123;this.handleForm&#125;/</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">textarea</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">                        <span class="attr">className</span>=<span class="string">&quot;content&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">                        <span class="attr">cols</span>=<span class="string">&quot;30&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">                        <span class="attr">rows</span>=<span class="string">&quot;10&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">                        <span class="attr">value</span>=<span class="string">&#123;this.state.userContent&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">                        <span class="attr">name</span>=<span class="string">&quot;userContent&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">                        <span class="attr">placeholder</span>=<span class="string">&quot;请输入评论内容&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">                        <span class="attr">onChange</span>=<span class="string">&#123;this.handleForm&#125;/</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">button</span>&gt;</span>发表评论<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    &#123;/*通过条件渲染决定渲染什么内容*/&#125;</span></span><br><span class="line"><span class="xml">                    &#123;</span></span><br><span class="line"><span class="xml">                        this.renderList()</span></span><br><span class="line"><span class="xml">                    &#125;</span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">renderList</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> &#123;comments&#125; = <span class="built_in">this</span>.state</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (comments.length === <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;no-comment&quot;</span>&gt;</span>暂无评论，快去评论把~<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> (<span class="xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml">            &#123;</span></span><br><span class="line"><span class="xml">                comments.map(item =&gt; (</span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&#123;item.id&#125;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;<span class="name">h3</span>&gt;</span>评论人：&#123;item.name&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;<span class="name">p</span>&gt;</span>评论内容：&#123;item.content&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">                ))</span></span><br><span class="line"><span class="xml">            &#125;</span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    handleForm = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123;name, value&#125; = e.target</span><br><span class="line">        <span class="built_in">this</span>.setState(&#123;</span><br><span class="line">            [name]: value</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Hello</span><br></pre></td></tr></table></figure><h3 id="发表评论">发表评论</h3><ol><li>给按钮绑定单击事件</li><li>在事件处理过程中，通过state获取评论信息</li><li>将评论信息添加到state中，并调用setState()方法更新state</li><li>边界情况：清空文本框</li><li>边界情况：非空判断</li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Hello</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    state = &#123;</span><br><span class="line">        <span class="attr">comments</span>: [],</span><br><span class="line"></span><br><span class="line">        <span class="attr">userName</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line"></span><br><span class="line">        <span class="attr">userContent</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">className</span>=<span class="string">&quot;user&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入评论人&quot;</span> <span class="attr">value</span>=<span class="string">&#123;this.state.userName&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">                           <span class="attr">name</span>=<span class="string">&quot;userName&quot;</span> <span class="attr">onChange</span>=<span class="string">&#123;this.handleForm&#125;/</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">textarea</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">                        <span class="attr">className</span>=<span class="string">&quot;content&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">                        <span class="attr">cols</span>=<span class="string">&quot;30&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">                        <span class="attr">rows</span>=<span class="string">&quot;10&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">                        <span class="attr">value</span>=<span class="string">&#123;this.state.userContent&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">                        <span class="attr">name</span>=<span class="string">&quot;userContent&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">                        <span class="attr">placeholder</span>=<span class="string">&quot;请输入评论内容&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">                        <span class="attr">onChange</span>=<span class="string">&#123;this.handleForm&#125;/</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.addComment&#125;</span>&gt;</span>发表评论<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    &#123;/*通过条件渲染决定渲染什么内容*/&#125;</span></span><br><span class="line"><span class="xml">                    &#123;</span></span><br><span class="line"><span class="xml">                        this.renderList()</span></span><br><span class="line"><span class="xml">                    &#125;</span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">renderList</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> &#123;comments&#125; = <span class="built_in">this</span>.state</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (comments.length === <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;no-comment&quot;</span>&gt;</span>暂无评论，快去评论把~<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> (<span class="xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml">            &#123;</span></span><br><span class="line"><span class="xml">                comments.map(item =&gt; (</span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&#123;item.id&#125;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;<span class="name">h3</span>&gt;</span>评论人：&#123;item.name&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;<span class="name">p</span>&gt;</span>评论内容：&#123;item.content&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">                ))</span></span><br><span class="line"><span class="xml">            &#125;</span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    handleForm = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123;name, value&#125; = e.target</span><br><span class="line">        <span class="built_in">this</span>.setState(&#123;</span><br><span class="line">            [name]: value</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    addComment = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123;comments, userName, userContent&#125; = <span class="built_in">this</span>.state</span><br><span class="line">        <span class="keyword">if</span> (userName.trim() === <span class="string">&#x27;&#x27;</span> || userContent.trim() === <span class="string">&#x27;&#x27;</span>) &#123;</span><br><span class="line">            alert(<span class="string">&#x27;请输入评论人和评论内容&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">const</span> newComments = [&#123;</span><br><span class="line">            <span class="attr">id</span>: <span class="built_in">Math</span>.random(),</span><br><span class="line">            <span class="attr">name</span>: userName,</span><br><span class="line">            <span class="attr">content</span>: userContent</span><br><span class="line">        &#125;, ...comments]</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 文本框的值如何清空</span></span><br><span class="line">        <span class="built_in">this</span>.setState(&#123;</span><br><span class="line">            <span class="attr">comments</span>: newComments,</span><br><span class="line">            <span class="attr">userName</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">            <span class="attr">userContent</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Hello</span><br></pre></td></tr></table></figure><h2 id="React组件进阶">React组件进阶</h2><ul><li>能够使用props接收数据</li><li>能够实现父子组件之间的通讯</li><li>能够实现兄弟组件之间的通讯</li><li>能够给组件添加props校验</li><li>能够说出声明周期常用的钩子函数</li><li>能够知道高阶组件的作用</li></ul><h3 id="组件通讯介绍">组件通讯介绍</h3><p>组件是独立且封闭的单元，默认情况下，只能使用组件自己的数据，在组件化的过程中，我们将一个完整的功能拆分成多个组件，以更好的完成整个应用的功能。而这个过程中，多个组件之间不可避免的要共享某些数据，为了实现这些功能，就要打破组件的独立封闭性，让其与外界沟通。这个过程就是组件通讯。</p><h3 id="组件的props">组件的props</h3><ul><li>组件是封闭的，要接收外部数据应该通过props来实现</li><li>props的作用：接收传递给组件的数据</li><li>传递数据：给组件标签添加属性</li><li>接收数据：函数组件通过参数props接收数据，类组件通过this.props接收数据</li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;Hello name=<span class="string">&quot;jack&quot;</span> age=&#123;<span class="number">19</span>&#125; /&gt;</span><br></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Hello</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(props)</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>接收到数据：&#123;props.name&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Hello</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">        <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>接收到的数据：&#123;this.props.age&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;Hello name=<span class="string">&quot;jack&quot;</span> age=&#123;<span class="number">19</span>&#125; /&gt;</span><br></pre></td></tr></table></figure><h3 id="组件的props-2">组件的props</h3><p>特点：</p><ol><li>可以给组件传递任意类型的数据</li><li>props是只读的对象，只能读取属性的值，无法修改对象</li><li>注意：使用类组件时，如果写了构造函数，应该将props传递给super()，否则无法在构造函数中获取到props。</li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> ReactDOM <span class="keyword">from</span> <span class="string">&#x27;react-dom/client&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./index.css&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> Hello <span class="keyword">from</span> <span class="string">&quot;./Hello&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> reportWebVitals <span class="keyword">from</span> <span class="string">&#x27;./reportWebVitals&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> root = ReactDOM.createRoot(<span class="built_in">document</span>.getElementById(<span class="string">&#x27;root&#x27;</span>));</span><br><span class="line">root.render(</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">React.StrictMode</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">Hello</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">            <span class="attr">name</span>=<span class="string">&quot;jack&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">            <span class="attr">age</span>=<span class="string">&#123;19&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">            <span class="attr">colors</span>=<span class="string">&#123;[</span>&#x27;<span class="attr">red</span>&#x27;, &#x27;<span class="attr">green</span>&#x27;, &#x27;<span class="attr">blue</span>&#x27;]&#125;</span></span></span><br><span class="line"><span class="tag"><span class="xml">            <span class="attr">fn</span>=<span class="string">&#123;()</span> =&gt;</span> console.log(&#x27;这是一个函数&#x27;)&#125;</span></span><br><span class="line"><span class="xml">            tag=&#123;<span class="tag">&lt;<span class="name">p</span>&gt;</span>这是一个p标签<span class="tag">&lt;/<span class="name">p</span>&gt;</span>&#125;</span></span><br><span class="line"><span class="xml">        /&gt;</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">React.StrictMode</span>&gt;</span></span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// If you want to start measuring performance in your app, pass a function</span></span><br><span class="line"><span class="comment">// to log results (for example: reportWebVitals(console.log))</span></span><br><span class="line"><span class="comment">// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals</span></span><br><span class="line">reportWebVitals();</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Hello</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">h1</span>&gt;</span> props: &#123;this.props.name&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">h1</span>&gt;</span> props: &#123;this.props.age&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="xml">                &#123;this.props.tag&#125;</span></span><br><span class="line"><span class="xml">                &#123;this.props.fn()&#125;</span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Hello</span><br></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Hello</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>();</span><br><span class="line">        <span class="comment">// 拿不到构造函数</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">this</span>.props)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">h1</span>&gt;</span> props: &#123;this.props.name&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">h1</span>&gt;</span> props: &#123;this.props.age&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="xml">                &#123;this.props.tag&#125;</span></span><br><span class="line"><span class="xml">                &#123;this.props.fn()&#125;</span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Hello</span><br></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Hello</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 这样就可以拿到了</span></span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">props</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(props);</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">this</span>.props)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">h1</span>&gt;</span> props: &#123;this.props.name&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">h1</span>&gt;</span> props: &#123;this.props.age&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="xml">                &#123;this.props.tag&#125;</span></span><br><span class="line"><span class="xml">                &#123;this.props.fn()&#125;</span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Hello</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h1&gt;React&lt;/h1&gt;
&lt;h2 id=&quot;React是什么&quot;&gt;React是什么&lt;/h2&gt;
&lt;p&gt;用于构建用户界面的Javascript库。&lt;/p&gt;
&lt;p&gt;如果没有React时，我们写前端页面：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;发送请求获取数据&lt;/li&gt;
&lt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>typescript</title>
    <link href="http://example.com/2023/09/04/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/typescript/"/>
    <id>http://example.com/2023/09/04/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/typescript/</id>
    <published>2023-09-04T11:48:24.000Z</published>
    <updated>2023-09-16T06:46:45.254Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h2 id="typescript介绍">typescript介绍</h2><h3 id="typescript是什么">typescript是什么</h3><p>Typescript是Javascript的超集</p><p>TypeScript=Type+JavaScript（在JS基础之上，为JS添加了类型支持）</p><p>TypeScript是微软开发的开源编程语言，可以在任何运行JS的地方运行</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Typescript 代码：有明确的类型，即number（数值类型）</span></span><br><span class="line"><span class="keyword">let</span> age1 : <span class="built_in">number</span> = <span class="number">18</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Javascript代码：无明确类型</span></span><br><span class="line"><span class="keyword">let</span> age2 = <span class="number">18</span></span><br></pre></td></tr></table></figure><h3 id="TypeScript为什么要为JS添加类型支持">TypeScript为什么要为JS添加类型支持</h3><p>背景：JS 的类型系统存在先天缺陷，JS代码中绝大部分错误都是类型错误。</p><p>问题：增加了找BUG，改BUG的时间，严重影响开发效率</p><p>从编程语言的动静来区分，TypeScript属于静态类型的编程语言，JS属于动态类型的编程语言。</p><p>静态类型：编译期做类型检查；动态类型：执行期做类型检查。</p><p>代码编译和代码执行顺序：1.编译 2.执行</p><p>对于JS来说：需要等到代码真正去执行时才能发现错误</p><p>对于TS来说：在代码编译的时候就可以发现错误。</p><p>并且，配合VSCode等开发工具，TS可以提前到在编写代码的同时就发现代码中的错误，减少找BUG，改BUG的时间。</p><h3 id="TypeScript相比JS的优点">TypeScript相比JS的优点</h3><p>1.更早发现错误，减少找BUG，改BUG的时间，提升开发效率。</p><p>2.程序中任何位置的代码都有代码提示，随时随地的安全感，增强了开发体验。</p><p>3.强大的类型系统提升了代码的可维护性，使得重构代码更加容易。</p><p>4.支持最新的ECMAScript语法，优先体验最新的语法，让你走到前端技术的最前沿。</p><p>5.TS类型推断机制，不需要在代码中的每个地方都显示标注类型，让你在享受优势的同时，尽量降低了成本。</p><p>除此之外，Vue3源码使用TS重写，React与TS完美融合。</p><h3 id="Typescript初体验">Typescript初体验</h3><h4 id="安装编译TS的工具包">安装编译TS的工具包</h4><p>问题：为什么安装编译TS的工具包？</p><p>回答：Node.js/浏览器，只认识JS代码，不认识TS代码。需要将TS代码先转化为JS代码，然后才能运行。</p><p>安装命令如下：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -g typescript</span><br></pre></td></tr></table></figure><p>typescript包：用来编译TS代码的包，提供了tsc命令，实现了TS -&gt; JS的转化。</p><p>验证是否安装成功，</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tsc -v</span><br></pre></td></tr></table></figure><p><img src="C:%5CUsers%5C86185%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20230904201130675.png" alt="image-20230904201130675"></p><h4 id="编译并运行TS代码">编译并运行TS代码</h4><p>1.创建Hello.ts文件（注意：TS文件的后缀名为.ts）。</p><p>2.将TS编译为JS：在终端中输入命令，tsc hello.ts（此时，在同级目录中会出现一个同名的JS文件）。</p><p>3.执行JS代码：在终端中输入命令，node hello.js</p><p>说明：所有合法的JS代码都是TS代码，有JS基础只需要学习TS的类型即可。</p><p>注意：由TS编译生成的JS文件，代码中就没有类型信息了。</p><h4 id="练习">练习</h4><p>创建hello.ts</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;hello ts&#x27;</span>)</span><br></pre></td></tr></table></figure><p>利用Typescript编译typescript代码：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tsc hello.ts</span><br></pre></td></tr></table></figure><p>运行JS代码</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node hello.js</span><br></pre></td></tr></table></figure><p>新增如下语句：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;hello js&#x27;</span>)</span><br><span class="line"><span class="keyword">let</span> age : <span class="built_in">number</span> = <span class="number">18</span></span><br><span class="line"><span class="built_in">console</span>.log(age)</span><br></pre></td></tr></table></figure><p>用tsc编译后生成JS代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;hello js&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> age = <span class="number">18</span>;</span><br><span class="line"><span class="built_in">console</span>.log(age);</span><br></pre></td></tr></table></figure><h3 id="简化运行Typescript的步骤">简化运行Typescript的步骤</h3><p>问题描述：每次修改代码后，都要重复执行两个命令，才能运行TS代码，太繁琐。</p><p>简化方式：使用ts-node包，直接在Node.js中执行TS代码。</p><p>安装命令:</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -g ts-node</span><br></pre></td></tr></table></figure><p>（ts-node包提供了ts-node命令）</p><p>使用方式：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ts-node hello.ts</span><br></pre></td></tr></table></figure><p>解释：ts-node命令在内部偷偷将TS转化为JS，然后再运行JS代码。</p><h3 id="Typescript常用类型">Typescript常用类型</h3><p>Typescript是JS的超集，TS提供了JS所有功能，并且额外增加了：类型系统。</p><ul><li>所有JS代码都是TS代码</li><li>JS有类型（比如，number/string等）但是JS不会检查变量的类型是否发生变化。而TS会检查。TypeScript类型系统的主要优势：可以显示标记出代码中的意外行为，从而降低了发生错误的可能性。</li></ul><p>1.类型注解</p><p>2.常用基础类型</p><h3 id="TypeScript常用类型">TypeScript常用类型</h3><p>3.1类型注解</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> age : <span class="built_in">number</span> = <span class="number">18</span></span><br></pre></td></tr></table></figure><p>说明：代码中的 ：number就是类型注解</p><p>作用：为变量添加类型约束。比如，上述代码中，约定变量age的类型为number（数值类型）</p><p>解释：约定了什么类型，就只能给变量赋值该类型的值，否则就会报错。</p><h3 id="Typescript常用类型-2">Typescript常用类型</h3><p>3.2 常用类型概述</p><p>可以将TS常用的基础类型细分为两类：1.JS已有类型2.TS新增类型</p><p>1.JS已有类型</p><ul><li>原始类型：number/string/boolean/null/undefined/symbol</li><li>对象类型：object（包括，数组，对象，函数等对象）</li></ul><p>2.TS新增类型</p><ul><li>联合类型，自定义类型（类型别名），接口，元组，字面量类型，枚举，void，any等</li></ul><h3 id="Typescript常用类型-3">Typescript常用类型</h3><p>1.原始类型：number/string/boolean/null/undefined/symbol</p><p>特点：简单，这个类型，完全按照JS中类型的名称来书写。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> age : <span class="built_in">number</span> = <span class="number">18</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> myName : <span class="built_in">string</span> = <span class="string">&#x27;刘老师&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> isLoading : <span class="built_in">boolean</span> = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> a : <span class="literal">null</span> = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> b : <span class="literal">undefined</span> = <span class="literal">undefined</span></span><br></pre></td></tr></table></figure><h4 id="数组类型">数组类型</h4><p>2.对象类型：object（包括，数组，对象，函数等对象）</p><p>特点：对象类型，在TS中更加细化，每个具体的对象都有自己的类型语法。</p><ul><li>数组类型的两种写法：（推荐使用number[]写法）</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> numbers : <span class="built_in">number</span>[] = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>]</span><br><span class="line"><span class="keyword">let</span> strings : <span class="built_in">Array</span>&lt;<span class="built_in">string</span>&gt; = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>]</span><br></pre></td></tr></table></figure><p>需求：数组中既有number类型，又有string类型，这个数组的类型应该如何写？</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr : (<span class="built_in">number</span> | <span class="built_in">string</span>)[] = [<span class="number">1</span>, <span class="string">&#x27;a&#x27;</span>, <span class="number">3</span>, <span class="string">&#x27;b&#x27;</span>]</span><br></pre></td></tr></table></figure><p>解释：|（竖线）在TS中叫做联合类型（由两个或者多个其他类型组成的类型，表示可以是这些类型中的任意一种）</p><p>注意：这是TS中联合类型的语法，只有一根竖线，不要与JS中的或（||）混淆了。</p><h3 id="类型别名">类型别名</h3><p>类型别名（自定义类型）：为任意类型起别名。</p><p>使用场景：当同一类型（复杂）被多次使用时，可以通过类型别名，简化该类型的使用。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> CustomArray = (<span class="built_in">number</span> | <span class="built_in">string</span>)[]</span><br><span class="line"><span class="keyword">let</span> arr1 : CustomArray = [<span class="number">1</span>, <span class="string">&#x27;a&#x27;</span>, <span class="number">3</span>, <span class="string">&#x27;b&#x27;</span>]</span><br><span class="line"><span class="keyword">let</span> arr2 : CustomArray = [<span class="string">&#x27;x&#x27;</span>, <span class="string">&#x27;y&#x27;</span>, <span class="number">6</span>, <span class="number">7</span>]</span><br></pre></td></tr></table></figure><p>解释：</p><p>1.使用type关键字来创建类型别名。</p><p>2.类型别名（比如，此处的CustomArray），可以是任意合法的变量名称。</p><p>3.创建类型别名后，直接使用该类型别名作为变量的类型注解即可。</p><h3 id="函数类型">函数类型</h3><p>函数的类型实际上指的是：函数参数和返回值类型。</p><p>为函数指定类型的两种方式：1.单独指定参数，返回值的类型 2.同时指定参数，返回值的类型</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">num1 : <span class="built_in">number</span>,num2 : <span class="built_in">number</span></span>): <span class="title">number</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> num1 + num2</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> add = (num1 : <span class="built_in">number</span>,<span class="attr">num2</span> : <span class="built_in">number</span>): <span class="function"><span class="params">number</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> num1 + num2</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同时指定参数，返回值的类型</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> add: <span class="function">(<span class="params">num1: <span class="built_in">number</span>, num2: <span class="built_in">number</span></span>) =&gt;</span> <span class="built_in">number</span> = <span class="function">(<span class="params">num1, num2</span>) =&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> num1 + num2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解释：当函数作为表达式时，可以通过类似箭头函数形式的语法来为函数添加类型。</p><p>注意：这种形式只适用于函数表达式。</p><h4 id="void">void</h4><p>如果函数没有返回值，那么，函数返回值类型为：void</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">greet</span>(<span class="params">name: <span class="built_in">string</span></span>): <span class="title">void</span></span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;hello&#x27;</span>, name)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="函数类型-2">函数类型</h3><p>使用函数实现某个功能时，参数可以传也可以不传。这种情况下，在给函数参数指定类型时，就可以用到可选参数了。</p><p>比如，数组的slice方法，可以slice()也可以slice(1)还可以slice(1,3)</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mySlice</span>(<span class="params">start?: <span class="built_in">number</span>, end?: <span class="built_in">number</span></span>): <span class="title">void</span></span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;起始索引: &#x27;</span>,start, <span class="string">&#x27;结束索引: &#x27;</span>, end)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可选参数：在可传可不传的参数名称后面添加？(问号)</p><p>注意：可选参数只能出现在参数列表的最后，也就是说可选参数后面不能再出现必选参数。</p><h3 id="对象类型">对象类型</h3><p>JS中的对象是由属性和方法构成的，而TS中对象的类型就是在描述对象的结构（有什么类型的属性和方法）。</p><p>对象类型的写法：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> person: &#123; <span class="attr">name</span>: <span class="built_in">string</span>; age: <span class="built_in">number</span>; sayHi(): <span class="built_in">void</span> &#125; = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;jack&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">19</span>,</span><br><span class="line">    <span class="function"><span class="title">sayHi</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解释：</p><p>1.直接使用{}来描述对象结构。属性采用属性名：类型的形式；方法采用方法名():返回值类型的形式。</p><p>2.如果方法有参数，就在方法名后面的小括号中指定参数类型（比如：greet(name: string)）。</p><p>3.在一行代码中指定对象的多个属性类型时，使用;（分号）来分隔。</p><ul><li>如果一行代码只指定一个属性类型（通过换行来分隔多个属性类型），可以去掉；（分号）</li><li>方法的类型也可以使用箭头函数形式（比如：{sayHi: ()=&gt;void}）</li></ul><h4 id="可选属性">可选属性</h4><p>对象的属性或方法，也可以是可选的，此时就用到可选属性了。</p><p>比如，我们在使用axios({…})时，如果发送GET请求，method属性就可以忽略。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myAxios</span>(<span class="params">config: &#123;url: <span class="built_in">string</span>; method?: <span class="built_in">string</span>&#125;</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(config)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可选属性的语法与函数可选参数的语法一致，都使用？(问号)表示。</p><p>调用的时候，我们就只需要传入url属性即可。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">myAxios(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;&#x27;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="接口">接口</h4><p>当一个对象类型被多次使用时，一般会使用接口来描述对象的类型，达到复用的目的。</p><p>解释：</p><ol><li>使用interface关键字来声明接口。</li><li>接口名称（比如，此处的IPerson），可以是任意合法的变量名称。</li><li>声明接口后，直接使用接口名称作为变量的类型。</li><li>因为每一行只有一个属性类型，因此，属性类型后没有分号；（分号）</li></ol><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> person: IPerson = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;jack&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">19</span>,</span><br><span class="line">    <span class="function"><span class="title">sayHi</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> IPerson&#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span>; age: <span class="built_in">number</span>; sayHi(): <span class="built_in">void</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="接口和类型别名">接口和类型别名</h4><p>interface（接口）和type（类型别名）的对比：</p><ul><li>相同点：都可以给对象指定类型</li><li>不同点<ul><li>接口，只能为对象指定类型</li><li>类型别名，不仅可以为对象指定类型，实际上可以为任意类型指定别名。</li></ul></li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> IPerson&#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span>; age: <span class="built_in">number</span>; sayHi(): <span class="built_in">void</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> IPerson&#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span>; age: <span class="built_in">number</span>; sayHi(): <span class="built_in">void</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="接口继承">接口继承</h4><p>如果两个接口之间有相同的属性或者方法，可以将公共的属性或者方法抽离出来，通过继承来实现复用。</p><p>比如，这两个接口都有x，y两个属性，重复写两次，可以，但很繁琐。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Point2D</span></span>&#123;x: number; y: number&#125;</span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Point3D</span></span>&#123;x: number; y: number; z: number&#125;</span><br></pre></td></tr></table></figure><p>更好的方式：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Point2D&#123;x: <span class="built_in">number</span>; y: <span class="built_in">number</span>&#125;</span><br><span class="line"><span class="keyword">interface</span> Point3D <span class="keyword">extends</span> Point2D &#123;z: <span class="built_in">number</span>&#125;</span><br></pre></td></tr></table></figure><p>解释：</p><p>1.使用extends（继承）关键字实现了接口Point3D继承Point2D</p><p>2.继承后，Point3D就有了Point2D的所有属性和方法。（此时，Point3D同时有x，y，z三个属性）</p><h3 id="元组">元组</h3><p>场景：在地图中，使用经纬度坐标来标记位置信息。</p><p>可以使用数组来记录坐标，那么，该数组中只有两个元素，并且这两个元素都是数值类型。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> position: <span class="built_in">number</span>[] = [<span class="number">39.5427</span>, <span class="number">116.2317</span>]</span><br></pre></td></tr></table></figure><p>使用number[] 的缺点：不严谨，因为该类型的数组中可以出现任意多个数字。</p><p>更好的方式：元组（Tuple）。</p><p>元组类型是另一种类型的数组，它确切的知道包含多少个元素，以及特定索引对应的类型。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> position: [<span class="built_in">number</span>, <span class="built_in">number</span>] = [<span class="number">39.5427</span>, <span class="number">116.2317</span>]</span><br></pre></td></tr></table></figure><p>解释：</p><p>1.元组类型可以确切地标记出有多少个元素，以及每个元素的类型</p><p>2.该实例中，元素有两个元素，每个元素的类型都是number。</p><h3 id="类型推论">类型推论</h3><p>在TS中，某些没有指出类型的地方，TS的类型推论机制会帮助提供类型。</p><p>换句话说：由于类型推论的存在，这些地方，类型注解可以省略不写！</p><p>发生类型推论的2种常见场景：1.声明变量并初始化时 2.决定函数返回值时。</p><p>注意：这两种情况下，类型注释可以省略不写。</p><p>推荐：能省略类型注解的地方就省略。</p><h3 id="类型断言">类型断言</h3><p>有时候，你会比TS更加明确一个值的类型，此时，你可以使用类型断言来指定更具体的类型。</p><p>比如</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://www.itcast.cn/&quot;</span> <span class="attr">id</span>=<span class="string">&quot;link&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> aLink = <span class="built_in">document</span>.getElementById(<span class="string">&quot;link&quot;</span>)</span><br></pre></td></tr></table></figure><p>此时，会发现aLink的类型是<code>HTMLElement</code>，该类型只包含所有标签公共的属性或者方法。不包含a标签特有的href属性。</p><p>因此，这个类型太宽泛（不具体），无法操作href等a标签特有的属性或者方法。</p><p>解决方式：这种情况下就需要使用类型断言指定更具体地类型。</p><h3 id="字面量类型">字面量类型</h3><p>思考以下代码，两个变量的类型分别是什么？</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str1 = <span class="string">&#x27;hello TS&#x27;</span></span><br><span class="line"><span class="keyword">const</span> str2 = <span class="string">&#x27;hello TS&#x27;</span></span><br></pre></td></tr></table></figure><p>通过TS类型推论机制，可以得到答案：</p><p>1.变量str1的类型为：string。</p><p>2.变量str2的类型为：‘Hello TS’。</p><p>解释：</p><ol><li>str1是一个变量（let），它的值可以是任意字符串，所以类型为：string。</li><li>str2是一个常量（const），它的值不能变化只能是’Hello TS’，所以，它的类型为：‘Hello TS’。</li></ol><p>注意：此处的’Hello TS’，就是一个字面量类型。也就是说某个特定的字符串也可以作为TS中的类型。</p><p>除字符串外，任意的JS字面量（比如，对象，数字等）都可以作为类型使用</p><h4 id="字面量类型的使用场景">字面量类型的使用场景</h4><p>使用模式：字面量类型配合联合类型一起使用。</p><p>使用场景：用来表示一组明确的可选值列表。</p><p>比如：在贪吃蛇游戏中，游戏的方向的可选值只能是上，下，左，右中的任意一个。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">changeDirection</span>(<span class="params"><span class="string">&#x27;up&#x27;</span> | <span class="string">&#x27;down&#x27;</span> | <span class="string">&#x27;left&#x27;</span> | <span class="string">&#x27;right&#x27;</span></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(direction)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解释：参数direction的值只能是up/down/left/right 中的其中一个。</p><p>优势：相比于string类型，使用字面量类型更加精确，严谨</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">changeDirection</span>(<span class="params">direction: <span class="string">&#x27;up&#x27;</span> | <span class="string">&#x27;down&#x27;</span> | <span class="string">&#x27;left&#x27;</span> | <span class="string">&#x27;right&#x27;</span></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">changeDirection(<span class="string">&#x27;down&#x27;</span>)</span><br></pre></td></tr></table></figure><h4 id="枚举类型">枚举类型</h4><p>枚举的功能类似于字面量类型+联合类型组合的功能，也可以表示一组明确的可选值。</p><p>枚举：定义一组命名常量。它描述一个值，该值可以是这些命名常量中的一个。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">enum</span> Direction&#123; Up, Down, Left, Right &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">changeDirection</span>(<span class="params">direction: Direction</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(direction)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解释：</p><ol><li>使用enum关键字定义枚举</li><li>约定枚举名称，枚举中的值以大写字母开头</li><li>枚举中的多个值之间通过，（逗号）分隔</li><li>定义好枚举后，直接使用枚举名称作为类型注解</li></ol><p>注意：形参direction的类型为枚举Direction，那么，实参的值就应该是枚举Direction成员的任意一个。</p><p>访问枚举成员：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">enum</span> Direction&#123;Up, Down, Left, Right&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">changeDirection</span>(<span class="params">direction: Direction</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(direction)</span><br><span class="line">&#125;</span><br><span class="line">changeDirection(Direction.Up)</span><br></pre></td></tr></table></figure><p>解释：类似于Java中的对象，直接用点（.）语法访问枚举成员</p><h4 id="枚举成员的值以及数字枚举">枚举成员的值以及数字枚举</h4><p>问题：我们把枚举成员作为了函数的实参，它的值是什么呢？</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">changeDirection(Direction.Up)</span><br></pre></td></tr></table></figure><p>解释：通过将鼠标移入Direction.Up，可以看到枚举成员Up的值为0。</p><p>注意：枚举成员是有值的，默认为从0开始自增的数值</p><p>我们把，枚举成员的值为数字的枚举，称为：数字枚举</p><p>我们也可以给枚举中的成员初始化值：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Down -&gt; 11 、Left -&gt; 12 、Right -&gt; 13</span></span><br><span class="line"><span class="built_in">enum</span> Direction &#123; Up = <span class="number">10</span>, Down, Left, Right&#125;</span><br></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">enum</span> Direction &#123; up = <span class="number">2</span>, Down = <span class="number">4</span>, Left = <span class="number">8</span>, Right = <span class="number">16</span>&#125;</span><br></pre></td></tr></table></figure><h4 id="字符串枚举">字符串枚举</h4><p>字符串枚举：枚举成员的值是字符串</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">enum</span> Direction &#123;</span><br><span class="line">    Up = <span class="string">&#x27;UP&#x27;</span>,</span><br><span class="line">    Down = <span class="string">&#x27;DOWN&#x27;</span>,</span><br><span class="line">    Left = <span class="string">&#x27;LEFT&#x27;</span>,</span><br><span class="line">    Right = <span class="string">&#x27;RIGHT&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：字符串枚举没有自增长行为，因此，字符串枚举的每个成员必须有初始值。</p><h4 id="枚举的特点及原理">枚举的特点及原理</h4><p>枚举是TS为数不多的非JavaScript类型级扩展（不仅仅是类型）的特性之一</p><p>因为：其他类型仅仅被当作类型，而枚举不用作类型，还提供值（枚举成员都是有值的）。</p><p>也就是说，其他的类型会在编译为JS代码时自动移除。但是，枚举类型会被编译为JS代码！</p><p>例如下面的这段代码：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">enum</span> Direction &#123;</span><br><span class="line">    Up = <span class="string">&#x27;UP&#x27;</span>,</span><br><span class="line">    Down = <span class="string">&#x27;DOWN&#x27;</span>,</span><br><span class="line">    Left = <span class="string">&#x27;LEFT&#x27;</span>,</span><br><span class="line">    Right = <span class="string">&#x27;RIGHT&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>会被转化为下面这段代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Direction;</span><br><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params">Direction</span>)</span>&#123;</span><br><span class="line">    Direction[<span class="string">&quot;Up&quot;</span>] = <span class="string">&quot;UP&quot;</span>;</span><br><span class="line">    Direction[<span class="string">&quot;Down&quot;</span>] = <span class="string">&quot;DOWN&quot;</span>;</span><br><span class="line">    Direction[<span class="string">&quot;Left&quot;</span>] = <span class="string">&quot;LEFT&quot;</span>;</span><br><span class="line">    Direction[<span class="string">&quot;Right&quot;</span>] = <span class="string">&quot;RIGHT&quot;</span>;</span><br><span class="line">&#125;)(Direction || (Direction = &#123;&#125;));</span><br></pre></td></tr></table></figure><p>说明：枚举与前面讲到的字面量类型+联合类型组合的功能类似，都用来表示一组明确的可选值列表。</p><p>一般情况下，推荐使用字面量类型+联合类型组合的方式，因为相比枚举，这种方式更加直观，简洁，高效。</p><h4 id="TypeScript常用类型-2">TypeScript常用类型</h4><p>众所周知，JS提供了typeof操作符，用来在JS中获取数据的类型。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> <span class="string">&quot;Hello world&quot;</span>)</span><br></pre></td></tr></table></figure><p>实际上，TS也提供了typeof操作符：可以在类型上下文中引用变量或者属性的类型。</p><p>使用场景：根据已有变量的值，获取该值的类型，来简化类型书写。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> p = &#123; <span class="attr">x</span>: <span class="number">1</span>, <span class="attr">y</span>: <span class="number">2</span>&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">formatPoint</span>(<span class="params">point: &#123;x: <span class="built_in">number</span>; y: <span class="built_in">number</span>&#125;</span>)</span>&#123;&#125;</span><br><span class="line">formatPoint(p)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">function formatPoint(point: typeof p)&#123;&#125;</span><br></pre></td></tr></table></figure><p>解释：</p><ol><li>使用typeof操作符来获取变量p的类型，结果与第一种（对象字面量形式的类型）相同。</li><li>typeof出现在类型注解的位置（参数名称的冒号后面）所处的环境就在类型上下文（区别于JS代码）。</li><li>注意：typeof只能用来查询变量或者属性的类型，无法查询其他形式的类型（比如，函数调用的类型）。</li></ol><h3 id="TypeScript高级类型">TypeScript高级类型</h3><p>TS中的高级类型有很多，重点学习以下高级类型：</p><ol><li>class类</li><li>类型兼容性</li><li>交叉类型</li><li>泛型和keyof</li><li>索引签名类型和索引查询类型</li><li>映射类型</li></ol><h4 id="class类">class类</h4><p>Typescript全面支持ES2015中引入的class关键字，并为其添加了类型注解和其他语法（比如可见性修饰符等）。</p><p>class的基本使用，如下：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> Person()</span><br></pre></td></tr></table></figure><p>解释：</p><ol><li>根据TS中的类型推论，可以知道Person类的实例对象p的类型是Person。</li><li>TS中的class，不仅提供了class的语法功能，也作为一种类型存在。</li></ol><p>实例属性初始化：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="attr">age</span>: <span class="built_in">number</span></span><br><span class="line">    <span class="attr">gender</span>: <span class="string">&#x27;男&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解释：</p><ol><li>声明成员age，类型为number（没有初始值）</li><li>声明成员gender，并设置初始值，此时，可省略类型注解（TS类型推论为string类型）</li></ol><h4 id="class类的构造函数">class类的构造函数</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="attr">age</span>: <span class="built_in">number</span></span><br><span class="line">    <span class="attr">gender</span>: <span class="built_in">string</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">age: <span class="built_in">number</span>, gender: <span class="built_in">string</span></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age</span><br><span class="line">        <span class="built_in">this</span>.gender = gender</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解释：</p><ol><li>成员初始化（比如age：number）后，才可以通过this.age来访问实例成员。</li><li>需要为构造函数指定类型注解，否则会被隐式推断为any；构造函数不需要返回值类型。</li></ol><h4 id="类的实例方法">类的实例方法</h4><p>实例方法：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span></span>&#123;</span><br><span class="line">    x = <span class="number">10</span></span><br><span class="line">    y = <span class="number">10</span></span><br><span class="line">    </span><br><span class="line">    scale(n: <span class="built_in">number</span>): <span class="built_in">void</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.x *= n</span><br><span class="line">        <span class="built_in">this</span>.y *= n</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解释：方法的类型注解（参数和返回值）与函数用法相同。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span> </span>&#123;</span><br><span class="line">    x = <span class="number">1</span></span><br><span class="line">    y = <span class="number">2</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">scale</span>(<span class="params">n: <span class="built_in">number</span></span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.x *= n</span><br><span class="line">        <span class="built_in">this</span>.y *= n</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> p = <span class="keyword">new</span> Point()</span><br><span class="line">p.scale(<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(p.x)</span><br><span class="line"><span class="built_in">console</span>.log(p.y)</span><br></pre></td></tr></table></figure><h4 id="extends关键字">extends关键字</h4><p>类继承的两种方式：1.extends（继承父类）2.implements（实现接口）。</p><p>说明：JS中只有extends，而implements是TS提供的。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="title">move</span>(<span class="params"></span>)</span> &#123; <span class="built_in">console</span>.log(<span class="string">&#x27;Moving along!&#x27;</span>) &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">bark</span>(<span class="params"></span>)</span> &#123;<span class="built_in">console</span>.log(<span class="string">&#x27;汪！ &#x27;</span>)&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> dog = <span class="keyword">new</span> Dog()</span><br></pre></td></tr></table></figure><p>解释：</p><ol><li>通过extends关键字实现继承</li><li>子类Dog继承父类Animal，则Dog的实例对象dog就同时具有了父类Animal和子类Dog的所有属性和方法</li></ol><p>类继承的第二种方式：实现接口</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Singable&#123;</span><br><span class="line">    sing(): <span class="built_in">void</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> <span class="title">implements</span> <span class="title">Singable</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="title">sing</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;你是我的小苹果&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>通过<code>implement</code>关键字让class实现接口。</li><li>Person类实现接口Singable意味着，Person类中必须提供Singable接口中指定的所有方法和属性。</li></ol><h3 id="类的可见性">类的可见性</h3><p>类成员的可见性：可以用TS来控制class的方法或属性对于class外的代码是否可见。</p><p>可见修饰符包含：1.public（公有的） 2.protected（受保护的）3.private（私有的）</p><p>1.public：表示公有的、公开的，公有成员可以被任何地方访问，默认可见性。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="title">move</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;Moving along!&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解释：</p><ol><li>在类属性或方法前面添加public关键字，来修饰该属性或方法是公有的。</li><li>因为public是默认可见性，所以可以直接省略。</li></ol><p>2.protected：表示受保护的，仅对其声明所在类和子类中（非实例对象）可见。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="title">move</span>(<span class="params"></span>)</span> &#123; <span class="built_in">console</span>.log(<span class="string">&#x27;Moving along!&#x27;</span>) &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">extends</span> <span class="title">Animal</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="title">bark</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;汪！&#x27;</span>)</span><br><span class="line">        <span class="built_in">this</span>.move()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解释：</p><ol><li>在类属性或方法前面添加<code>protected</code>关键字，来修饰该属性或者方法是受保护的。</li><li>在子类的方法内部可以通过this来访问父类中受保护的成员，但是，对实例不可见。</li></ol><p>3.private：表示私有的，只在当前类中可见，对实例对象以及子类也是不可见的。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="title">move</span>(<span class="params"></span>)</span> &#123; <span class="built_in">console</span>.log(<span class="string">&#x27;Moving along!&#x27;</span>) &#125;</span><br><span class="line">    <span class="function"><span class="title">walk</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.move()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解释：</p><ol><li>在类属性或方法前面添加<code>private</code>关键字，来修饰该属性或者方法是私有的。</li><li>私有的属性或者方法只在当前类中可见，对子类和实例对象也都是不可见的。</li></ol><h3 id="readonly只读修饰符">readonly只读修饰符</h3><p>除了可见性修饰符之外，还有一个常见的修饰符就是：readonly（只读修饰符）</p><p>readonly：表示只读，用来防止在构造函数之外对属性进行赋值。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="comment">// 注意：只要是readonly来修饰的属性，必须手动提供明确的类型。</span></span><br><span class="line">    <span class="keyword">readonly</span> age: <span class="built_in">number</span> = <span class="number">18</span></span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">age: <span class="built_in">number</span></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解释：</p><ol><li>使用readonly关键字修饰该属性是只读的，注意只能修饰属性不能修饰方法。</li><li>属性age后面的类型注解（比如，此处的number）如果不加，则age的类型为18</li><li>接口或者{}表示的对象类型，也可以使用readonly。</li></ol><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> IPerson &#123;</span><br><span class="line">    <span class="keyword">readonly</span> name: <span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj: IPerson = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;jack&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这一行代码会报错</span></span><br><span class="line">obj.name = <span class="string">&quot;rose&quot;</span></span><br></pre></td></tr></table></figure><h3 id="类型兼容性">类型兼容性</h3><p>两种类型系统：1.Structural Type System（结构化类型系统）2.Nominal Type System（标明类型系统）</p><p>TS采用的是结构化类型系统，也叫做duck typing（鸭子类型），类型检查关注的是值所具有的形状。</p><p>也就是说，在结构类型系统中，如果两个对象具有相同的形状，则认为它们属于同一类型。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span> </span>&#123; x: <span class="built_in">number</span>; y: <span class="built_in">number</span> &#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point2D</span> </span>&#123; x:<span class="built_in">number</span>; y:<span class="built_in">number</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> p: Point = <span class="keyword">new</span> Point2D()</span><br></pre></td></tr></table></figure><p>解释：</p><ol><li>Point和Point2D是两个名称不同的类。</li><li>变量p的类型被显示标注为Point类型，但是，它的值确实Point2D的实例，并且没有类型错误。</li><li>因为TS是结构化类型系统，只检查Point和Point2D的结构是否相同（相同，都具有x和y两个属性，属性类型也相同）</li><li>但是，如果在Nominal Type System中（比如，C#，java等），它们不是相同的类，类型无法兼容。</li></ol><h3 id="对象之间的类型兼容性">对象之间的类型兼容性</h3><p>注意：在结构化类型系统中，如果两个对象具有相同的形状，则认为它们属于同一类型，这种说法并不准确。</p><p>更准确来说：对于对象类型来说，y的成员至少与x相同，则x兼容y（成员多的可以赋值给少的）</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span> </span>&#123; x: <span class="built_in">number</span>; y: <span class="built_in">number</span>&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point3D</span> </span>&#123; x: <span class="built_in">number</span>; y: <span class="built_in">number</span>; z: <span class="built_in">number</span>&#125;</span><br><span class="line"><span class="keyword">const</span> p: Point = <span class="keyword">new</span> Point3D()</span><br></pre></td></tr></table></figure><p>解释：</p><ol><li>Point3D的成员至少与Point相同，则Point兼容Point3D。</li><li>所以，成员多的Point3D可以赋值给成员少的Point。</li></ol><h3 id="接口之间的类型兼容性">接口之间的类型兼容性</h3><ul><li>接口之间的兼容性，类似于class，并且class和interface也可以兼容</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Point &#123;</span><br><span class="line">    <span class="attr">x</span>: <span class="built_in">number</span>;</span><br><span class="line">    y: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> Point2D &#123;</span><br><span class="line">    <span class="attr">x</span>: <span class="built_in">number</span>;</span><br><span class="line">    y: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> p1: Point</span><br><span class="line"><span class="keyword">let</span> p2: Point2D = p1</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> Point3D &#123;</span><br><span class="line">    <span class="attr">x</span>: <span class="built_in">number</span>;</span><br><span class="line">    y: <span class="built_in">number</span>;</span><br><span class="line">    z: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> p3: Point3D</span><br><span class="line">p2 = p3</span><br></pre></td></tr></table></figure><h3 id="函数之间兼容性">函数之间兼容性</h3><ul><li>函数之间兼容性比较复杂，需要考虑1.参数个数2.参数类型3.返回值类型</li></ul><p>1.参数个数：参数多的兼容参数少的（或者说，参数少的可以赋值给多的）。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> F1 = <span class="function">(<span class="params">a: <span class="built_in">number</span></span>) =&gt;</span> <span class="built_in">void</span></span><br><span class="line"><span class="keyword">type</span> F2 = <span class="function">(<span class="params">a: <span class="built_in">number</span>, b: <span class="built_in">number</span></span>) =&gt;</span> <span class="built_in">void</span></span><br><span class="line"><span class="keyword">let</span> f1: F1</span><br><span class="line"><span class="keyword">let</span> f2: F2 = f1</span><br></pre></td></tr></table></figure><p>解释：</p><ol><li><p>参数少的可以赋值给参数多的，所以f1可以赋值给f2.</p></li><li><p>数组forEach方法的第一个参数是回调函数，该实例中类型为：（value:string, index: number, array: string[]）=&gt; void</p></li><li><p>在JS中省略用不到的函数实际上是很常见的，这样的使用方式，促成了TS中函数类型之间的兼容性。</p></li><li><p>并且因为回调函数是有类型的，所以TS会自动推导出参数item，index，array的类型。</p></li><li><p>参数类型，相同位置的参数类型要相同（原始类型）或兼容（对象类型）。</p></li></ol><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> F1 = <span class="function">(<span class="params">a: <span class="built_in">number</span></span>) =&gt;</span> <span class="built_in">string</span></span><br><span class="line"><span class="keyword">type</span> F2 = <span class="function">(<span class="params">a: <span class="built_in">number</span></span>) =&gt;</span> <span class="built_in">string</span></span><br><span class="line"><span class="keyword">let</span> f1: F1</span><br><span class="line"><span class="keyword">let</span> f2: F2</span><br></pre></td></tr></table></figure><p>解释：函数类型F2兼容函数类型F1，因为F1和F2的第一个参数类型相同。</p><h3 id="函数返回值">函数返回值</h3><p>返回值类型，只关注返回值类型本身即可</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> F5 = <span class="function">() =&gt;</span> <span class="built_in">string</span></span><br><span class="line"><span class="keyword">type</span> F6 = <span class="function">() =&gt;</span> <span class="built_in">number</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> f5: F5</span><br><span class="line"><span class="keyword">let</span> f6: F6</span><br><span class="line"></span><br><span class="line"><span class="comment">// 报错</span></span><br><span class="line">f5 = f6</span><br></pre></td></tr></table></figure><p>解释：</p><ol><li>如果返回值类型是原始类型，此时两个类型要相同，比如，左侧类型F5和F6.</li><li>如果返回值类型是对象类型，此时成员多的可以赋值给成员少的，比如下面的代码：</li></ol><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> F7 = <span class="function">() =&gt;</span> &#123; <span class="attr">name</span>: <span class="built_in">string</span> &#125;</span><br><span class="line"><span class="keyword">type</span> F8 = <span class="function">() =&gt;</span> &#123; <span class="attr">name</span>: <span class="built_in">string</span>; age: <span class="built_in">number</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> f7: F7</span><br><span class="line"><span class="keyword">let</span> f8: F8</span><br><span class="line">f7 = f8</span><br></pre></td></tr></table></figure><h3 id="交叉类型">交叉类型</h3><p>交叉类型（&amp;）：功能类似于接口继承（extends），用于组合多个类型为一个类型（常用于对象类型）。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Person &#123; name: <span class="built_in">string</span> &#125;</span><br><span class="line"><span class="keyword">interface</span> Contact &#123; phone: <span class="built_in">string</span> &#125;</span><br><span class="line"><span class="keyword">type</span> PersonDetail = Person &amp; Contact</span><br><span class="line"><span class="keyword">let</span> obj: PersonDetail = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;jack&#x27;</span>,</span><br><span class="line">    <span class="attr">phone</span>: <span class="string">&#x27;133...&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解释：使用交叉类型后，新的类型PersonDetail就同时具备了Person和Contact的所有属性类型</p><p>相当于</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> PersonDetail = &#123; <span class="attr">name</span>: <span class="built_in">string</span>; phone: <span class="built_in">string</span> &#125;</span><br></pre></td></tr></table></figure><h2 id="泛型">泛型</h2><h3 id="泛型的基本使用">泛型的基本使用</h3><p>泛型是在<code>保证类型安全</code>的前提下，让函数等与多种类型一起工作，从而实现复用，常用于：函数，接口，class中。</p><p>需求：创建一个id函数，传入什么数据就返回该数据本身（也就是说，参数和返回值类型相同）</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">id</span>(<span class="params">value: <span class="built_in">number</span></span>): <span class="title">number</span> </span>&#123; <span class="keyword">return</span> value &#125;</span><br></pre></td></tr></table></figure><p>比如，id(10)调用会返回10本身，但是，该函数只接收数值类型，无法用于其他类型。</p><p>可以将参数类型修改为any，可是这样就失去了TS类型保护，类型不安全：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">id</span>(<span class="params">value: <span class="built_in">any</span></span>): <span class="title">any</span> </span>&#123; <span class="keyword">return</span> value &#125;</span><br></pre></td></tr></table></figure><p>泛型在保证类型安全的同时，可以让函数与多种不同的类型一起工作。灵活可复用。</p><p>创建泛型函数：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">id</span>&lt;<span class="title">Type</span>&gt;(<span class="params">value: Type</span>): <span class="title">Type</span> </span>&#123; <span class="keyword">return</span> value &#125;</span><br></pre></td></tr></table></figure><p>语法：</p><ol><li>语法：在函数名称后面跟&lt;&gt;(尖括号)，尖括号中添加类型变量，比如此处的Type</li><li>类型变量Type，是一种特殊类型的变量，他处理类型而不是值。</li><li>该类型变量相当于一个类型容器，能够捕获用户提供的类型。</li><li>因为是Type类型，因此可以将其作为函数参数和返回值的类型，表示参数和返回值具有相同类型。</li><li>类型变量Type，可以是合法名称。</li></ol><p>调用泛型函数：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">id</span>&lt;<span class="title">Type</span>&gt;(<span class="params">value: Type</span>): <span class="title">Type</span> </span>&#123; <span class="keyword">return</span> <span class="literal">true</span> &#125;</span><br></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> num = id&lt;<span class="built_in">number</span>&gt;(<span class="number">10</span>)</span><br></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> str = id&lt;<span class="built_in">string</span>&gt;(<span class="string">&#x27;a&#x27;</span>)</span><br></pre></td></tr></table></figure><p>解释：</p><ol><li>语法：在函数名称的后面添加&lt;&gt;(尖括号)，尖括号中指定具体的类型，比如，此处的number。</li><li>当传入类型number后，这个类型就会被函数声明时指定的类型变量Type捕获到。</li><li>此时，Type的类型就是number，所以，函数id参数和返回值的类型也都是number。</li></ol><p>同样，如果传入类型string，函数id参数和返回值的类型就都是string。</p><p>这样通过泛型就做到了让id函数与多种不同的类型一起工作，实现了复用的同时保证了类型安全。</p><h3 id="简化调用泛型">简化调用泛型</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">id</span>&lt;<span class="title">Type</span>&gt;(<span class="params">value: Type</span>): <span class="title">Type</span> </span>&#123; <span class="keyword">return</span> value &#125;</span><br></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> num = id&lt;<span class="built_in">number</span>&gt;(<span class="number">10</span>)</span><br></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> num = id(<span class="number">10</span>)</span><br></pre></td></tr></table></figure><p>解释：</p><ol><li>在调用泛型函数时，可以省略&lt;类型&gt;来简化泛型函数的调用。</li><li>此时，TS内部会采用一种叫做类型参数推断的机制，来根据传入的实参自动推断出类型变量Type的类型。</li><li>比如，传入实参10，TS会自动推断出变量num的类型number，并作为Type的类型。</li></ol><p>推荐：使用这种简化的方式调用泛型函数，使代码更短，更易于阅读。</p><p>说明：当编译器无法推断类型或者推断的类型不准确时，就需要显示地传入类型参数。</p><h3 id="泛型约束">泛型约束</h3><p>泛型约束：默认情况下，泛型类型地类型变量Type可以代表多个类型，这导致无法访问任何属性。</p><p>比如，id(‘a’)调用函数时获取参数的长度：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">id</span>&lt;<span class="title">Type</span>&gt;(<span class="params">value: Type</span>): <span class="title">Type</span></span>&#123;</span><br><span class="line">    <span class="comment">// 报错</span></span><br><span class="line">    <span class="built_in">console</span>.log(value.length)</span><br><span class="line">    <span class="keyword">return</span> value</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解释：Type可以表示任意类型，无法保证一定存在length属性，比如number类型就没有length。</p><p>此时，就需要为泛型<code>添加约束</code>来收缩类型。（缩窄类型取值范围）。</p><p>添加泛型约束收缩类型，主要有以下两种方式：1.指定更加具体的类型2.添加约束</p><p>1.指定更加具体的类型</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">id</span>&lt;<span class="title">Type</span>&gt;(<span class="params">value: Type[]</span>): <span class="title">Type</span>[]</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(value.length)</span><br><span class="line">    <span class="keyword">return</span> value</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>比如，将类型修改为Type[]（Type类型的数组），因为只要是数组就一定存在length属性，因此就可以访问了。</p><p>2.添加约束</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> ILength &#123; length: <span class="built_in">number</span> &#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">id</span>&lt;<span class="title">Type</span> <span class="title">extends</span> <span class="title">ILength</span>&gt;(<span class="params">value: Type</span>): <span class="title">Type</span></span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(value.length)</span><br><span class="line">    <span class="keyword">return</span> value</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解释：</p><ol><li>创建描述约束的接口ILength，该接口要求提供length属性</li><li>通过extends关键字使用该接口，为泛型（类型变量）添加约束</li><li>该约束表示：传入的类型必须具有length属性。</li></ol><p>注意：传入的实参（比如，数组）只要有length属性即可，这也符合前面讲到的接口的类型兼容性。</p><h3 id="多个泛型变量">多个泛型变量</h3><p>泛型的类型变量可以有多个，并且类型变量之间还可以约束（比如，第二个类型变量受第一个类型变量约束）。</p><p>比如，创建一个函数来获取对象属性的值：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getProp</span>&lt;<span class="title">Type</span>, <span class="title">Key</span> <span class="title">extends</span> <span class="title">keyOf</span> <span class="title">Type</span>&gt;(<span class="params">obj: Type,key: Key</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> obj[key]</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> person = &#123; <span class="attr">name</span>: <span class="string">&#x27;jack&#x27;</span>, <span class="attr">age</span>: <span class="number">18</span> &#125;</span><br><span class="line">getProp(person, <span class="string">&#x27;name&#x27;</span>)</span><br></pre></td></tr></table></figure><p>解释：</p><ol><li>添加了第二个类型变量Key，两个类型变量之间使用(，)分隔。</li><li>keyof关键字接收一个对象类型，生成其键名称（可能是字符串或数字）的联合类型。</li><li>本实例中keyof Type实际上获取的是person对象所有键的联合类型，也就是：‘name’ | ‘age’</li><li>类型变量key受Type约束，可以理解为：Key只能是Type所有键中的任意一个，或者说只能访问对象中存在的属性。</li></ol><h3 id="泛型接口">泛型接口</h3><p>泛型接口：接口也可以配合泛型来使用，以增加其灵活性，增加其复用性。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> IdFunc&lt;Type&gt; &#123;</span><br><span class="line">    <span class="attr">id</span>: <span class="function">(<span class="params">value: Type</span>) =&gt;</span> Type</span><br><span class="line">    <span class="attr">ids</span>: <span class="function">() =&gt;</span> Type[]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj: IdFunc&lt;<span class="built_in">number</span>&gt; = &#123;</span><br><span class="line">    <span class="function"><span class="title">id</span>(<span class="params">value</span>)</span> &#123; <span class="keyword">return</span> value &#125;,</span><br><span class="line">    <span class="function"><span class="title">ids</span>(<span class="params"></span>)</span> &#123; <span class="keyword">return</span> [<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>] &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解释：</p><ol><li>接口名称的后面添加&lt;类型变量&gt;，那么，这个接口就变成了泛型接口。</li><li>接口的类型变量，对接口中所有其他成员可见，也就是接口中所有成员都可以使用类型变量。</li><li>使用泛型接口时，需要显式指定具体的类型。（比如，此处的IdFunc&lt;number&gt;）</li><li>此时，id方法的参数和返回值类型都是number，ids方法的返回值类型是number[]。</li></ol><p>其实，JS中的数组在TS中就是一个泛型接口。</p><h3 id="泛型-2">泛型</h3><p>泛型类：class也可以配合泛型来使用。</p><p>比如，React的class组件的基类Component就是泛型类，不同的组件有不同的props和state。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> IState &#123; count: <span class="built_in">number</span> &#125;</span><br><span class="line"><span class="keyword">interface</span> IProps &#123; maxLength: <span class="built_in">number</span> &#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">InputCount</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span>&lt;<span class="title">IProps</span>, <span class="title">Istate</span>&gt;</span>&#123;</span><br><span class="line">    <span class="attr">state</span>: IState = &#123;</span><br><span class="line">        <span class="attr">count</span>: <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;this.props.maxLength&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解释：React.Component泛型类两个类型变量，分别指定props和state类型。</p><p>创建泛型类：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GenericNumber</span>&lt;<span class="title">NumType</span>&gt; </span>&#123;</span><br><span class="line">    <span class="attr">defaultValue</span>: NumType</span><br><span class="line">    <span class="attr">add</span>: <span class="function">(<span class="params">x: NumType, y: NumType</span>) =&gt;</span> NumType</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解释：</p><ol><li>类似于泛型接口，在class名称后面添加类型变量&lt;类型变量&gt;，这个类就变成了泛型类。</li><li>此处的add方法，采用的是箭头函数形式的类型书写方式。</li></ol><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> myNum = <span class="keyword">new</span> GenericNumber&lt;<span class="built_in">number</span>&gt;()</span><br><span class="line">myNum.defaultValue = <span class="number">10</span></span><br></pre></td></tr></table></figure><p>类似于泛型接口，在创建class实例时，在类名后面通过&lt;类型&gt;来指定明确的类型。</p><h3 id="泛型的工具类型">泛型的工具类型</h3><p>泛型工具类型：TS内置了一些常用的工具类型，来简化TS中的一些常见操作。</p><p>说明：它们都是基于泛型实现的，并且是内置的，可以直接在代码中使用。</p><p>这些工具类型有很多，主要学习以下几个：</p><ol><li>Partial&lt;Type&gt;</li><li>Readonly&lt;Type&gt;</li><li>Pick&lt;Type, Keys&gt;</li><li>Record&lt;Keys, Type&gt;</li></ol><p>1.泛型工具类型 - Partial&lt;Type&gt;用来构造(创建)一个类型，将Type的所有属性设置为可选。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Props &#123;</span><br><span class="line">    <span class="attr">id</span>: <span class="built_in">string</span></span><br><span class="line">    <span class="attr">children</span>: <span class="built_in">number</span>[]</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> PartialProps = Partial&lt;Props&gt;</span><br></pre></td></tr></table></figure><p>解释：构造出来的新类型<code>PartialProps</code>结构和<code>Props</code>相同，但所有属性都变为可选的。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Props &#123;</span><br><span class="line">    <span class="attr">id</span>: <span class="built_in">string</span></span><br><span class="line">    <span class="attr">children</span>: <span class="built_in">number</span>[]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> PartialProps = Partial&lt;Props&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj: PartialProps = &#123;</span><br><span class="line">    <span class="attr">id</span>: <span class="string">&#x27;thy&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.泛型工具类型 - Readonly&lt;Type&gt;用来构造一个类型，将Type的所有属性都设置为readonly（只读）。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Props &#123;</span><br><span class="line">    <span class="attr">id</span>: <span class="built_in">string</span></span><br><span class="line">    <span class="attr">children</span>: <span class="built_in">number</span>[]</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> ReadonlyProps = Readonly&lt;Props&gt;</span><br></pre></td></tr></table></figure><p>解释：构造出来的新类型ReadonlyProps结构和Props相同，但所有属性都变为只读的。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> props: ReadonlyProps = &#123; <span class="attr">id</span>: <span class="string">&#x27;1&#x27;</span>, <span class="attr">children</span>: [] &#125;</span><br><span class="line"><span class="comment">// 报错</span></span><br><span class="line">props.id = <span class="string">&#x27;2&#x27;</span></span><br></pre></td></tr></table></figure><p>当我们向重新给id属性赋值时，就会报错：无法分配到&quot;id&quot;,因为它是只读属性。</p><p>3.Pick</p><p>泛型工具类型-Pick&lt;Type, Keys&gt;从Type中选择一组属性来构建新的类型。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Props &#123;</span><br><span class="line">    <span class="attr">id</span>: <span class="built_in">string</span></span><br><span class="line">    <span class="attr">title</span>: <span class="built_in">string</span></span><br><span class="line">    <span class="attr">children</span>: <span class="built_in">number</span>[]</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> PickProps = Pick&lt;Props, <span class="string">&#x27;id&#x27;</span> | <span class="string">&#x27;title&#x27;</span>&gt;</span><br></pre></td></tr></table></figure><p>解释：</p><ol><li>Pick工具类型有两个变量：1.表示选择谁的属性2.表示选择哪几个属性。</li><li>其中第二个类型变量，如果只选择一个则只传入该属性名即可。</li><li>第二个类型传入的属性只能是第一个类型变量中存在的属性。</li><li>构造出来的新类型PickProps，只有id和title两个类型属性。</li></ol><p>4.Record</p><p>泛型工具类型 - Record&lt;Keys, Type&gt;构造一个对象类型，属性键为Keys，属性类型为Type。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> RecordObj = Record&lt;<span class="string">&#x27;a&#x27;</span>|<span class="string">&#x27;b&#x27;</span>|<span class="string">&#x27;c&#x27;</span>, <span class="built_in">string</span>[]&gt;</span><br><span class="line"><span class="keyword">let</span> obj: RecordObj = &#123;</span><br><span class="line">    <span class="attr">a</span>: [<span class="string">&#x27;1&#x27;</span>],</span><br><span class="line">    <span class="attr">b</span>: [<span class="string">&#x27;2&#x27;</span>],</span><br><span class="line">    <span class="attr">c</span>: [<span class="string">&#x27;3&#x27;</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解释：</p><ol><li>Record工具类型有两个类型变量：1.表示对象有哪些属性2.表示对象属性的类型</li><li>构建的新对象类型RecordObj表示：这个对象有三个属性分别为a/b/c，属性值的类型都是string[]。</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h2 id=&quot;typescript介绍&quot;&gt;typescript介绍&lt;/h2&gt;
&lt;h3 id=&quot;typescript是什么&quot;&gt;typescript是什么&lt;/h3&gt;
&lt;p&gt;Typescript是Javascript的超集&lt;/p&gt;
&lt;p&gt;TypeScript</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Unity</title>
    <link href="http://example.com/2023/08/05/Unity/"/>
    <id>http://example.com/2023/08/05/Unity/</id>
    <published>2023-08-05T13:44:12.000Z</published>
    <updated>2023-08-06T13:07:21.707Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1>Unity 2D</h1><h2 id="运送车游戏">运送车游戏</h2><h3 id="什么是方法">什么是方法</h3><p>方法是让利用方法块让我们的游戏去做事情。</p><p>我们可以：</p><ul><li>使用Unity里已经存在的方法</li><li>使用我们自己创建的方法</li></ul><h3 id="方法的创建和调用">方法的创建和调用</h3><ul><li>当我们创建方法后，我们给了方法名称然后告诉方法我们怎么做</li><li>当我们调用方法时，我们想要在这里执行该方法。</li></ul><p>我们编辑Driver.cs文件：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Driver</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// Start is called before the first frame update</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Start</span>(<span class="params"></span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Update is called once per frame</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Update</span>(<span class="params"></span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可以看到该类中有两个方法：<strong>Start</strong>()和<strong>Update</strong>()</p><p>其中<strong>Start</strong>方法可以在第一帧开始更新时执行，<strong>Update</strong>可以在每一帧执行。</p><p>我们可以为<strong>Driver</strong>设置旋转属性：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Driver</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// Start is called before the first frame update</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Start</span>(<span class="params"></span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Update is called once per frame</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Update</span>(<span class="params"></span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        transform.Rotate(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.1f</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Unity输入系统">Unity输入系统</h3><p>输入系统：将玩家的物理动作(例如：鼠标点击，键盘按键)转换为游戏里的信息。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h1&gt;Unity 2D&lt;/h1&gt;
&lt;h2 id=&quot;运送车游戏&quot;&gt;运送车游戏&lt;/h2&gt;
&lt;h3 id=&quot;什么是方法&quot;&gt;什么是方法&lt;/h3&gt;
&lt;p&gt;方法是让利用方法块让我们的游戏去做事情。&lt;/p&gt;
&lt;p&gt;我们可以：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用Unity</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>操作系统</title>
    <link href="http://example.com/2023/07/29/%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    <id>http://example.com/2023/07/29/%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/</id>
    <published>2023-07-29T06:15:37.000Z</published>
    <updated>2023-08-05T13:30:44.513Z</updated>
    
    <content type="html"><![CDATA[<h2 id="课程使用的操作系统">课程使用的操作系统</h2><p>XV6，在RISC-V下运行，</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;课程使用的操作系统&quot;&gt;课程使用的操作系统&lt;/h2&gt;
&lt;p&gt;XV6，在RISC-V下运行，&lt;/p&gt;
</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://example.com/2023/06/18/AI%E5%8A%A8%E7%94%BB/"/>
    <id>http://example.com/2023/06/18/AI%E5%8A%A8%E7%94%BB/</id>
    <published>2023-06-17T23:26:21.210Z</published>
    <updated>2023-06-17T23:26:21.210Z</updated>
    
    
    
    
    
  </entry>
  
</feed>
